{"version":3,"file":"deposit-DqUCO2PD.js","sources":["../../src/script/views/user/deposit.js"],"sourcesContent":["import auth from '../../utils/auth'\r\nimport reset from '../../utils/reset'\r\nimport Navbar from './components/Navbar'\r\nimport Modal from '../../components/Modal'\r\nimport supabase from '../../utils/supabaseClients'\r\nimport toastify from '../../components/toastify'\r\nimport spinner from '../../utils/spinner'\r\nimport { loadPage } from '../../routes/router'\r\nimport BTC from '../../../images/welcome/btc.png'\r\nimport ETH from '../../../images/welcome/eth.png'\r\nimport BNB from '../../../images/welcome/bnb.png'\r\nimport SOL from '../../../images/welcome/sol.png'\r\nimport { trackPageVisit } from '../../utils/analtics'\r\n\r\n\r\n// Demo assets with real crypto logos\r\nconst DEMO_ASSETS = [\r\n    {\r\n        id: '123e4567-e89b-12d3-a456-426614174000',\r\n        symbol: 'BTC',\r\n        name: 'Bitcoin',\r\n        networks: ['BTC'],\r\n        addresses: {\r\n            BTC: 'bc1ql37jxk49j29s0qhvkp8mv8x739uqywx3mvze7u'\r\n        },\r\n        logo_url: BTC,\r\n        min_deposit: 0.001\r\n    },\r\n    {\r\n        id: '123e4567-e89b-12d3-a456-426614174001',\r\n        symbol: 'ETH',\r\n        name: 'Ethereum',\r\n        networks: ['ERC20'],\r\n        addresses: {\r\n            ERC20: '0x5b06694Dc20DC3ADF3b6E5A2Aa060235D1eC03D5',\r\n        },\r\n        logo_url: ETH,\r\n        min_deposit: 0.01\r\n    },\r\n    {\r\n        id: '123e4567-e89b-12d3-a456-426614174002',\r\n        symbol: 'USDT',\r\n        name: 'Tether USD',\r\n        networks: ['USDT'],\r\n        addresses: {\r\n            USDT: '0x5b06694Dc20DC3ADF3b6E5A2Aa060235D1eC03D5',\r\n        },\r\n        logo_url: 'https://upload.wikimedia.org/wikipedia/commons/thumb/0/01/USDT_Logo.png/2048px-USDT_Logo.png',\r\n        min_deposit: 20\r\n    },\r\n    {\r\n        id: '123e4567-e89b-12d3-a456-426614174003',\r\n        symbol: 'XRP',\r\n        name: 'XRP',\r\n        networks: ['XRP'],\r\n        addresses: {\r\n            XRP: 'rPnbecvK7yVmqmmAdUf2zcPLuqkuq6kkMg'\r\n        },\r\n        logo_url: 'https://img.freepik.com/premium-vector/xrp-crypto-coin-cryptocurrency-isometric-illustration_641602-249.jpg?semt=ais_hybrid&w=740&q=80',\r\n        min_deposit: 1\r\n    },\r\n    {\r\n        id: '123e4567-e89b-12d3-a456-426614174004',\r\n        symbol: 'SOL',\r\n        name: 'Solana',\r\n        networks: ['SOL'],\r\n        addresses: {\r\n            SOL: '3TbGt1jPvMPRmpwMYAjTBq4wMHXnty9sFB47M6UZfXKX',\r\n        },\r\n        logo_url: SOL,\r\n        min_deposit: 0.01\r\n    },\r\n]\r\n\r\nconst deposit = async () => {\r\n    // Check authentication\r\n    const authCheck = await auth.check('deposit')\r\n    if (!authCheck) return { html: '', pageEvents: () => { } }\r\n\r\n    reset('Olymp AI | Deposit Assets')\r\n    await trackPageVisit()\r\n    const { html: navbar, pageEvents: navEvents } = Navbar()\r\n\r\n    // State variables\r\n    let selectedAsset = null\r\n    let selectedNetwork = null\r\n    let depositAmount = 0\r\n    let screenshot = null\r\n    let transactionPin = ''\r\n\r\n    // Copy to clipboard utility\r\n    function copyToClipboard(text) {\r\n        navigator.clipboard.writeText(text).then(() => {\r\n            toastify({\r\n                text: \"Address copied!\",\r\n                icon: \"fas fa-check\",\r\n                background: \"bg-green-500\",\r\n                duration: 2000\r\n            })\r\n        }).catch(() => {\r\n            toastify({\r\n                text: \"Failed to copy\",\r\n                icon: \"fas fa-times\",\r\n                background: \"bg-red-500\",\r\n                duration: 2000\r\n            })\r\n        })\r\n    }\r\n\r\n    // Asset selection handler\r\n    async function handleAssetSelect(e) {\r\n        const assetId = e.target.value\r\n        selectedAsset = DEMO_ASSETS.find(a => a.id === assetId)\r\n\r\n        const networkSelect = document.querySelector('#networkSelect')\r\n        const addressDisplay = document.querySelector('#addressDisplay')\r\n        const depositForm = document.querySelector('#depositForm')\r\n\r\n        if (selectedAsset) {\r\n            networkSelect.classList.remove('opacity-0')\r\n            setTimeout(() => {\r\n                networkSelect.innerHTML = `\r\n                    <label class=\"block text-sm font-medium text-gray-400 mb-2\">Select Network</label>\r\n                    <select class=\"w-full p-4 bg-brand-black/50 border border-brand-primary/20 rounded-xl text-white\r\n                                focus:border-brand-primary focus:ring-1 focus:ring-brand-primary transition-all duration-300\"\r\n                            onchange=\"window.handleNetworkSelect(event)\">\r\n                        <option value=\"\" disabled selected>Select Network</option>\r\n                        ${selectedAsset.networks.map(n => `\r\n                            <option value=\"${n}\">${n}</option>\r\n                        `).join('')}\r\n                    </select>\r\n                `\r\n            }, 300)\r\n        }\r\n        addressDisplay.classList.add('opacity-0')\r\n        depositForm.classList.add('opacity-0')\r\n    }\r\n\r\n    // Network selection handler  \r\n    async function handleNetworkSelect(e) {\r\n        selectedNetwork = e.target.value\r\n        const address = selectedAsset.addresses[selectedNetwork]\r\n        const addressDisplay = document.querySelector('#addressDisplay')\r\n        const depositForm = document.querySelector('#depositForm')\r\n\r\n        addressDisplay.classList.remove('opacity-0')\r\n        setTimeout(() => {\r\n            addressDisplay.innerHTML = `\r\n                <div class=\"space-y-4 animate-fade-in\">\r\n                    <label class=\"block text-sm font-medium text-gray-400\">Deposit Address</label>\r\n                    <div class=\"p-4 bg-brand-black/50 border border-brand-primary/20 rounded-xl space-y-4\">\r\n                        <div class=\"flex items-center gap-3\">\r\n                            <img src=\"${selectedAsset.logo_url}\" alt=\"${selectedAsset.symbol}\" \r\n                                 class=\"w-8 h-8 rounded-full\">\r\n                            <div>\r\n                                <h3 class=\"font-medium text-white\">${selectedAsset.name}</h3>\r\n                                <p class=\"text-sm text-gray-400\">${selectedNetwork} Network</p>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"flex items-center gap-2 p-3 bg-black/20 rounded-lg\">\r\n                            <code class=\"text-brand-primary flex-1 break-all text-sm\">${address}</code>\r\n                            <button type=\"button\"\r\n                                    class=\"p-2 hover:bg-white/5 rounded-lg transition-colors group\"\r\n                                    id=\"copyAddressBtn\">\r\n                                <i class=\"fas fa-copy text-gray-400 group-hover:text-white \r\n                                          transition-colors\"></i>\r\n                            </button>\r\n                        </div>\r\n                        <div class=\"text-xs text-yellow-500/80 flex items-center gap-2\">\r\n                            <i class=\"fas fa-triangle-exclamation\"></i>\r\n                            <span>Send only ${selectedAsset.symbol} to this deposit address</span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            `\r\n            // Attach copy event\r\n            document.getElementById('copyAddressBtn').onclick = () => copyToClipboard(address)\r\n            depositForm.classList.remove('opacity-0')\r\n        }, 300)\r\n    }\r\n    // Screenshot handling\r\n    async function handleScreenshot(e) {\r\n        const file = e.target.files[0]\r\n        const maxSize = 5 * 1024 * 1024 // 5MB\r\n\r\n        if (!file.type.startsWith('image/')) {\r\n            toastify({\r\n                text: \"Please upload an image file\",\r\n                icon: \"fas fa-times\",\r\n                background: \"bg-red-500\"\r\n            })\r\n            e.target.value = ''\r\n            return\r\n        }\r\n\r\n        if (file.size > maxSize) {\r\n            toastify({\r\n                text: \"Image must be less than 5MB\",\r\n                icon: \"fas fa-times\",\r\n                background: \"bg-red-500\"\r\n            })\r\n            e.target.value = ''\r\n            return\r\n        }\r\n\r\n        screenshot = file\r\n        document.getElementById('screenshotPreview').src = URL.createObjectURL(file)\r\n        document.getElementById('screenshotPreview').classList.remove('hidden')\r\n    }\r\n\r\n    // Process deposit\r\n    async function processDeposit(e) {\r\n        e.preventDefault()\r\n\r\n        // Get user session first\r\n        const { data: { session }, error: sessionError } = await supabase.auth.getSession()\r\n\r\n        if (sessionError || !session?.user?.id) {\r\n            toastify({\r\n                text: \"Authentication error. Please login again.\",\r\n                icon: \"fas fa-times\",\r\n                background: \"bg-red-500\"\r\n            })\r\n            return\r\n        }\r\n\r\n        const userId = session.user.id\r\n\r\n        // Verify asset exists in database\r\n        const { data: assetExists, error: assetError } = await supabase\r\n            .from('assets')\r\n            .select('id')\r\n            .eq('id', selectedAsset.id)\r\n            .single()\r\n\r\n        if (assetError || !assetExists) {\r\n            toastify({\r\n                text: \"Selected asset not found in database\",\r\n                icon: \"fas fa-times\",\r\n                background: \"bg-red-500\"\r\n            })\r\n            return\r\n        }\r\n\r\n        if (!selectedAsset || !selectedNetwork || !screenshot) {\r\n            toastify({\r\n                text: \"Please fill all required fields\",\r\n                icon: \"fas fa-times\",\r\n                background: \"bg-red-500\"\r\n            })\r\n            return\r\n        }\r\n\r\n        const form = e.target\r\n        const amount = parseFloat(form.amount.value)\r\n        const sourceWallet = form.sourceWallet.value\r\n\r\n        if (amount < selectedAsset.min_deposit) {\r\n            toastify({\r\n                text: `Minimum deposit is ${selectedAsset.min_deposit} ${selectedAsset.symbol}`,\r\n                background: \"bg-red-500\"\r\n            })\r\n            return\r\n        }\r\n\r\n        // Create a promise to handle PIN input\r\n        const pinPromise = new Promise((resolve) => {\r\n            const modal = new Modal({\r\n                title: 'Enter Transaction PIN',\r\n                content: `\r\n                <div class=\"space-y-4\">\r\n                    <i class=\"fas fa-lock text-4xl text-brand-primary\"></i>\r\n                    <p class=\"text-sm text-gray-400\">Enter your 6-digit transaction PIN to confirm deposit</p>\r\n                    <input type=\"password\" \r\n                           id=\"pinInput\"\r\n                           pattern=\"[0-9]*\"\r\n                           inputmode=\"numeric\"\r\n                           maxlength=\"6\"\r\n                           class=\"w-full p-4 bg-brand-black/50 border border-brand-primary/20 rounded-xl text-white\r\n                                  focus:border-brand-primary focus:ring-1 focus:ring-brand-primary text-center\"\r\n                           placeholder=\"******\">\r\n                </div>\r\n            `,\r\n                actions: [\r\n                    {\r\n                        text: 'Confirm',\r\n                        primary: true,\r\n                        onClick: (close) => {\r\n                            const pin = document.getElementById('pinInput').value\r\n                            if (pin.length === 6) {\r\n                                resolve(pin)\r\n                                close()\r\n                            } else {\r\n                                toastify({\r\n                                    text: \"Please enter a 6-digit PIN\",\r\n                                    background: \"bg-red-500\"\r\n                                })\r\n                            }\r\n                        }\r\n                    },\r\n                    {\r\n                        text: 'Cancel',\r\n                        onClick: (close) => {\r\n                            resolve(null)\r\n                            close()\r\n                        }\r\n                    }\r\n                ]\r\n            })\r\n            modal.show()\r\n        })\r\n\r\n        const pin = await pinPromise\r\n        if (!pin) return\r\n\r\n        // Show loading\r\n        spinner.start()\r\n\r\n        // Rest of your existing deposit processing code...\r\n        try {\r\n            // Upload screenshot with user ID as folder name\r\n            const filePath = `${userId}/${Date.now()}_${screenshot.name.replace(/[^a-zA-Z0-9.-]/g, '')}`\r\n            const { data: imageData, error: imageError } = await supabase.storage\r\n                .from('deposit-screenshots')\r\n                .upload(filePath, screenshot, {\r\n                    cacheControl: '3600',\r\n                    upsert: false,\r\n                    contentType: screenshot.type // Add content type\r\n                })\r\n\r\n            if (imageError) {\r\n                console.error('Upload error:', imageError)\r\n                throw new Error('Failed to upload screenshot')\r\n            }\r\n\r\n            // Get public URL for the uploaded file\r\n            const { data: publicUrlData } = supabase.storage\r\n                .from('deposit-screenshots')\r\n                .getPublicUrl(filePath)\r\n\r\n            const publicUrl = publicUrlData.publicUrl\r\n\r\n            // In the processDeposit function\r\n            const { data: transaction, error: txError } = await supabase\r\n                .from('transactions')\r\n                .insert({\r\n                    user_id: userId,\r\n                    type: 'deposit',\r\n                    status: 'pending',\r\n                    from_asset: selectedAsset.id, // Now using valid UUID\r\n                    to_asset: selectedAsset.id, // Now using valid UUID\r\n                    amount: amount,\r\n                    fee: amount * 0.01,\r\n                    fee_percentage: 1,\r\n                    wallet_address: sourceWallet,\r\n                    network: selectedNetwork,\r\n                    screenshot_url: publicUrl\r\n                })\r\n                .select()\r\n                .single()\r\n\r\n            if (txError) throw txError\r\n\r\n            // Create notification with user ID\r\n            await supabase\r\n                .from('notifications')\r\n                .insert({\r\n                    user_id: userId,\r\n                    title: 'Deposit Initiated',\r\n                    message: `Your deposit of ${amount} ${selectedAsset.symbol} is being processed`,\r\n                    type: 'deposit'\r\n                })\r\n\r\n            // Show success modal using the Modal class\r\n            const successModal = new Modal({\r\n                title: 'Deposit Initiated',\r\n                content: `\r\n                <div class=\"space-y-4\">\r\n                    <div class=\"text-6xl text-green-500\">\r\n                        <i class=\"fas fa-check-circle\"></i>\r\n                    </div>\r\n                    <p>Your deposit has been initiated successfully</p>\r\n                    <p class=\"text-sm text-gray-400\">Your balance will be updated within 24 hours</p>\r\n                </div>\r\n            `,\r\n                actions: [{\r\n                    text: 'Go to Dashboard',\r\n                    primary: true,\r\n                    onClick: () => {\r\n                        successModal.hide();\r\n                        loadPage('dashboard')\r\n                    }\r\n                }]\r\n            })\r\n            successModal.show()\r\n\r\n        } catch (error) {\r\n            toastify({\r\n                text: error.message || \"Failed to process deposit\",\r\n                icon: \"fas fa-times\",\r\n                background: \"bg-red-500\"\r\n            })\r\n        } finally {\r\n            spinner.stop()\r\n        }\r\n    }\r\n\r\n    // Attach global handlers\r\n    window.handleAssetSelect = handleAssetSelect\r\n    window.handleNetworkSelect = handleNetworkSelect\r\n    window.handleScreenshot = handleScreenshot\r\n    window.processDeposit = processDeposit\r\n\r\n    function pageEvents() {\r\n        navEvents()\r\n    }\r\n\r\n    return {\r\n        html: /* html */`\r\n            ${navbar}\r\n            <main class=\"main-scroll-view pb-36 lg:pb-0\">\r\n                <div class=\"max-w-3xl mx-auto p-4 md:p-8 space-y-8\">\r\n                    <h1 class=\"text-2xl font-bold text-white\">Deposit Crypto</h1>\r\n                    \r\n                    <!-- Asset Selection -->\r\n                    <div class=\"space-y-4\">\r\n                        <label class=\"block text-sm font-medium text-gray-400\">Select Asset</label>\r\n                        <select class=\"w-full p-4 bg-brand-black/50 border border-brand-primary/20 rounded-xl text-white\r\n                                     focus:border-brand-primary focus:ring-1 focus:ring-brand-primary transition-all duration-300\"\r\n                                onchange=\"window.handleAssetSelect(event)\">\r\n                            <option value=\"\" disabled selected>Select Asset</option>\r\n                            ${DEMO_ASSETS.map(asset => `\r\n                                <option value=\"${asset.id}\">${asset.name} (${asset.symbol})</option>\r\n                            `).join('')}\r\n                        </select>\r\n                    </div>\r\n\r\n                    <!-- Network Selection -->\r\n                    <div id=\"networkSelect\" class=\"space-y-4 opacity-0 transition-opacity duration-300\"></div>\r\n\r\n                    <!-- Address Display -->\r\n                    <div id=\"addressDisplay\" class=\"opacity-0 transition-opacity duration-300\"></div>\r\n\r\n                    <!-- Deposit Form -->\r\n                    <form id=\"depositForm\" class=\"space-y-6 opacity-0 transition-opacity duration-300\"\r\n                          onsubmit=\"window.processDeposit(event)\">\r\n                        <div class=\"space-y-4\">\r\n                            <label class=\"block text-sm font-medium text-gray-400\">Amount</label>\r\n                            <input type=\"number\" \r\n                                   name=\"amount\"\r\n                                   step=\"any\"\r\n                                   required\r\n                                   class=\"w-full p-4 bg-brand-black/50 border border-brand-primary/20 rounded-xl text-white\r\n                                          focus:border-brand-primary focus:ring-1 focus:ring-brand-primary\"\r\n                                   placeholder=\"Enter amount\">\r\n                        </div>\r\n\r\n                        <div class=\"space-y-4\">\r\n                            <label class=\"block text-sm font-medium text-gray-400\">Your Wallet Address</label>\r\n                            <input type=\"text\" \r\n                                   name=\"sourceWallet\"\r\n                                   required\r\n                                   class=\"w-full p-4 bg-brand-black/50 border border-brand-primary/20 rounded-xl text-white\r\n                                          focus:border-brand-primary focus:ring-1 focus:ring-brand-primary\"\r\n                                   placeholder=\"Enter your wallet address\">\r\n                        </div>\r\n\r\n                        <div class=\"space-y-4\">\r\n                            <label class=\"block text-sm font-medium text-gray-400\">Payment Screenshot</label>\r\n                            <input type=\"file\" \r\n                                   accept=\"image/*\"\r\n                                   required\r\n                                   class=\"w-full p-4 bg-brand-black/50 border border-brand-primary/20 rounded-xl text-white\r\n                                          focus:border-brand-primary focus:ring-1 focus:ring-brand-primary\"\r\n                                   onchange=\"window.handleScreenshot(event)\">\r\n                            <img id=\"screenshotPreview\" class=\"hidden max-w-full h-auto rounded-xl\" alt=\"Screenshot preview\">\r\n                        </div>\r\n\r\n                        <button type=\"submit\"\r\n                                class=\"w-full p-4 bg-brand-primary text-white rounded-xl hover:bg-brand-primary/90\r\n                                       transition-colors duration-300 flex items-center justify-center gap-2\">\r\n                            <i class=\"fas fa-arrow-right\"></i>\r\n                            Proceed with Deposit\r\n                        </button>\r\n                    </form>\r\n                </div>\r\n            </main>\r\n        `,\r\n        pageEvents\r\n    }\r\n}\r\n\r\nexport default deposit"],"names":["DEMO_ASSETS","BTC","ETH","SOL","deposit","auth","reset","trackPageVisit","navbar","navEvents","Navbar","selectedAsset","selectedNetwork","screenshot","copyToClipboard","text","toastify","handleAssetSelect","e","assetId","a","networkSelect","addressDisplay","depositForm","handleNetworkSelect","address","handleScreenshot","file","maxSize","processDeposit","session","sessionError","supabase","userId","assetExists","assetError","form","amount","sourceWallet","resolve","Modal","close","pin","spinner","filePath","imageData","imageError","publicUrlData","publicUrl","transaction","txError","successModal","loadPage","error","pageEvents","asset"],"mappings":"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"}