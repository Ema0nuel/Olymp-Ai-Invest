{"version":3,"file":"trade-C5wSJfSO.js","sources":["../../src/script/views/user/trade.js"],"sourcesContent":["import auth from '../../utils/auth'\r\nimport reset from '../../utils/reset'\r\nimport Navbar from './components/Navbar'\r\nimport supabase from '../../utils/supabaseClients'\r\nimport Modal from '../../components/Modal'\r\nimport toastify from '../../components/toastify'\r\nimport spinner from '../../utils/spinner'\r\nimport { handleTradeSession } from './components/handleTrade'\r\nimport { loadPage } from '../../routes/router'\r\nimport { trackPageVisit } from '../../utils/analtics'\r\n\r\nlet isInitialized = false\r\nlet tradingSession = null\r\n\r\n// At the top of file, add TradingView widget script\r\nconst loadTradingViewScript = () => {\r\n    return new Promise((resolve) => {\r\n        const script = document.createElement('script')\r\n        script.type = 'text/javascript'\r\n        script.src = 'https://s3.tradingview.com/external-embedding/embed-widget-advanced-chart.js'\r\n        script.async = true\r\n        script.onload = () => resolve()\r\n        document.head.appendChild(script)\r\n    })\r\n}\r\n\r\nconst trade = async () => {\r\n    spinner.start()\r\n    try {\r\n        const authCheck = await auth.check('trade')\r\n        if (!authCheck) return { html: '', pageEvents: () => { } }\r\n\r\n        reset('Olymp AI | Trade')\r\n        await trackPageVisit()\r\n        const { html: navbar, pageEvents: navEvents } = Navbar()\r\n\r\n        // State management\r\n        const state = {\r\n            userAssets: [],\r\n            userBalance: 0,\r\n            isProcessing: false,\r\n            userId: null\r\n        }\r\n\r\n        async function initializeData() {\r\n            try {\r\n                spinner.start()\r\n\r\n                // Get user session\r\n                const { data: { user } } = await supabase.auth.getUser()\r\n                if (!user) throw new Error('Authentication required')\r\n\r\n                state.userId = user.id\r\n\r\n                // Fetch trading account and assets\r\n                const [accountResult, assetsResult] = await Promise.all([\r\n                    supabase\r\n                        .from('trading_accounts')\r\n                        .select('balance')\r\n                        .eq('user_id', user.id)\r\n                        .eq('account_type', 'live')\r\n                        .single(),\r\n\r\n                    supabase\r\n                        .from('user_assets')\r\n                        .select(`\r\n                        id,\r\n                        balance,\r\n                        assets:asset_id (\r\n                            id,\r\n                            symbol,\r\n                            name,\r\n                            logo_url\r\n                        )\r\n                    `)\r\n                        .eq('user_id', user.id)\r\n                ])\r\n\r\n                if (accountResult.error) throw accountResult.error\r\n                if (assetsResult.error) throw assetsResult.error\r\n\r\n                // Update state and localStorage\r\n                state.userBalance = accountResult.data?.balance || 0\r\n                localStorage.setItem('userBalance', state.userBalance.toString())\r\n\r\n                state.userAssets = assetsResult.data || []\r\n\r\n                // Check for active session\r\n                const savedSession = localStorage.getItem('activeTradeSession')\r\n                if (savedSession) {\r\n                    tradingSession = JSON.parse(savedSession)\r\n                    handleTradeSession.restoreSession(tradingSession)\r\n                    renderActiveSession()\r\n                } else {\r\n                    renderTradeForm()\r\n                }\r\n\r\n            } catch (error) {\r\n                console.error('Initialization error:', error)\r\n                toastify({\r\n                    text: 'Failed to load trading data',\r\n                    background: 'bg-red-500'\r\n                })\r\n            } finally {\r\n                spinner.stop()\r\n            }\r\n        }\r\n\r\n        function renderTradeForm() {\r\n            const container = document.getElementById('tradePanel')\r\n            if (!container) return\r\n\r\n            container.innerHTML = /* html */`\r\n            <div class=\"h-full p-6 space-y-6\">\r\n                <div class=\"flex items-center justify-between\">\r\n                    <h2 class=\"text-2xl font-bold text-white\">Start Trading</h2>\r\n                    <div class=\"text-right\">\r\n                        <div class=\"text-sm text-gray-400\">Available Balance</div>\r\n                        <div class=\"text-xl font-bold text-white\">$${state.userBalance.toFixed(2)}</div>\r\n                    </div>\r\n                </div>\r\n\r\n                <form id=\"tradeForm\" class=\"space-y-6\">\r\n                    <div class=\"space-y-2\">\r\n                        <label class=\"text-sm text-gray-400\">Select Asset</label>\r\n                        <select id=\"tradeAsset\" required\r\n                                class=\"w-full p-4 bg-brand-black/50 border border-brand-primary/20 rounded-xl text-white\">\r\n                            <option value=\"USD\">Trade with USD Balance ($${state.userBalance.toFixed(2)})</option>\r\n                            ${state.userAssets.map(a => /* html */`\r\n                                        <option value=\"${a.assets.id}\" \r\n                                                data-symbol=\"${a.assets.symbol}\"\r\n                                                data-balance=\"${a.balance}\">\r\n                                            ${a.assets.symbol} - Balance: ${a.balance.toFixed(8)}\r\n                                        </option>\r\n                                    `).join('')}\r\n                        </select>\r\n                    </div>\r\n\r\n                    <div class=\"space-y-2\">\r\n                        <label class=\"text-sm text-gray-400\">Trade Amount</label>\r\n                        <div class=\"relative\">\r\n                            <input type=\"number\" id=\"tradeAmount\" required\r\n                                   min=\"1\" step=\"0.00000001\"\r\n                                   class=\"w-full p-4 bg-brand-black/50 border border-brand-primary/20 rounded-xl text-white pr-20\"\r\n                                   placeholder=\"Enter amount\">\r\n                            <button type=\"button\" onclick=\"window.setMaxAmount()\"\r\n                                    class=\"absolute right-2 top-1/2 -translate-y-1/2 px-3 py-1 text-xs\r\n                                           bg-brand-primary/20 text-brand-primary rounded-lg hover:bg-brand-primary/30\">\r\n                                MAX\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div class=\"space-y-2\">\r\n                        <label class=\"text-sm text-gray-400\">Session Duration</label>\r\n                        <select id=\"tradeDuration\" required\r\n                                class=\"w-full p-4 bg-brand-black/50 border border-brand-primary/20 rounded-xl text-white\">\r\n                            <option value=\"300\">5 Minutes</option>\r\n                            <option value=\"600\">10 Minutes</option>\r\n                            <option value=\"900\">15 Minutes</option>\r\n                            <option value=\"1200\">20 Minutes</option>\r\n                            <option value=\"1800\">30 Minutes</option>\r\n                            <option value=\"2700\">45 Minutes</option>\r\n                            <option value=\"3600\">1 Hour</option>\r\n                        </select>\r\n                    </div>\r\n\r\n                    <button type=\"submit\" \r\n                            class=\"w-full p-4 bg-brand-primary text-white rounded-xl\r\n                                   hover:bg-brand-primary/90 transition-colors\">\r\n                        <i class=\"fas fa-play-circle mr-2\"></i>\r\n                        Start Trading Session\r\n                    </button>\r\n                </form>\r\n            </div>\r\n        `\r\n\r\n            // Add form submit handler\r\n            document.getElementById('tradeForm')?.addEventListener('submit', handleTradeSubmit)\r\n\r\n            // Initialize TradingView for default symbol\r\n            handleTradeSession.initializeTradingView()\r\n\r\n            // Update chart on asset change\r\n            document.getElementById('tradeAsset')?.addEventListener('change', (e) => {\r\n                const symbol = e.target.selectedOptions[0].dataset.symbol\r\n                if (symbol && symbol !== 'USD') {\r\n                    handleTradeSession.initializeTradingView(symbol)\r\n                }\r\n            })\r\n        }\r\n\r\n        function renderActiveSession() {\r\n            const container = document.getElementById('tradePanel')\r\n            if (!container) return\r\n\r\n            container.innerHTML = /* html */`\r\n            <div class=\"h-full p-6 space-y-6\">\r\n                <h2 class=\"text-2xl font-bold text-white\">Active Trading Session</h2>\r\n                \r\n                <!-- Live Trade Info -->\r\n                <div id=\"tradeInfo\" class=\"space-y-4\"></div>\r\n\r\n                <!-- Take Profit / Stop Loss Controls -->\r\n                <div class=\"space-y-4\">\r\n                    <div class=\"flex gap-4\">\r\n                        <input type=\"number\" id=\"takeProfitAmount\"\r\n                               class=\"flex-1 p-4 bg-brand-black/50 border border-brand-primary/20 rounded-xl text-white\"\r\n                               placeholder=\"Take Profit Amount\">\r\n                        <button onclick=\"window.setTakeProfitTarget()\"\r\n                                class=\"px-6 py-4 bg-green-500/20 text-green-500 rounded-xl hover:bg-green-500/30\">\r\n                            <i class=\"fas fa-check mr-2\"></i>Set TP\r\n                        </button>\r\n                    </div>\r\n                    <div class=\"flex gap-4\">\r\n                        <input type=\"number\" id=\"stopLossAmount\"\r\n                               class=\"flex-1 p-4 bg-brand-black/50 border border-brand-primary/20 rounded-xl text-white\"\r\n                               placeholder=\"Stop Loss Amount\">\r\n                        <button onclick=\"window.setStopLossTarget()\"\r\n                                class=\"px-6 py-4 bg-red-500/20 text-red-500 rounded-xl hover:bg-red-500/30\">\r\n                            <i class=\"fas fa-shield-alt mr-2\"></i>Set SL\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n\r\n                <!-- Action Buttons -->\r\n                <div class=\"grid grid-cols-2 gap-4\">\r\n                    <button onclick=\"window.endTrade()\"\r\n                            class=\"p-4 bg-red-500/20 text-red-500 rounded-xl hover:bg-red-500/30\">\r\n                        <i class=\"fas fa-stop-circle mr-2\"></i>End Session\r\n                    </button>\r\n                    <button onclick=\"window.takeProfitNow()\"\r\n                            class=\"p-4 bg-green-500/20 text-green-500 rounded-xl hover:bg-green-500/30\">\r\n                        <i class=\"fas fa-check-circle mr-2\"></i>Take Profit\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        `\r\n\r\n            handleTradeSession.updateUI()\r\n        }\r\n\r\n        async function verifyTradingPin() {\r\n            return new Promise((resolve) => {\r\n                const modal = new Modal({\r\n                    title: 'Verify Trading PIN',\r\n                    content: /* html */`\r\n                    <div class=\"space-y-4 text-center\">\r\n                        <i class=\"fas fa-lock text-4xl text-brand-primary\"></i>\r\n                        <p class=\"mt-2 text-gray-400\">Enter your PIN to start trading</p>\r\n                        <input type=\"password\" id=\"tradePin\"\r\n                               class=\"w-full p-4 bg-brand-black/50 border border-brand-primary/20 rounded-xl text-white text-center\"\r\n                               placeholder=\"Enter 6-digit PIN\" maxlength=\"6\" pattern=\"[0-9]*\">\r\n                    </div>\r\n                `,\r\n                    actions: [{\r\n                        text: 'Confirm',\r\n                        primary: true,\r\n                        onClick: async (close) => {\r\n                            try {\r\n                                const pin = document.getElementById('tradePin').value\r\n                                if (!pin || pin.length !== 6) {\r\n                                    throw new Error('Invalid PIN format')\r\n                                }\r\n\r\n                                // Verify PIN against database\r\n                                const { data: profile } = await supabase\r\n                                    .from('profiles')\r\n                                    .select('pin')\r\n                                    .eq('id', state.userId)\r\n                                    .single()\r\n\r\n                                if (!profile?.pin || profile.pin !== pin) {\r\n                                    throw new Error('Invalid PIN')\r\n                                }\r\n\r\n                                close()\r\n                                resolve(true)\r\n\r\n                            } catch (error) {\r\n                                toastify({\r\n                                    text: error.message,\r\n                                    background: 'bg-red-500'\r\n                                })\r\n                            }\r\n                        }\r\n                    }]\r\n                })\r\n                modal.show()\r\n            })\r\n        }\r\n\r\n        // Global window handlers\r\n        window.setMaxAmount = () => {\r\n            const assetSelect = document.getElementById('tradeAsset')\r\n            const amountInput = document.getElementById('tradeAmount')\r\n            if (!assetSelect || !amountInput) return\r\n\r\n            const selectedAssetId = assetSelect.value\r\n            const maxAmount = selectedAssetId === 'USD'\r\n                ? state.userBalance\r\n                : state.userAssets.find(a => a.assets.id === selectedAssetId)?.balance || 0\r\n\r\n            amountInput.value = maxAmount.toString()\r\n        }\r\n\r\n        window.handleTradeSubmit = async (e) => {\r\n            e.preventDefault()\r\n            if (state.isProcessing) return\r\n\r\n            try {\r\n                state.isProcessing = true\r\n                spinner.start()\r\n\r\n                const assetSelect = document.getElementById('tradeAsset')\r\n                const selectedOption = assetSelect.options[assetSelect.selectedIndex]\r\n                const assetId = assetSelect.value\r\n                const amount = parseFloat(document.getElementById('tradeAmount').value)\r\n                const duration = parseInt(document.getElementById('tradeDuration').value)\r\n\r\n                // Get the asset symbol and determine if using main balance\r\n                const isFromBalance = assetId === 'USD'\r\n                const symbol = selectedOption.dataset.symbol || 'BTCUSDT'\r\n                const tradeAsset = isFromBalance ? 'USD' : selectedOption.dataset.symbol\r\n\r\n                spinner.stop()\r\n                if (!assetId || !amount || !duration) {\r\n                    throw new Error('Please fill all fields')\r\n                }\r\n\r\n                // Check correct balance based on selected asset\r\n                const availableBalance = isFromBalance\r\n                    ? state.userBalance\r\n                    : state.userAssets.find(a => a.assets.id === assetId)?.balance || 0\r\n\r\n                if (amount > availableBalance) {\r\n                    throw new Error(`Insufficient ${tradeAsset} balance`)\r\n                }\r\n\r\n                // Verify PIN before starting trade\r\n                const verified = await verifyTradingPin()\r\n                if (!verified) {\r\n                    throw new Error('PIN verification failed')\r\n                }\r\n\r\n                // Initialize trading session with correct asset info\r\n                tradingSession = await handleTradeSession.initializeSession({\r\n                    amount,\r\n                    duration,\r\n                    symbol,\r\n                    tradeAsset, // Pass the correct asset type\r\n                    isFromBalance\r\n                })\r\n\r\n                renderActiveSession()\r\n\r\n            } catch (error) {\r\n                console.error('Trade error:', error)\r\n                toastify({\r\n                    text: error.message || 'Failed to start trade',\r\n                    background: 'bg-red-500'\r\n                })\r\n            } finally {\r\n                state.isProcessing = false\r\n                spinner.stop()\r\n            }\r\n        }\r\n\r\n        window.setTakeProfitTarget = () => {\r\n            const amount = parseFloat(document.getElementById('takeProfitAmount').value)\r\n            if (!amount || isNaN(amount)) {\r\n                toastify({\r\n                    text: 'Please enter a valid take profit amount',\r\n                    background: 'bg-red-500'\r\n                })\r\n                return\r\n            }\r\n            handleTradeSession.setTakeProfit(amount)\r\n        }\r\n\r\n        window.setStopLossTarget = () => {\r\n            const amount = parseFloat(document.getElementById('stopLossAmount').value)\r\n            if (!amount || isNaN(amount)) {\r\n                toastify({\r\n                    text: 'Please enter a valid stop loss amount',\r\n                    background: 'bg-red-500'\r\n                })\r\n                return\r\n            }\r\n            handleTradeSession.setStopLoss(amount)\r\n        }\r\n\r\n        window.endTrade = async () => {\r\n            if (!tradingSession) return\r\n\r\n            try {\r\n                spinner.start()\r\n                await handleTradeSession.endSession()\r\n                await loadPage('trade')\r\n            } catch (error) {\r\n                console.error('End trade error:', error)\r\n                toastify({\r\n                    text: 'Failed to end session',\r\n                    background: 'bg-red-500'\r\n                })\r\n            } finally {\r\n                spinner.stop()\r\n            }\r\n        }\r\n\r\n        window.takeProfitNow = async () => {\r\n            if (!tradingSession || tradingSession.currentProfit <= 0) {\r\n                toastify({\r\n                    text: 'No profit to take',\r\n                    background: 'bg-red-500'\r\n                })\r\n                return\r\n            }\r\n\r\n            try {\r\n                spinner.start()\r\n                await handleTradeSession.endSession('take_profit')\r\n                await loadPage('trade')\r\n            } catch (error) {\r\n                console.error('Take profit error:', error)\r\n                toastify({\r\n                    text: 'Failed to take profit',\r\n                    background: 'bg-red-500'\r\n                })\r\n            } finally {\r\n                spinner.stop()\r\n            }\r\n        }\r\n\r\n        return {\r\n            html: /* html */`\r\n            ${navbar}\r\n            <main class=\"main-scroll-view flex flex-col lg:flex-row h-full\">\r\n                <!-- TradingView Chart -->\r\n                <div class=\"w-full lg:w-2/3 h-[50vh] lg:h-full overflow-y-auto\">\r\n                    <div id=\"tradingview_widget\" class=\"w-full h-full\"></div>\r\n                </div>\r\n\r\n                <!-- Trading Panel -->\r\n                <div class=\"w-full lg:w-1/3 h-[55vh] lg:h-full overflow-y-auto pb-10 lg:pb-0\">\r\n                    <div id=\"tradePanel\"></div>\r\n                </div>\r\n            </main>\r\n        `,\r\n            pageEvents: async () => {\r\n                try {\r\n                    // Load TradingView script first\r\n                    await loadTradingViewScript()\r\n\r\n                    // Initialize nav events\r\n                    await navEvents()\r\n\r\n                    // Delay initialization slightly to ensure DOM is ready\r\n                    setTimeout(async () => {\r\n                        try {\r\n                            await initializeData()\r\n\r\n                            // Handle visibility changes\r\n                            document.addEventListener('visibilitychange', () => {\r\n                                if (tradingSession) {\r\n                                    handleTradeSession.handleVisibilityChange(document.hidden)\r\n                                }\r\n                            })\r\n\r\n                            // Request notification permission\r\n                            if (Notification.permission === 'default') {\r\n                                await Notification.requestPermission()\r\n                            }\r\n                        } catch (error) {\r\n                            console.error('Initialization error:', error)\r\n                            toastify({\r\n                                text: 'Failed to load trading data',\r\n                                background: 'bg-red-500'\r\n                            })\r\n                        } finally {\r\n                            if (spinner && spinner.stop) {\r\n                                spinner.stop()\r\n                            }\r\n                        }\r\n                    }, 100)\r\n                } catch (error) {\r\n                    console.error('Page initialization error:', error)\r\n                    toastify({\r\n                        text: 'Failed to initialize page',\r\n                        background: 'bg-red-500'\r\n                    })\r\n                    if (spinner && spinner.stop) {\r\n                        spinner.stop()\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    } catch (error) {\r\n        console.error('Trade page error:', error)\r\n        spinner.stop()\r\n        return {\r\n            html: `<div class=\"text-red-500\">Error loading trade page</div>`,\r\n            pageEvents: () => { }\r\n        }\r\n    }\r\n}\r\n\r\nexport default trade"],"names":["tradingSession","loadTradingViewScript","resolve","script","trade","spinner","renderTradeForm","container","state","a","handleTradeSession","e","symbol","renderActiveSession","auth","reset","trackPageVisit","navbar","navEvents","Navbar","initializeData","user","supabase","accountResult","assetsResult","savedSession","error","toastify","verifyTradingPin","Modal","close","pin","profile","assetSelect","amountInput","selectedAssetId","maxAmount","selectedOption","assetId","amount","duration","isFromBalance","tradeAsset","availableBalance","loadPage"],"mappings":"4dAYA,IAAIA,EAAiB,KAGrB,MAAMC,EAAwB,IACnB,IAAI,QAASC,GAAY,CAC5B,MAAMC,EAAS,SAAS,cAAc,QAAQ,EAC9CA,EAAO,KAAO,kBACdA,EAAO,IAAM,+EACbA,EAAO,MAAQ,GACfA,EAAO,OAAS,IAAMD,EAAO,EAC7B,SAAS,KAAK,YAAYC,CAAM,CACpC,CAAC,EAGCC,EAAQ,SAAY,CACtBC,EAAQ,MAAK,EACb,GAAI,CAgFA,IAASC,EAAT,UAA2B,CACvB,MAAMC,EAAY,SAAS,eAAe,YAAY,EACjDA,IAELA,EAAU,UAAsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qEAMyBC,EAAM,YAAY,QAAQ,CAAC,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2EAStBA,EAAM,YAAY,QAAQ,CAAC,CAAC;AAAA,8BACzEA,EAAM,WAAW,IAAIC,GAAe;AAAA,yDACTA,EAAE,OAAO,EAAE;AAAA,+DACLA,EAAE,OAAO,MAAM;AAAA,gEACdA,EAAE,OAAO;AAAA,8CAC3BA,EAAE,OAAO,MAAM,eAAeA,EAAE,QAAQ,QAAQ,CAAC,CAAC;AAAA;AAAA,qCAE3D,EAAE,KAAK,EAAE,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UA4CnC,SAAS,eAAe,WAAW,GAAG,iBAAiB,SAAU,iBAAiB,EAGlFC,EAAmB,sBAAqB,EAGxC,SAAS,eAAe,YAAY,GAAG,iBAAiB,SAAWC,GAAM,CACrE,MAAMC,EAASD,EAAE,OAAO,gBAAgB,CAAC,EAAE,QAAQ,OAC/CC,GAAUA,IAAW,OACrBF,EAAmB,sBAAsBE,CAAM,CAEvD,CAAC,EACL,EAESC,EAAT,UAA+B,CAC3B,MAAMN,EAAY,SAAS,eAAe,YAAY,EACjDA,IAELA,EAAU,UAAsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UA2ChCG,EAAmB,SAAQ,EAC/B,EAlNA,GAAI,CADc,MAAMI,EAAK,MAAM,OAAO,EAC1B,MAAO,CAAE,KAAM,GAAI,WAAY,IAAM,CAAE,CAAC,EAExDC,EAAM,kBAAkB,EACxB,MAAMC,EAAc,EACpB,KAAM,CAAE,KAAMC,EAAQ,WAAYC,CAAS,EAAKC,EAAM,EAGhDX,EAAQ,CACV,WAAY,CAAA,EACZ,YAAa,EACb,aAAc,GACd,OAAQ,IACpB,EAEQ,eAAeY,GAAiB,CAC5B,GAAI,CACAf,EAAQ,MAAK,EAGb,KAAM,CAAE,KAAM,CAAE,KAAAgB,CAAI,CAAE,EAAK,MAAMC,EAAS,KAAK,QAAO,EACtD,GAAI,CAACD,EAAM,MAAM,IAAI,MAAM,yBAAyB,EAEpDb,EAAM,OAASa,EAAK,GAGpB,KAAM,CAACE,EAAeC,CAAY,EAAI,MAAM,QAAQ,IAAI,CACpDF,EACK,KAAK,kBAAkB,EACvB,OAAO,SAAS,EAChB,GAAG,UAAWD,EAAK,EAAE,EACrB,GAAG,eAAgB,MAAM,EACzB,OAAM,EAEXC,EACK,KAAK,aAAa,EAClB,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBASX,EACI,GAAG,UAAWD,EAAK,EAAE,CAC9C,CAAiB,EAED,GAAIE,EAAc,MAAO,MAAMA,EAAc,MAC7C,GAAIC,EAAa,MAAO,MAAMA,EAAa,MAG3ChB,EAAM,YAAce,EAAc,MAAM,SAAW,EACnD,aAAa,QAAQ,cAAef,EAAM,YAAY,SAAQ,CAAE,EAEhEA,EAAM,WAAagB,EAAa,MAAQ,CAAA,EAGxC,MAAMC,EAAe,aAAa,QAAQ,oBAAoB,EAC1DA,GACAzB,EAAiB,KAAK,MAAMyB,CAAY,EACxCf,EAAmB,eAAeV,CAAc,EAChDa,EAAmB,GAEnBP,EAAe,CAGvB,OAASoB,EAAO,CACZ,QAAQ,MAAM,wBAAyBA,CAAK,EAC5CC,EAAS,CACL,KAAM,8BACN,WAAY,YAChC,CAAiB,CACL,QAAC,CACGtB,EAAQ,KAAI,CAChB,CACJ,CAwIA,eAAeuB,GAAmB,CAC9B,OAAO,IAAI,QAAS1B,GAAY,CACd,IAAI2B,EAAM,CACpB,MAAO,qBACP,QAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBASnB,QAAS,CAAC,CACN,KAAM,UACN,QAAS,GACT,QAAS,MAAOC,GAAU,CACtB,GAAI,CACA,MAAMC,EAAM,SAAS,eAAe,UAAU,EAAE,MAChD,GAAI,CAACA,GAAOA,EAAI,SAAW,EACvB,MAAM,IAAI,MAAM,oBAAoB,EAIxC,KAAM,CAAE,KAAMC,CAAO,EAAK,MAAMV,EAC3B,KAAK,UAAU,EACf,OAAO,KAAK,EACZ,GAAG,KAAMd,EAAM,MAAM,EACrB,OAAM,EAEX,GAAI,CAACwB,GAAS,KAAOA,EAAQ,MAAQD,EACjC,MAAM,IAAI,MAAM,aAAa,EAGjCD,EAAK,EACL5B,EAAQ,EAAI,CAEhB,OAASwB,EAAO,CACZC,EAAS,CACL,KAAMD,EAAM,QACZ,WAAY,YAChD,CAAiC,CACL,CACJ,CACxB,CAAqB,CACrB,CAAiB,EACK,KAAI,CACd,CAAC,CACL,CAGA,cAAO,aAAe,IAAM,CACxB,MAAMO,EAAc,SAAS,eAAe,YAAY,EAClDC,EAAc,SAAS,eAAe,aAAa,EACzD,GAAI,CAACD,GAAe,CAACC,EAAa,OAElC,MAAMC,EAAkBF,EAAY,MAC9BG,EAAYD,IAAoB,MAChC3B,EAAM,YACNA,EAAM,WAAW,KAAKC,GAAKA,EAAE,OAAO,KAAO0B,CAAe,GAAG,SAAW,EAE9ED,EAAY,MAAQE,EAAU,SAAQ,CAC1C,EAEA,OAAO,kBAAoB,MAAO,GAAM,CAEpC,GADA,EAAE,eAAc,EACZ,CAAA5B,EAAM,aAEV,GAAI,CACAA,EAAM,aAAe,GACrBH,EAAQ,MAAK,EAEb,MAAM4B,EAAc,SAAS,eAAe,YAAY,EAClDI,EAAiBJ,EAAY,QAAQA,EAAY,aAAa,EAC9DK,EAAUL,EAAY,MACtBM,EAAS,WAAW,SAAS,eAAe,aAAa,EAAE,KAAK,EAChEC,EAAW,SAAS,SAAS,eAAe,eAAe,EAAE,KAAK,EAGlEC,EAAgBH,IAAY,MAC5B1B,EAASyB,EAAe,QAAQ,QAAU,UAC1CK,EAAaD,EAAgB,MAAQJ,EAAe,QAAQ,OAGlE,GADAhC,EAAQ,KAAI,EACR,CAACiC,GAAW,CAACC,GAAU,CAACC,EACxB,MAAM,IAAI,MAAM,wBAAwB,EAI5C,MAAMG,EAAmBF,EACnBjC,EAAM,YACNA,EAAM,WAAW,KAAKC,GAAKA,EAAE,OAAO,KAAO6B,CAAO,GAAG,SAAW,EAEtE,GAAIC,EAASI,EACT,MAAM,IAAI,MAAM,gBAAgBD,CAAU,UAAU,EAKxD,GAAI,CADa,MAAMd,EAAgB,EAEnC,MAAM,IAAI,MAAM,yBAAyB,EAI7C5B,EAAiB,MAAMU,EAAmB,kBAAkB,CACxD,OAAA6B,EACA,SAAAC,EACA,OAAA5B,EACA,WAAA8B,EACA,cAAAD,CACpB,CAAiB,EAED5B,EAAmB,CAEvB,OAASa,EAAO,CACZ,QAAQ,MAAM,eAAgBA,CAAK,EACnCC,EAAS,CACL,KAAMD,EAAM,SAAW,wBACvB,WAAY,YAChC,CAAiB,CACL,QAAC,CACGlB,EAAM,aAAe,GACrBH,EAAQ,KAAI,CAChB,CACJ,EAEA,OAAO,oBAAsB,IAAM,CAC/B,MAAMkC,EAAS,WAAW,SAAS,eAAe,kBAAkB,EAAE,KAAK,EAC3E,GAAI,CAACA,GAAU,MAAMA,CAAM,EAAG,CAC1BZ,EAAS,CACL,KAAM,0CACN,WAAY,YAChC,CAAiB,EACD,MACJ,CACAjB,EAAmB,cAAc6B,CAAM,CAC3C,EAEA,OAAO,kBAAoB,IAAM,CAC7B,MAAMA,EAAS,WAAW,SAAS,eAAe,gBAAgB,EAAE,KAAK,EACzE,GAAI,CAACA,GAAU,MAAMA,CAAM,EAAG,CAC1BZ,EAAS,CACL,KAAM,wCACN,WAAY,YAChC,CAAiB,EACD,MACJ,CACAjB,EAAmB,YAAY6B,CAAM,CACzC,EAEA,OAAO,SAAW,SAAY,CAC1B,GAAKvC,EAEL,GAAI,CACAK,EAAQ,MAAK,EACb,MAAMK,EAAmB,WAAU,EACnC,MAAMkC,EAAS,OAAO,CAC1B,OAASlB,EAAO,CACZ,QAAQ,MAAM,mBAAoBA,CAAK,EACvCC,EAAS,CACL,KAAM,wBACN,WAAY,YAChC,CAAiB,CACL,QAAC,CACGtB,EAAQ,KAAI,CAChB,CACJ,EAEA,OAAO,cAAgB,SAAY,CAC/B,GAAI,CAACL,GAAkBA,EAAe,eAAiB,EAAG,CACtD2B,EAAS,CACL,KAAM,oBACN,WAAY,YAChC,CAAiB,EACD,MACJ,CAEA,GAAI,CACAtB,EAAQ,MAAK,EACb,MAAMK,EAAmB,WAAW,aAAa,EACjD,MAAMkC,EAAS,OAAO,CAC1B,OAASlB,EAAO,CACZ,QAAQ,MAAM,qBAAsBA,CAAK,EACzCC,EAAS,CACL,KAAM,wBACN,WAAY,YAChC,CAAiB,CACL,QAAC,CACGtB,EAAQ,KAAI,CAChB,CACJ,EAEO,CACH,KAAgB;AAAA,cACdY,CAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAaR,WAAY,SAAY,CACpB,GAAI,CAEA,MAAMhB,EAAqB,EAG3B,MAAMiB,EAAS,EAGf,WAAW,SAAY,CACnB,GAAI,CACA,MAAME,EAAc,EAGpB,SAAS,iBAAiB,mBAAoB,IAAM,CAC5CpB,GACAU,EAAmB,uBAAuB,SAAS,MAAM,CAEjE,CAAC,EAGG,aAAa,aAAe,WAC5B,MAAM,aAAa,kBAAiB,CAE5C,OAASgB,EAAO,CACZ,QAAQ,MAAM,wBAAyBA,CAAK,EAC5CC,EAAS,CACL,KAAM,8BACN,WAAY,YAC5C,CAA6B,CACL,QAAC,CACOtB,GAAWA,EAAQ,MACnBA,EAAQ,KAAI,CAEpB,CACJ,EAAG,GAAG,CACV,OAASqB,EAAO,CACZ,QAAQ,MAAM,6BAA8BA,CAAK,EACjDC,EAAS,CACL,KAAM,4BACN,WAAY,YACpC,CAAqB,EACGtB,GAAWA,EAAQ,MACnBA,EAAQ,KAAI,CAEpB,CACJ,CACZ,CACI,OAASqB,EAAO,CACZ,eAAQ,MAAM,oBAAqBA,CAAK,EACxCrB,EAAQ,KAAI,EACL,CACH,KAAM,2DACN,WAAY,IAAM,CAAE,CAChC,CACI,CACJ"}