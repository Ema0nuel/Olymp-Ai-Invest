{"version":3,"file":"assets-BzuULszE.js","sources":["../../src/script/views/admin/assets.js"],"sourcesContent":["import reset, { cleanupAll } from '../../utils/reset';\r\nimport AdminNavbar from './components/Navbar';\r\nimport StyleAdminPage from './components/style';\r\nimport { checkAdminAuth, logoutAdmin } from './functions/adminLoginHandler';\r\nimport { loadPage } from '../../routes/router';\r\nimport { AssetManager } from './components/Management';\r\nimport Modal from '../../components/Modal';\r\nimport toastify from '../../components/toastify';\r\nimport supabase from '../../utils/supabaseClients';\r\nimport BTC from '../../../images/welcome/btc.png';\r\nimport ETH from '../../../images/welcome/eth.png';\r\nimport SOL from '../../../images/welcome/sol.png';\r\nimport BNB from '../../../images/welcome/bnb.png';\r\n\r\nconst assetsIcons = {\r\n    BTC,\r\n    BNB,\r\n    USDT: BNB,\r\n    SOL,\r\n    ETH\r\n};\r\n\r\nconst assets = async () => {\r\n\r\n    reset('Olymp AI Assets Panel Management');\r\n    cleanupAll();\r\n\r\n    async function fetchAssets() {\r\n        try {\r\n            const container = document.getElementById('assetsGrid');\r\n            if (!container) return;\r\n\r\n            const { data: assets, error } = await supabase\r\n                .from('assets')\r\n                .select(`\r\n                    *,\r\n                    user_assets (\r\n                        id, balance,\r\n                        profiles:user_id (\r\n                            full_name, email\r\n                        )\r\n                    )\r\n                `)\r\n                .order('symbol');\r\n\r\n            if (error) throw error;\r\n\r\n            renderAssets(assets || []);\r\n        } catch (error) {\r\n            console.error('Error fetching assets:', error);\r\n            toastify({\r\n                text: 'Failed to load assets',\r\n                icon: 'fas fa-exclamation-circle',\r\n                background: 'bg-red-500/10'\r\n            });\r\n        }\r\n    }\r\n\r\n    function renderAssetLogo(asset) {\r\n        if (assetsIcons[asset.symbol]) {\r\n            return `<img src=\"${assetsIcons[asset.symbol]}\" alt=\"${asset.symbol}\" class=\"w-8 h-8\">`;\r\n        } else if (asset.logo_url) {\r\n            return `<img src=\"${asset.logo_url}\" alt=\"${asset.symbol}\" class=\"w-8 h-8\">`;\r\n        }\r\n        return `<span class=\"text-xl text-brand-primary\">${asset.symbol.charAt(0)}</span>`;\r\n    }\r\n\r\n    function renderAssets(assets) {\r\n        const container = document.getElementById('assetsGrid');\r\n        if (!container) return;\r\n\r\n        container.innerHTML = assets.length ? assets.map(asset => /* html */`\r\n            <div class=\"bg-brand-black/30 rounded-xl p-6\">\r\n                <div class=\"flex items-center justify-between mb-6\">\r\n                    <div class=\"flex items-center gap-4\">\r\n                        <div class=\"w-12 h-12 rounded-full bg-brand-primary/10 flex items-center justify-center overflow-hidden\">\r\n                            ${renderAssetLogo(asset)}\r\n                        </div>\r\n                        <div>\r\n                            <h3 class=\"text-lg font-semibold text-white\">${asset.symbol}</h3>\r\n                            <p class=\"text-gray-400\">${asset.name}</p>\r\n                        </div>\r\n                    </div>\r\n                    <button onclick=\"window.editAsset('${asset.id}')\"\r\n                            class=\"p-2 rounded-lg bg-brand-primary/10 text-brand-primary hover:bg-brand-primary/20 transition-colors\">\r\n                        <i class=\"fas fa-edit\"></i>\r\n                    </button>\r\n                </div>\r\n\r\n                <div class=\"space-y-4\">\r\n                    <div class=\"flex justify-between items-center p-4 bg-brand-black/20 rounded-lg\">\r\n                        <span class=\"text-gray-400\">Total Users</span>\r\n                        <span class=\"text-white font-medium\">${asset.user_assets?.length || 0}</span>\r\n                    </div>\r\n                    <div class=\"flex justify-between items-center p-4 bg-brand-black/20 rounded-lg\">\r\n                        <span class=\"text-gray-400\">Network</span>\r\n                        <span class=\"text-white font-medium\">${Array.isArray(asset.network) ? asset.network.join(', ') : asset.network || 'Not set'}</span>\r\n                    </div>\r\n                    <div class=\"flex justify-between items-center p-4 bg-brand-black/20 rounded-lg\">\r\n                        <span class=\"text-gray-400\">Status</span>\r\n                        <span class=\"px-2 py-1 rounded-full text-sm \r\n                            ${asset.is_active ? 'bg-green-500/10 text-green-500' : 'bg-red-500/10 text-red-500'}\">\r\n                            ${asset.is_active ? 'Active' : 'Inactive'}\r\n                        </span>\r\n                    </div>\r\n                    <div class=\"flex justify-between items-center p-4 bg-brand-black/20 rounded-lg\">\r\n                        <span class=\"text-gray-400\">Wallet Addresses</span>\r\n                        <span class=\"text-white font-medium text-right\">\r\n                            ${typeof asset.wallet_addresses === 'object' ?\r\n                Object.keys(asset.wallet_addresses).length + ' networks' :\r\n                'No addresses'}\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n\r\n                ${asset.user_assets?.length ? /* html */`\r\n                    <div class=\"mt-6\">\r\n                        <h4 class=\"text-sm font-medium text-gray-400 mb-3\">Recent Users</h4>\r\n                        <div class=\"space-y-3\">\r\n                            ${asset.user_assets.slice(0, 3).map(ua => /* html */`\r\n                                <div class=\"flex justify-between items-center p-3 bg-brand-black/20 rounded-lg\">\r\n                                    <div>\r\n                                        <div class=\"text-white\">${ua.profiles?.full_name || 'Unknown User'}</div>\r\n                                        <div class=\"text-sm text-gray-400\">${ua.profiles?.email || 'No email'}</div>\r\n                                    </div>\r\n                                    <div class=\"text-right\">\r\n                                        <div class=\"text-white font-medium\">${ua.balance} ${asset.symbol}</div>\r\n                                    </div>\r\n                                </div>\r\n                            `).join('')}\r\n                        </div>\r\n                    </div>\r\n                ` : ''}\r\n            </div>\r\n        `).join('') : `\r\n            <div class=\"col-span-full text-center text-gray-400 py-8\">\r\n                No assets found\r\n            </div>\r\n        `;\r\n    }\r\n\r\n    function pageEvents() {\r\n        StyleAdminPage();\r\n\r\n        // Handle navigation\r\n        document.querySelectorAll('[data-nav]').forEach(button => {\r\n            button.addEventListener('click', async (e) => {\r\n                e.preventDefault();\r\n                const route = button.dataset.route;\r\n                if (route) {\r\n                    await loadPage(`admin${route.charAt(0).toUpperCase() + route.slice(1)}`);\r\n                }\r\n            });\r\n        });\r\n\r\n        // Handle logout\r\n        document.getElementById('admin-logout')?.addEventListener('click', async () => {\r\n            await logoutAdmin();\r\n        });\r\n\r\n\r\n        // Initialize asset manager\r\n        const spinner = { show: () => { }, hide: () => { } }; // Replace with your spinner\r\n        const assetManager = new AssetManager(supabase, spinner);\r\n\r\n        // Fetch initial assets\r\n        fetchAssets();\r\n\r\n        // Add Asset Handler\r\n        window.addAsset = () => {\r\n            const modal = new Modal({\r\n                title: 'Add New Asset',\r\n                content: /* html */`\r\n                    <form id=\"addAssetForm\" class=\"space-y-6\">\r\n                        <div class=\"form-group\">\r\n                            <label class=\"block text-sm font-medium text-gray-300 mb-2\">Symbol</label>\r\n                            <input type=\"text\" name=\"symbol\" required\r\n                                   class=\"w-full h-12 px-4 rounded-xl bg-brand-black/50 text-white \r\n                                          border border-brand-primary/30 focus:border-brand-primary outline-none\"\r\n                                   placeholder=\"e.g., BTC\">\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                            <label class=\"block text-sm font-medium text-gray-300 mb-2\">Name</label>\r\n                            <input type=\"text\" name=\"name\" required\r\n                                   class=\"w-full h-12 px-4 rounded-xl bg-brand-black/50 text-white \r\n                                          border border-brand-primary/30 focus:border-brand-primary outline-none\"\r\n                                   placeholder=\"e.g., Bitcoin\">\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                            <label class=\"block text-sm font-medium text-gray-300 mb-2\">Network</label>\r\n                            <input type=\"text\" name=\"network\" required\r\n                                class=\"w-full h-12 px-4 rounded-xl bg-brand-black/50 text-white \r\n                                        border border-brand-primary/30 focus:border-brand-primary outline-none\"\r\n                                placeholder=\"e.g., BTC Network, ERC20, BEP20 (comma-separated)\">\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                            <label class=\"block text-sm font-medium text-gray-300 mb-2\">Logo URL</label>\r\n                            <input type=\"url\" name=\"logo_url\"\r\n                                   class=\"w-full h-12 px-4 rounded-xl bg-brand-black/50 text-white \r\n                                          border border-brand-primary/30 focus:border-brand-primary outline-none\"\r\n                                   placeholder=\"https://example.com/logo.png\">\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                            <label class=\"block text-sm font-medium text-gray-300 mb-2\">Wallet Addresses</label>\r\n                            <textarea name=\"wallet_addresses\" required\r\n                                        class=\"w-full px-4 py-3 rounded-xl bg-brand-black/50 text-white \r\n                                                border border-brand-primary/30 focus:border-brand-primary outline-none\"\r\n                                        placeholder=\"Enter wallet addresses (format: NETWORK: ADDRESS)\r\n                                    Example:\r\n                                    BTC: bc1qxy2kgdygjrsqtzq2n0yrf2493p83kkfjhx0wlh\r\n                                    ETH: 0x71C7656EC7ab88b098defB751B7401B5f6d8976F\"></textarea>\r\n                        </div>\r\n                        <button type=\"submit\"\r\n                                class=\"w-full h-12 rounded-xl bg-brand-primary text-white \r\n                                       hover:bg-brand-primary/90 transition-colors\">\r\n                            Add Asset\r\n                        </button>\r\n                    </form>\r\n                `\r\n            });\r\n\r\n            modal.show();\r\n\r\n            // Update the addAsset form submission handler\r\n            document.getElementById('addAssetForm').onsubmit = async (e) => {\r\n                e.preventDefault();\r\n                const formData = new FormData(e.target);\r\n\r\n                // Format network as an array if multiple networks are provided\r\n                const networkInput = formData.get('network');\r\n                const networks = networkInput.split(',')\r\n                    .map(n => n.trim())\r\n                    .filter(n => n); // Remove empty strings\r\n\r\n                // Format wallet addresses as a JSON object\r\n                const walletAddressesInput = formData.get('wallet_addresses');\r\n                const walletAddresses = {};\r\n                walletAddressesInput.split('\\n')\r\n                    .map(line => line.trim())\r\n                    .filter(line => line)\r\n                    .forEach(line => {\r\n                        const [network, address] = line.split(':').map(s => s.trim());\r\n                        if (network && address) {\r\n                            walletAddresses[network] = address;\r\n                        }\r\n                    });\r\n\r\n                try {\r\n                    const { error } = await supabase\r\n                        .from('assets')\r\n                        .insert({\r\n                            symbol: formData.get('symbol').toUpperCase(),\r\n                            name: formData.get('name'),\r\n                            network: networks,\r\n                            logo_url: formData.get('logo_url') || null,\r\n                            is_active: true,\r\n                            wallet_addresses: walletAddresses\r\n                        });\r\n\r\n                    if (error) throw error;\r\n\r\n                    modal.hide();\r\n                    toastify({\r\n                        text: 'Asset added successfully',\r\n                        icon: 'fas fa-check-circle',\r\n                        background: 'bg-green-500/10'\r\n                    });\r\n                    fetchAssets();\r\n                } catch (error) {\r\n                    console.error('Error adding asset:', error);\r\n                    toastify({\r\n                        text: error.message || 'Failed to add asset',\r\n                        icon: 'fas fa-exclamation-circle',\r\n                        background: 'bg-red-500/10'\r\n                    });\r\n                }\r\n            };\r\n        };\r\n\r\n        // Edit Asset Handler\r\n        window.editAsset = async (assetId) => {\r\n            const { data: asset, error } = await supabase\r\n                .from('assets')\r\n                .select('*')\r\n                .eq('id', assetId)\r\n                .single();\r\n\r\n            if (error) {\r\n                toastify({\r\n                    text: 'Failed to load asset details',\r\n                    icon: 'fas fa-exclamation-circle',\r\n                    background: 'bg-red-500/10'\r\n                });\r\n                return;\r\n            }\r\n\r\n            const modal = new Modal({\r\n                title: `Edit ${asset.symbol}`,\r\n                content: /* html */`\r\n                    <form id=\"editAssetForm\" class=\"space-y-6\">\r\n                        <div class=\"form-group\">\r\n                            <label class=\"block text-sm font-medium text-gray-300 mb-2\">Name</label>\r\n                            <input type=\"text\" name=\"name\" value=\"${asset.name}\" required\r\n                                   class=\"w-full h-12 px-4 rounded-xl bg-brand-black/50 text-white \r\n                                          border border-brand-primary/30 focus:border-brand-primary outline-none\">\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                            <label class=\"block text-sm font-medium text-gray-300 mb-2\">Network</label>\r\n                            <input type=\"text\" name=\"network\" value=\"${asset.network || ''}\"\r\n                                   class=\"w-full h-12 px-4 rounded-xl bg-brand-black/50 text-white \r\n                                          border border-brand-primary/30 focus:border-brand-primary outline-none\">\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                            <label class=\"block text-sm font-medium text-gray-300 mb-2\">Logo URL</label>\r\n                            <input type=\"url\" name=\"logo_url\" value=\"${asset.logo_url || ''}\"\r\n                                   class=\"w-full h-12 px-4 rounded-xl bg-brand-black/50 text-white \r\n                                          border border-brand-primary/30 focus:border-brand-primary outline-none\">\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                            <label class=\"flex items-center gap-2\">\r\n                                <input type=\"checkbox\" name=\"is_active\" ${asset.is_active ? 'checked' : ''}\r\n                                       class=\"rounded border-gray-300 text-brand-primary \r\n                                              focus:border-brand-primary focus:ring-brand-primary\">\r\n                                <span class=\"text-gray-300\">Active</span>\r\n                            </label>\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                            <label class=\"block text-sm font-medium text-gray-300 mb-2\">Wallet Addresses</label>\r\n                            <textarea name=\"wallet_addresses\" required\r\n                                        class=\"w-full px-4 py-3 rounded-xl bg-brand-black/50 text-white \r\n                                                border border-brand-primary/30 focus:border-brand-primary outline-none\"\r\n                                        placeholder=\"Enter wallet addresses (format: NETWORK: ADDRESS)\">${typeof asset.wallet_addresses === 'object' ?\r\n                        Object.entries(asset.wallet_addresses)\r\n                            .map(([network, address]) => `${network}: ${address}`)\r\n                            .join('\\n')\r\n                        : ''\r\n                    }</textarea>\r\n                        </div>\r\n                        <button type=\"submit\"\r\n                                class=\"w-full h-12 rounded-xl bg-brand-primary text-white \r\n                                       hover:bg-brand-primary/90 transition-colors\">\r\n                            Update Asset\r\n                        </button>\r\n                    </form>\r\n                `\r\n            });\r\n\r\n            modal.show();\r\n\r\n            // Update the editAsset form submission handler\r\n            document.getElementById('editAssetForm').onsubmit = async (e) => {\r\n                e.preventDefault();\r\n                const formData = new FormData(e.target);\r\n\r\n                // Format network as an array if multiple networks are provided\r\n                const networkInput = formData.get('network');\r\n                const networks = networkInput.split(',')\r\n                    .map(n => n.trim())\r\n                    .filter(n => n); // Remove empty strings\r\n\r\n                // Format wallet addresses as a JSON object\r\n                const walletAddressesInput = formData.get('wallet_addresses');\r\n                const walletAddresses = {};\r\n                walletAddressesInput.split('\\n')\r\n                    .map(line => line.trim())\r\n                    .filter(line => line)\r\n                    .forEach(line => {\r\n                        const [network, address] = line.split(':').map(s => s.trim());\r\n                        if (network && address) {\r\n                            walletAddresses[network] = address;\r\n                        }\r\n                    });\r\n\r\n                try {\r\n                    const { error } = await supabase\r\n                        .from('assets')\r\n                        .update({\r\n                            name: formData.get('name'),\r\n                            network: networks,\r\n                            logo_url: formData.get('logo_url') || null,\r\n                            is_active: formData.get('status') === 'on',\r\n                            wallet_addresses: walletAddresses  // Use status instead of is_active\r\n                        })\r\n                        .eq('id', assetId);\r\n\r\n                    if (error) throw error;\r\n\r\n                    modal.hide();\r\n                    toastify({\r\n                        text: 'Asset updated successfully',\r\n                        icon: 'fas fa-check-circle',\r\n                        background: 'bg-green-500/10'\r\n                    });\r\n                    fetchAssets();\r\n                } catch (error) {\r\n                    console.error('Error updating asset:', error);\r\n                    toastify({\r\n                        text: error.message,\r\n                        icon: 'fas fa-exclamation-circle',\r\n                        background: 'bg-red-500/10'\r\n                    });\r\n                }\r\n            };\r\n        };\r\n    }\r\n\r\n    return {\r\n        html: /* html */`\r\n            <div class=\"flex min-h-screen bg-brand-dark mobile-container\">\r\n                ${AdminNavbar().html}\r\n                <main class=\"flex-1 lg:ml-24 p-4 lg:p-8 pb-24 lg:pb-8\">\r\n                    <div class=\"max-w-7xl mx-auto space-y-6\">\r\n                        <div class=\"flex justify-between items-center\">\r\n                            <h1 class=\"text-2xl font-bold text-white\">Assets</h1>\r\n                            <button onclick=\"window.addAsset()\"\r\n                                    class=\"px-4 py-2 rounded-xl bg-brand-primary text-white \r\n                                           hover:bg-brand-primary/90 transition-colors\">\r\n                                <i class=\"fas fa-plus\"></i>\r\n                                <span class=\"ml-2\">Add Asset</span>\r\n                            </button>\r\n                        </div>\r\n\r\n                        <div class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\" id=\"assetsGrid\">\r\n                            <!-- Assets will be rendered here -->\r\n                        </div>\r\n                    </div>\r\n                </main>\r\n            </div>\r\n        `,\r\n        pageEvents\r\n    };\r\n};\r\n\r\nexport default assets;"],"names":["assetsIcons","BTC","BNB","SOL","ETH","assets","reset","cleanupAll","fetchAssets","error","supabase","renderAssets","toastify","renderAssetLogo","asset","container","ua","pageEvents","StyleAdminPage","button","e","route","loadPage","logoutAdmin","modal","Modal","formData","networks","n","walletAddressesInput","walletAddresses","line","network","address","s","assetId","AdminNavbar"],"mappings":"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"}