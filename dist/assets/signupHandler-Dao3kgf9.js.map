{"version":3,"file":"signupHandler-Dao3kgf9.js","sources":["../../src/script/views/user/functions/signupHandler.js"],"sourcesContent":["\r\nimport supabase, {\r\n    signUpUser,\r\n    verifyOTP,\r\n} from \"../../../utils/supabaseClients\";\r\nimport { loadPage } from \"../../../routes/router\";\r\nimport Modal from \"../../../components/Modal\";\r\nimport Welcome from \"../../../../images/assets/blog/621506e9a1183737fff2f2b8_NFT's & Metaverse.png\";\r\nimport { sendEmail } from \"../../../utils/send-email\";\r\nimport { registerWebAuthn, isWebAuthnAvailable } from \"../../../utils/webAuthnHelper\";\r\n\r\nconst toastify = ({\r\n    text = \"\",\r\n    background = \"bg-brand-blue/10\",\r\n    color = \"text-white\",\r\n    icon = \"\",\r\n    duration = 5000\r\n}) => {\r\n    // Remove any existing toast\r\n    document.querySelectorAll('.Olymp AI-toast').forEach(t => t.remove())\r\n    const toast = document.createElement(\"div\")\r\n    toast.className = `Olymp AI-toast fixed top-8 right-8 z-[999999] px-6 py-4 rounded-xl \r\n        shadow-lg flex items-center gap-3 animate-fade-in-up \r\n        backdrop-blur-md border border-brand-primary/50 \r\n        ${background} ${color} hover:border-brand-primary \r\n        transition-all duration-300`\r\n    toast.innerHTML = `\r\n        <div class=\"absolute inset-0 rounded-xl bg-gradient-to-r \r\n            from-brand-primary/10 to-transparent opacity-50\"></div>\r\n        ${icon ? `<i class=\"${icon} text-2xl relative z-10 text-brand-primary\"></i>` : \"\"}\r\n        <span class=\"font-semibold relative z-10\">${text}</span>\r\n    `\r\n    document.body.appendChild(toast)\r\n    setTimeout(() => {\r\n        toast.classList.add(\"animate-fade-out-down\")\r\n        setTimeout(() => toast.remove(), 500)\r\n    }, duration)\r\n}\r\n\r\n\r\n\r\nexport async function createTradingAccounts(userId) {\r\n    // Show loading toast instead of spinner\r\n    const loadingToast = toastify({\r\n        text: \"Creating your account...\",\r\n        background: \"bg-brand-primary/10\",\r\n        icon: \"fas fa-spinner fa-spin\",\r\n        duration: 0 // Keep showing until manually closed\r\n    });\r\n    try {\r\n\r\n        // Create demo account\r\n        const { error: demoError } = await supabase\r\n            .from(\"trading_accounts\")\r\n            .insert({\r\n                user_id: userId,\r\n                account_type: \"demo\",\r\n                balance: 100.0, // Default demo balance\r\n                leverage: 100,\r\n            });\r\n\r\n        if (demoError) throw demoError;\r\n\r\n        // Create live account\r\n        const { error: liveError } = await supabase\r\n            .from(\"trading_accounts\")\r\n            .insert({\r\n                user_id: userId,\r\n                account_type: \"live\",\r\n                balance: 0.0,\r\n                leverage: 100,\r\n            });\r\n\r\n        if (liveError) throw liveError;\r\n        loadingToast.remove();\r\n        return true;\r\n    } catch (error) {\r\n        loadingToast.remove();\r\n        console.error(\"Error creating trading accounts:\", error);\r\n        return false;\r\n    }\r\n}\r\n\r\nexport async function signupHandler(formData) {\r\n    // Show loading toast instead of spinner\r\n    const loadingToast = toastify({\r\n        text: \"Creating your account...\",\r\n        background: \"bg-brand-primary/10\",\r\n        icon: \"fas fa-spinner fa-spin\",\r\n        duration: 0 // Keep showing until manually closed\r\n    });\r\n\r\n    try {\r\n        // Attempt signup\r\n        const { success, error, otp, user } = await signUpUser(formData);\r\n\r\n        loadingToast.remove(); // Stop spinner before showing any notifications\r\n\r\n        if (!success) {\r\n            toastify({\r\n                text: error,\r\n                icon: \"fas fa-exclamation-circle\",\r\n                background: \"bg-red-800\",\r\n                duration: 3000,\r\n            });\r\n            return false;\r\n        }\r\n\r\n        // Verify we have an OTP before sending email\r\n        if (!otp) {\r\n            console.error('No OTP received from signUpUser');\r\n            toastify({\r\n                text: \"Error generating verification code\",\r\n                icon: \"fas fa-exclamation-circle\",\r\n                background: \"bg-red-800\",\r\n                duration: 3000,\r\n            });\r\n            return false;\r\n        }\r\n\r\n        // Send welcome email with OTP\r\n        try {\r\n            await sendEmail({\r\n                to: formData.email,\r\n                subject: \"Welcome to Olymp AI Invest - Verify Your Email\",\r\n                html: generateWelcomeEmailTemplate(formData.email, otp),\r\n            });\r\n        } catch (emailError) {\r\n            console.error(\"Error sending welcome email:\", emailError);\r\n            // Continue with signup process even if email fails\r\n        }\r\n\r\n        // Create trading accounts\r\n        const accountsCreated = await createTradingAccounts(user.id);\r\n        if (!accountsCreated) {\r\n            toastify({\r\n                text: \"Failed to create trading accounts\",\r\n                icon: \"fas fa-exclamation-circle\",\r\n                background: \"bg-red-800\",\r\n                duration: 3000,\r\n            });\r\n            return false;\r\n        }\r\n\r\n        // Show OTP Modal after small delay to ensure clean UI\r\n        await new Promise((resolve) => setTimeout(resolve, 100));\r\n        const verificationResult = await showOTPModal(formData.email, otp);\r\n\r\n        if (verificationResult.success) {\r\n            let biometricSetupDone = false;\r\n            if (await isWebAuthnAvailable()) {\r\n                biometricSetupDone = await new Promise((resolve) => {\r\n                    const modal = new Modal({\r\n                        title: \"Set Up Biometric Login?\",\r\n                        content: /* html */`\r\n                    <div class=\"space-y-4\">\r\n                        <p class=\"text-gray-400\">\r\n                            Would you like to enable biometric login (Face ID, fingerprint, or passkey) for faster and more secure sign-in?\r\n                            <i class=\"fas fa-fingerprint text-brand-primary/90 ml-1\"></i>\r\n                        </p>\r\n                    </div>\r\n                `,\r\n                        actions: [\r\n                            {\r\n                                text: \"Enable Biometrics\",\r\n                                primary: true,\r\n                                onClick: async (close) => {\r\n                                    close();\r\n                                    const result = await registerWebAuthn(user.id, formData.email);\r\n                                    if (result.success) {\r\n                                        toastify({\r\n                                            text: \"Biometric login enabled!\",\r\n                                            icon: \"fas fa-fingerprint\",\r\n                                            background: \"bg-green-800\"\r\n                                        });\r\n                                        resolve(true);\r\n                                    } else {\r\n                                        toastify({\r\n                                            text: \"Biometric setup failed: \" + result.error,\r\n                                            icon: \"fas fa-exclamation-circle\",\r\n                                            background: \"bg-red-800\"\r\n                                        });\r\n                                        resolve(false);\r\n                                    }\r\n                                }\r\n                            },\r\n                            {\r\n                                text: \"Maybe Later\",\r\n                                onClick: (close) => {\r\n                                    close();\r\n                                    resolve(false);\r\n                                }\r\n                            }\r\n                        ]\r\n                    });\r\n                    modal.show();\r\n                });\r\n            }\r\n\r\n            // Now continue with welcome message and redirect\r\n            await showWelcomeMessage();\r\n\r\n            toastify({\r\n                text: \"Account created successfully! Redirecting...\",\r\n                icon: \"fas fa-check-circle\",\r\n                background: \"bg-green-800\",\r\n                duration: 3000,\r\n            });\r\n\r\n            await new Promise((resolve) => setTimeout(resolve, 2000));\r\n            await loadPage(\"login\");\r\n            return true;\r\n        } else {\r\n            toastify({\r\n                text: verificationResult.error,\r\n                icon: \"fas fa-exclamation-circle\",\r\n                background: \"bg-red-800\",\r\n                duration: 3000,\r\n            });\r\n            return false;\r\n        }\r\n    } catch (error) { // Ensure spinner stops on error\r\n        toastify({\r\n            text: error.message || \"An unexpected error occurred\",\r\n            icon: \"fas fa-exclamation-circle\",\r\n            background: \"bg-red-800\",\r\n            duration: 3000,\r\n        });\r\n        return false;\r\n    }\r\n}\r\n\r\n// Update the showWelcomeMessage function timing\r\nasync function showWelcomeMessage() {\r\n    const modal = new Modal({\r\n        content: /* html */ `\r\n            <div class=\"text-center space-y-6 py-8\">\r\n                <img src=\"${Welcome}\" alt=\"Welcome\" class=\"w-64 mx-auto\">\r\n                <h2 class=\"text-2xl font-bold text-white\">Welcome to Olymp AI Invest!</h2>\r\n                <p class=\"text-gray-400\">Your account has been created successfully.</p>\r\n            </div>\r\n        `,\r\n        showClose: false,\r\n    });\r\n\r\n    modal.show();\r\n    return new Promise((resolve) =>\r\n        setTimeout(() => {\r\n            modal.hide();\r\n            resolve();\r\n        }, 2000)\r\n    ); // Increased to 2 seconds for better visibility\r\n}\r\n\r\n// Update OTP modal to handle loading state\r\nasync function showOTPModal(email, otp) {\r\n    return new Promise((resolve) => {\r\n        const modal = new Modal({\r\n            title: \"Verify Your Email\",\r\n            content: /* html */ `\r\n                <div class=\"space-y-4\">\r\n                    <p class=\"text-gray-400\">\r\n                        We've sent a verification code to <strong>${email}</strong>\r\n                    </p>\r\n                    <input type=\"text\" \r\n                           id=\"otpInput\"\r\n                           class=\"w-full h-12 px-4 rounded-xl bg-brand-black/50 text-white \r\n                                  border border-brand-primary/30 focus:border-brand-primary \r\n                                  outline-none transition-all text-center text-2xl tracking-widest\"\r\n                           maxlength=\"6\"\r\n                           placeholder=\"000000\">\r\n                </div>\r\n            `,\r\n            actions: [\r\n                {\r\n                    text: \"Verify\",\r\n                    primary: true,\r\n                    onClick: async (close) => {\r\n                        const verifyBtn = document.querySelector('[data-action=\"Verify\"]');\r\n                        verifyBtn.disabled = true;\r\n                        verifyBtn.innerHTML =\r\n                            '<i class=\"fas fa-spinner fa-spin mr-2\"></i> Verifying...';\r\n\r\n                        const code = document.getElementById(\"otpInput\").value;\r\n                        const result = await verifyOTP(email, code);\r\n\r\n                        if (result.success) {\r\n                            close();\r\n                            resolve({ success: true });\r\n                        } else {\r\n                            verifyBtn.disabled = false;\r\n                            verifyBtn.innerHTML = \"Verify\";\r\n                            toastify({\r\n                                text: result.error,\r\n                                icon: \"fas fa-exclamation-circle\",\r\n                                background: \"bg-red-800\",\r\n                                duration: 3000,\r\n                            });\r\n                        }\r\n                    },\r\n                },\r\n            ],\r\n        });\r\n\r\n        modal.show();\r\n        // Auto-focus OTP input\r\n        setTimeout(() => document.getElementById(\"otpInput\").focus(), 100);\r\n    });\r\n}\r\n\r\n// Add this function after the imports\r\nexport function generateWelcomeEmailTemplate(userEmail, otpCode) {\r\n    return /* html */ `\r\n        <!DOCTYPE html>\r\n        <html>\r\n        <head>\r\n            <meta charset=\"utf-8\">\r\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n            <title>Welcome to Olymp AI Invest</title>\r\n        </head>\r\n        <body style=\"margin: 0; padding: 0; background-color: #f4f4f4; font-family: Arial, sans-serif;\">\r\n            <table role=\"presentation\" width=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\">\r\n                <tr>\r\n                    <td align=\"center\" style=\"padding: 40px 0;\">\r\n                        <table role=\"presentation\" width=\"600\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\" style=\"background-color: #ffffff; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);\">\r\n                            <!-- Header -->\r\n                            <tr>\r\n                                <td align=\"center\" style=\"padding: 40px 0;\">\r\n                                    <img src=\"https://www.Olymp AI Invest.com/assets/logo-Dw35zzZI.ico\" alt=\"Olymp AI Invest Logo\" width=\"150\" style=\"display: block;\">\r\n                                </td>\r\n                            </tr>\r\n                            \r\n                            <!-- Welcome Message -->\r\n                            <tr>\r\n                                <td style=\"padding: 0 40px;\">\r\n                                    <h1 style=\"color: #333; font-size: 24px; margin: 0 0 20px; text-align: center;\">Welcome to Olymp AI Invest!</h1>\r\n                                    <p style=\"color: #666; font-size: 16px; line-height: 24px; margin: 0 0 20px;\">\r\n                                        Thank you for choosing Olymp AI Invest. We're excited to have you join our trading community!\r\n                                    </p>\r\n                                </td>\r\n                            </tr>\r\n\r\n                            <!-- OTP Section -->\r\n                            <tr>\r\n                                <td style=\"padding: 30px 40px;\">\r\n                                    <table role=\"presentation\" width=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\" style=\"background-color: #f8f9fa; border-radius: 8px; padding: 20px;\">\r\n                                        <tr>\r\n                                            <td align=\"center\">\r\n                                                <p style=\"color: #666; font-size: 16px; margin: 0 0 15px;\">Your verification code is:</p>\r\n                                                <p style=\"background-color: #e9ecef; color: #333; font-size: 32px; font-weight: bold; letter-spacing: 8px; margin: 0; padding: 15px 25px; border-radius: 4px;\">\r\n                                                    ${otpCode}\r\n                                                </p>\r\n                                                <p style=\"color: #999; font-size: 14px; margin: 15px 0 0;\">\r\n                                                    This code will expire in 10 minutes\r\n                                                </p>\r\n                                            </td>\r\n                                        </tr>\r\n                                    </table>\r\n                                </td>\r\n                            </tr>\r\n\r\n                            <!-- Security Notice -->\r\n                            <tr>\r\n                                <td style=\"padding: 0 40px 30px;\">\r\n                                    <p style=\"color: #666; font-size: 14px; line-height: 21px; margin: 0;\">\r\n                                        For security reasons, please do not share this code with anyone. If you didn't request this code, please ignore this email.\r\n                                    </p>\r\n                                </td>\r\n                            </tr>\r\n\r\n                            <!-- Footer -->\r\n                            <tr>\r\n                                <td style=\"background-color: #f8f9fa; padding: 30px 40px; border-bottom-left-radius: 8px; border-bottom-right-radius: 8px;\">\r\n                                    <p style=\"color: #999; font-size: 14px; margin: 0; text-align: center;\">\r\n                                        &copy; ${new Date().getFullYear()} Olymp AI Invest. All rights reserved.<br>\r\n                                        <a href=\"https://Olymp AI Invest.com\" style=\"color: #f1d416; text-decoration: underline;\">Olymp AI Invest</a>\r\n                                    </p>\r\n                                </td>\r\n                            </tr>\r\n                        </table>\r\n                    </td>\r\n                </tr>\r\n            </table>\r\n        </body>\r\n        </html>\r\n    `;\r\n}\r\n\r\nexport async function signInWithGoogle() {\r\n    try {\r\n        const { data, error } = await supabase.auth.signInWithOAuth({\r\n            provider: 'google',\r\n            options: {\r\n                queryParams: {\r\n                    access_type: 'offline',\r\n                    prompt: 'consent',\r\n                },\r\n                skipBrowserRedirect: true\r\n            }\r\n        });\r\n\r\n        if (error) throw error;\r\n\r\n        // Open popup with proper attributes\r\n        const authWindow = window.open(\r\n            data?.url,\r\n            'Olymp AI Google Login',\r\n            'width=500,height=600,left=' +\r\n            (window.screen.width / 2 - 250) +\r\n            ',top=' + (window.screen.height / 2 - 300) +\r\n            ',noopener,noreferrer'\r\n        );\r\n\r\n        // Use broadcast channel for cross-window communication\r\n        const channel = new BroadcastChannel('auth');\r\n\r\n        const checkAuth = setInterval(async () => {\r\n            try {\r\n                const { data: { session } } = await supabase.auth.getSession();\r\n                if (session?.access_token) {\r\n                    clearInterval(checkAuth);\r\n                    channel.postMessage('auth_complete');\r\n                    if (authWindow) {\r\n                        try {\r\n                            authWindow.close();\r\n                        } catch (e) {\r\n                            console.log('Window close blocked - expected');\r\n                        }\r\n                    }\r\n                    channel.close();\r\n                }\r\n            } catch (error) {\r\n                console.error('Auth check error:', error);\r\n            }\r\n        }, 1000);\r\n\r\n        return { success: true };\r\n    } catch (error) {\r\n        console.error('Google sign-in error:', error);\r\n        return { success: false, error };\r\n    }\r\n}\r\n\r\nasync function handleGoogleUser(user) {\r\n    if (!user) return;\r\n\r\n    try {\r\n\r\n        // Create new profile with upsert\r\n        const { error: profileError } = await supabase\r\n            .from('profiles')\r\n            .upsert({\r\n                id: user.id,\r\n                email: user.email,\r\n                full_name: user.user_metadata?.full_name || '',\r\n                avatar_url: user.user_metadata?.avatar_url || '',\r\n                is_verified: true,\r\n                created_at: new Date().toISOString(),\r\n                updated_at: new Date().toISOString()\r\n            }, {\r\n                onConflict: 'id',\r\n                returning: 'minimal'\r\n            });\r\n\r\n        if (profileError) throw profileError;\r\n\r\n        // Create trading accounts without using toast\r\n        try {\r\n            // Create demo account\r\n            await supabase\r\n                .from(\"trading_accounts\")\r\n                .insert({\r\n                    user_id: user.id,\r\n                    account_type: \"demo\",\r\n                    balance: 100.0,\r\n                    leverage: 100,\r\n                });\r\n\r\n            // Create live account\r\n            await supabase\r\n                .from(\"trading_accounts\")\r\n                .insert({\r\n                    user_id: user.id,\r\n                    account_type: \"live\",\r\n                    balance: 0.0,\r\n                    leverage: 100,\r\n                });\r\n\r\n        } catch (accountError) {\r\n            console.error(\"Error creating trading accounts:\", accountError);\r\n        }\r\n\r\n        // Clear any URL fragments\r\n        if (window.location.hash) {\r\n            window.history.pushState('', document.title, window.location.pathname);\r\n        }\r\n\r\n        // Redirect to dashboard\r\n        loadPage('dashboard');\r\n\r\n    } catch (error) {\r\n        console.error('Error handling Google user:', error);\r\n    }\r\n}\r\n\r\n// Update the auth state listener\r\nsupabase.auth.onAuthStateChange(async (event, session) => {\r\n    if (event === 'SIGNED_IN' && session?.user) {\r\n        await handleGoogleUser(session.user);\r\n    }\r\n});\r\n\r\n\r\n// Add this new function\r\nexport async function handleGoogleLogin() {\r\n    try {\r\n        toastify({\r\n            text: \"Connecting to Google...\",\r\n            background: \"bg-brand-primary/10\",\r\n            icon: \"fas fa-spinner fa-spin\"\r\n        });\r\n\r\n        const { data, error } = await supabase.auth.signInWithOAuth({\r\n            provider: 'google',\r\n            options: {\r\n                queryParams: {\r\n                    access_type: 'offline',\r\n                    prompt: 'consent',\r\n                },\r\n                skipBrowserRedirect: true\r\n            }\r\n        });\r\n\r\n        if (error) throw error;\r\n\r\n        // Open popup with proper attributes\r\n        const authWindow = window.open(\r\n            data?.url,\r\n            'Olymp AI Google Login',\r\n            'width=500,height=600,left=' +\r\n            (window.screen.width / 2 - 250) +\r\n            ',top=' + (window.screen.height / 2 - 300) +\r\n            ',noopener,noreferrer'\r\n        );\r\n\r\n        // Check auth state periodically\r\n        const checkAuth = setInterval(async () => {\r\n            try {\r\n                const { data: { session } } = await supabase.auth.getSession();\r\n                if (session?.access_token) {\r\n                    clearInterval(checkAuth);\r\n                    if (authWindow) {\r\n                        try {\r\n                            authWindow.close();\r\n                        } catch (e) {\r\n                            console.log('Window close blocked - expected');\r\n                        }\r\n                    }\r\n\r\n                    // Check if user exists\r\n                    const { data: profile } = await supabase\r\n                        .from('profiles')\r\n                        .select('*')\r\n                        .eq('id', session.user.id)\r\n                        .single();\r\n\r\n                    if (profile) {\r\n                        // Existing user - redirect to dashboard\r\n                        toastify({\r\n                            text: \"Successfully signed in\",\r\n                            background: \"bg-green-500/10\",\r\n                            icon: \"fas fa-check-circle\"\r\n                        });\r\n                        loadPage('dashboard');\r\n                    } else {\r\n                        // New user - need to create profile first\r\n                        toastify({\r\n                            text: \"Please complete registration\",\r\n                            background: \"bg-yellow-500/10\",\r\n                            icon: \"fas fa-exclamation-circle\"\r\n                        });\r\n                        // Redirect to signup with Google data\r\n                        loadPage('signup');\r\n                    }\r\n                }\r\n            } catch (error) {\r\n                console.error('Auth check error:', error);\r\n                toastify({\r\n                    text: \"Login failed\",\r\n                    background: \"bg-red-500/10\",\r\n                    icon: \"fas fa-exclamation-circle\"\r\n                });\r\n            }\r\n        }, 1000);\r\n\r\n        return { success: true };\r\n    } catch (error) {\r\n        console.error('Google login error:', error);\r\n        toastify({\r\n            text: \"Failed to connect with Google\",\r\n            background: \"bg-red-500/10\",\r\n            icon: \"fas fa-exclamation-circle\"\r\n        });\r\n        return { success: false, error };\r\n    }\r\n}"],"names":["toastify","text","background","color","icon","duration","t","toast","createTradingAccounts","userId","loadingToast","demoError","supabase","liveError","error","signupHandler","formData","success","otp","user","signUpUser","sendEmail","generateWelcomeEmailTemplate","emailError","resolve","verificationResult","showOTPModal","biometricSetupDone","isWebAuthnAvailable","Modal","close","result","registerWebAuthn","showWelcomeMessage","loadPage","modal","Welcome","email","verifyBtn","code","verifyOTP","userEmail","otpCode","signInWithGoogle","data","authWindow","channel","checkAuth","session","handleGoogleUser","profileError","accountError","event","handleGoogleLogin","profile"],"mappings":"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"}