{"version":3,"file":"signupHandler-B9S8bEC2.js","sources":["../../src/script/views/user/functions/signupHandler.js"],"sourcesContent":["import supabase from \"../../../utils/supabaseClients\";\r\nimport { loadPage } from \"../../../routes/router\";\r\nimport Modal from \"../../../components/Modal\";\r\nimport Welcome from \"../../../../images/assets/blog/621506e9a1183737fff2f2b8_NFT's & Metaverse.png\";\r\nimport { sendEmail } from \"../../../utils/send-email\";\r\nimport { registerWebAuthn, isWebAuthnAvailable } from \"../../../utils/webAuthnHelper\";\r\n\r\n// Toast notification utility\r\nconst toastify = ({\r\n    text = \"\",\r\n    background = \"bg-brand-blue/10\",\r\n    color = \"text-white\",\r\n    icon = \"\",\r\n    duration = 5000\r\n}) => {\r\n    // Remove existing toasts\r\n    document.querySelectorAll('.olymp-toast').forEach(t => t.remove());\r\n\r\n    const toast = document.createElement(\"div\");\r\n    toast.className = `olymp-toast fixed top-8 right-8 z-[999999] px-6 py-4 rounded-xl \r\n        shadow-lg flex items-center gap-3 animate-fade-in-up \r\n        backdrop-blur-md border border-brand-primary/50 \r\n        ${background} ${color} hover:border-brand-primary \r\n        transition-all duration-300`;\r\n\r\n    toast.innerHTML = `\r\n        <div class=\"absolute inset-0 rounded-xl bg-gradient-to-r \r\n            from-brand-primary/10 to-transparent opacity-50\"></div>\r\n        ${icon ? `<i class=\"${icon} text-2xl relative z-10 text-brand-primary\"></i>` : \"\"}\r\n        <span class=\"font-semibold relative z-10\">${text}</span>\r\n    `;\r\n\r\n    document.body.appendChild(toast);\r\n\r\n    if (duration > 0) {\r\n        setTimeout(() => {\r\n            toast.classList.add(\"animate-fade-out-down\");\r\n            setTimeout(() => toast.remove(), 500);\r\n        }, duration);\r\n    }\r\n\r\n    return toast;\r\n};\r\n\r\n// Trading accounts creation with conflict prevention\r\nexport async function createTradingAccounts(userId) {\r\n    try {\r\n        const { data: existingAccounts, error: checkError } = await supabase\r\n            .from(\"trading_accounts\")\r\n            .select(\"account_type\")\r\n            .eq(\"user_id\", userId);\r\n\r\n        if (checkError) throw checkError;\r\n\r\n        const existingTypes = new Set(existingAccounts?.map(acc => acc.account_type) || []);\r\n        const accountsToCreate = [];\r\n\r\n        if (!existingTypes.has(\"demo\")) {\r\n            accountsToCreate.push({\r\n                user_id: userId,\r\n                account_type: \"demo\",\r\n                balance: 100.0,\r\n                leverage: 100,\r\n                created_at: new Date().toISOString(),\r\n                updated_at: new Date().toISOString()\r\n            });\r\n        }\r\n\r\n        if (!existingTypes.has(\"live\")) {\r\n            accountsToCreate.push({\r\n                user_id: userId,\r\n                account_type: \"live\",\r\n                balance: 0.0,\r\n                leverage: 100,\r\n                created_at: new Date().toISOString(),\r\n                updated_at: new Date().toISOString()\r\n            });\r\n        }\r\n\r\n        if (accountsToCreate.length > 0) {\r\n            const { error: insertError } = await supabase\r\n                .from(\"trading_accounts\")\r\n                .insert(accountsToCreate);\r\n\r\n            if (insertError) throw insertError;\r\n        }\r\n\r\n        return true;\r\n    } catch (error) {\r\n        console.error(\"Trading accounts error:\", error);\r\n        return false;\r\n    }\r\n}\r\n\r\n// Email/Password signup handler\r\nexport async function signupHandler(formData) {\r\n    const loadingToast = toastify({\r\n        text: \"Creating your account...\",\r\n        background: \"bg-brand-primary/10\",\r\n        icon: \"fas fa-spinner fa-spin\",\r\n        duration: 0\r\n    });\r\n\r\n    try {\r\n        // Check existing user\r\n        const { data: existingUser } = await supabase\r\n            .from(\"profiles\")\r\n            .select(\"auth_type\")\r\n            .eq(\"email\", formData.email)\r\n            .single();\r\n\r\n        if (existingUser) {\r\n            loadingToast.remove();\r\n            toastify({\r\n                text: existingUser.auth_type === 'google'\r\n                    ? \"This email is registered with Google. Please use Google Sign In.\"\r\n                    : \"This email is already registered. Please sign in instead.\",\r\n                icon: \"fas fa-exclamation-circle\",\r\n                background: \"bg-red-800\",\r\n                duration: 3000\r\n            });\r\n            return false;\r\n        }\r\n\r\n        // Sign up new user\r\n        const { data: authData, error: authError } = await supabase.auth.signUp({\r\n            email: formData.email,\r\n            password: formData.password\r\n        });\r\n\r\n        if (authError) throw authError;\r\n\r\n        // Generate OTP\r\n        const otp = Math.floor(100000 + Math.random() * 900000).toString();\r\n        const otpExpiry = new Date(Date.now() + 10 * 60 * 1000); // 10 minutes\r\n\r\n        // Create profile\r\n        const { error: profileError } = await supabase\r\n            .from(\"profiles\")\r\n            .insert({\r\n                id: authData.user.id,\r\n                email: formData.email,\r\n                full_name: formData.fullName || '',\r\n                phone_number: formData.phone || '',\r\n                country: formData.country || '',\r\n                auth_type: 'email',\r\n                verification_code: otp,\r\n                verification_expiry: otpExpiry,\r\n                created_at: new Date().toISOString(),\r\n                updated_at: new Date().toISOString()\r\n            });\r\n\r\n        if (profileError) throw profileError;\r\n\r\n        // Send welcome email with OTP\r\n        try {\r\n            await sendEmail({\r\n                to: formData.email,\r\n                subject: \"Welcome to Olymp AI Invest - Verify Your Email\",\r\n                html: generateWelcomeEmailTemplate(formData.email, otp)\r\n            });\r\n        } catch (emailError) {\r\n            console.error(\"Email error:\", emailError);\r\n        }\r\n\r\n        loadingToast.remove();\r\n\r\n        // Show OTP verification modal\r\n        const verificationResult = await showOTPModal(formData.email, otp);\r\n\r\n        if (!verificationResult.success) {\r\n            toastify({\r\n                text: verificationResult.error || \"Verification failed\",\r\n                icon: \"fas fa-exclamation-circle\",\r\n                background: \"bg-red-800\",\r\n                duration: 3000\r\n            });\r\n            return false;\r\n        }\r\n\r\n        // Create trading accounts\r\n        const accountsCreated = await createTradingAccounts(authData.user.id);\r\n        if (!accountsCreated) {\r\n            toastify({\r\n                text: \"Warning: Trading accounts setup incomplete\",\r\n                icon: \"fas fa-exclamation-triangle\",\r\n                background: \"bg-yellow-800\",\r\n                duration: 3000\r\n            });\r\n        }\r\n\r\n        // Optional: Biometric setup\r\n        if (await isWebAuthnAvailable()) {\r\n            const biometricSetup = await new Promise(resolve => {\r\n                const modal = new Modal({\r\n                    title: \"Enable Biometric Login\",\r\n                    content: `\r\n                        <div class=\"space-y-4\">\r\n                            <p class=\"text-gray-400\">\r\n                                Would you like to enable biometric login for faster and more secure access?\r\n                            </p>\r\n                        </div>\r\n                    `,\r\n                    actions: [\r\n                        {\r\n                            text: \"Enable\",\r\n                            primary: true,\r\n                            onClick: async (close) => {\r\n                                close();\r\n                                const result = await registerWebAuthn(authData.user.id, formData.email);\r\n                                resolve(result.success);\r\n                            }\r\n                        },\r\n                        {\r\n                            text: \"Skip\",\r\n                            onClick: (close) => {\r\n                                close();\r\n                                resolve(false);\r\n                            }\r\n                        }\r\n                    ]\r\n                });\r\n                modal.show();\r\n            });\r\n\r\n            if (biometricSetup) {\r\n                toastify({\r\n                    text: \"Biometric login enabled\",\r\n                    icon: \"fas fa-fingerprint\",\r\n                    background: \"bg-green-800\",\r\n                    duration: 3000\r\n                });\r\n            }\r\n        }\r\n\r\n        // Show welcome message\r\n        await showWelcomeMessage();\r\n\r\n        toastify({\r\n            text: \"Account created successfully! Redirecting...\",\r\n            icon: \"fas fa-check-circle\",\r\n            background: \"bg-green-800\",\r\n            duration: 3000\r\n        });\r\n\r\n        await new Promise(resolve => setTimeout(resolve, 2000));\r\n        await loadPage(\"login\");\r\n        return true;\r\n\r\n    } catch (error) {\r\n        loadingToast.remove();\r\n        toastify({\r\n            text: error.message || \"Failed to create account\",\r\n            icon: \"fas fa-exclamation-circle\",\r\n            background: \"bg-red-800\",\r\n            duration: 3000\r\n        });\r\n        return false;\r\n    }\r\n}\r\n\r\n// Google sign-in handler\r\nexport async function handleGoogleLogin() {\r\n    const loadingToast = toastify({\r\n        text: \"Connecting to Google...\",\r\n        background: \"bg-brand-primary/10\",\r\n        icon: \"fas fa-spinner fa-spin\",\r\n        duration: 0\r\n    });\r\n\r\n    try {\r\n        const { data, error } = await supabase.auth.signInWithOAuth({\r\n            provider: 'google',\r\n            options: {\r\n                queryParams: {\r\n                    access_type: 'offline',\r\n                    prompt: 'consent'\r\n                },\r\n                skipBrowserRedirect: true\r\n            }\r\n        });\r\n\r\n        if (error) throw error;\r\n\r\n        const authWindow = window.open(\r\n            data?.url,\r\n            'Olymp AI Google Login',\r\n            `width=500,height=600,left=${window.screen.width / 2 - 250},top=${window.screen.height / 2 - 300}`\r\n        );\r\n\r\n        const checkAuth = setInterval(async () => {\r\n            try {\r\n                const { data: { session } } = await supabase.auth.getSession();\r\n                if (session?.access_token) {\r\n                    clearInterval(checkAuth);\r\n                    loadingToast.remove();\r\n                    if (authWindow) authWindow.close();\r\n\r\n                    // Check/create profile\r\n                    const { data: profile } = await supabase\r\n                        .from('profiles')\r\n                        .select('*')\r\n                        .eq('id', session.user.id)\r\n                        .single();\r\n\r\n                    if (!profile) {\r\n                        // Create new profile\r\n                        const { error: profileError } = await supabase\r\n                            .from('profiles')\r\n                            .insert({\r\n                                id: session.user.id,\r\n                                email: session.user.email,\r\n                                full_name: session.user.user_metadata?.full_name || '',\r\n                                auth_type: 'google',\r\n                                is_verified: true,\r\n                                created_at: new Date().toISOString(),\r\n                                updated_at: new Date().toISOString()\r\n                            });\r\n\r\n                        if (profileError) throw profileError;\r\n\r\n                        // Create trading accounts for new user\r\n                        await createTradingAccounts(session.user.id);\r\n                        await showWelcomeMessage();\r\n                    }\r\n\r\n                    toastify({\r\n                        text: profile ? \"Signed in successfully!\" : \"Account created successfully!\",\r\n                        icon: \"fas fa-check-circle\",\r\n                        background: \"bg-green-800\",\r\n                        duration: 3000\r\n                    });\r\n\r\n                    await loadPage('dashboard');\r\n                }\r\n            } catch (error) {\r\n                clearInterval(checkAuth);\r\n                loadingToast.remove();\r\n                console.error('Auth error:', error);\r\n                toastify({\r\n                    text: error.message || \"Authentication failed\",\r\n                    icon: \"fas fa-exclamation-circle\",\r\n                    background: \"bg-red-800\",\r\n                    duration: 3000\r\n                });\r\n            }\r\n        }, 1000);\r\n\r\n    } catch (error) {\r\n        loadingToast.remove();\r\n        toastify({\r\n            text: error.message || \"Failed to connect with Google\",\r\n            icon: \"fas fa-exclamation-circle\",\r\n            background: \"bg-red-800\",\r\n            duration: 3000\r\n        });\r\n    }\r\n}\r\n\r\n// Welcome message modal\r\nasync function showWelcomeMessage() {\r\n    return new Promise(resolve => {\r\n        const modal = new Modal({\r\n            content: `\r\n                <div class=\"text-center space-y-6 py-8\">\r\n                    <img src=\"${Welcome}\" alt=\"Welcome\" class=\"w-64 mx-auto\">\r\n                    <h2 class=\"text-2xl font-bold text-white\">Welcome to Olymp AI Invest!</h2>\r\n                    <p class=\"text-gray-400\">Your account has been created successfully.</p>\r\n                </div>\r\n            `,\r\n            showClose: false\r\n        });\r\n        modal.show();\r\n        setTimeout(() => {\r\n            modal.hide();\r\n            resolve();\r\n        }, 2000);\r\n    });\r\n}\r\n\r\n// OTP verification modal\r\nasync function showOTPModal(email, otp) {\r\n    return new Promise(resolve => {\r\n        const modal = new Modal({\r\n            title: \"Verify Your Email\",\r\n            content: `\r\n                <div class=\"space-y-4\">\r\n                    <p class=\"text-gray-400\">\r\n                        Please enter the verification code sent to <strong>${email}</strong>\r\n                    </p>\r\n                    <input type=\"text\" \r\n                           id=\"otpInput\"\r\n                           class=\"w-full h-12 px-4 rounded-xl bg-brand-black/50 text-white \r\n                                  border border-brand-primary/30 focus:border-brand-primary \r\n                                  outline-none transition-all text-center text-2xl tracking-widest\"\r\n                           maxlength=\"6\"\r\n                           placeholder=\"000000\">\r\n                </div>\r\n            `,\r\n            actions: [\r\n                {\r\n                    text: \"Verify\",\r\n                    primary: true,\r\n                    onClick: async (close) => {\r\n                        const verifyBtn = document.querySelector('[data-action=\"Verify\"]');\r\n                        verifyBtn.disabled = true;\r\n                        verifyBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin mr-2\"></i> Verifying...';\r\n\r\n                        const code = document.getElementById(\"otpInput\").value;\r\n\r\n                        // Verify OTP\r\n                        const { data: profile, error } = await supabase\r\n                            .from('profiles')\r\n                            .select('verification_code, verification_expiry')\r\n                            .eq('email', email)\r\n                            .single();\r\n\r\n                        if (error || !profile) {\r\n                            verifyBtn.disabled = false;\r\n                            verifyBtn.innerHTML = \"Verify\";\r\n                            resolve({ success: false, error: \"Verification failed\" });\r\n                            return;\r\n                        }\r\n\r\n                        if (profile.verification_code !== code) {\r\n                            verifyBtn.disabled = false;\r\n                            verifyBtn.innerHTML = \"Verify\";\r\n                            resolve({ success: false, error: \"Invalid verification code\" });\r\n                            return;\r\n                        }\r\n\r\n                        if (new Date(profile.verification_expiry) < new Date()) {\r\n                            verifyBtn.disabled = false;\r\n                            verifyBtn.innerHTML = \"Verify\";\r\n                            resolve({ success: false, error: \"Verification code expired\" });\r\n                            return;\r\n                        }\r\n\r\n                        // Mark as verified\r\n                        const { error: updateError } = await supabase\r\n                            .from('profiles')\r\n                            .update({\r\n                                is_verified: true,\r\n                                verification_code: null,\r\n                                verification_expiry: null,\r\n                                updated_at: new Date().toISOString()\r\n                            })\r\n                            .eq('email', email);\r\n\r\n                        if (updateError) {\r\n                            verifyBtn.disabled = false;\r\n                            verifyBtn.innerHTML = \"Verify\";\r\n                            resolve({ success: false, error: \"Failed to verify account\" });\r\n                            return;\r\n                        }\r\n\r\n                        close();\r\n                        resolve({ success: true });\r\n                    }\r\n                }\r\n            ]\r\n        });\r\n\r\n        modal.show();\r\n        setTimeout(() => document.getElementById(\"otpInput\")?.focus(), 100);\r\n    });\r\n}\r\n\r\n// Generate welcome email template\r\nexport function generateWelcomeEmailTemplate(email, otp) {\r\n    return /* html */`\r\n        <!DOCTYPE html>\r\n        <html>\r\n        <head>\r\n            <meta charset=\"utf-8\">\r\n            <title>Welcome to Olymp AI Invest</title>\r\n        </head>\r\n        <body style=\"margin:0;padding:40px 0;background:#f4f4f4;font-family:Arial,sans-serif;\">\r\n            <table width=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\">\r\n                <tr>\r\n                    <td align=\"center\">\r\n                        <table width=\"600\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\" \r\n                               style=\"background:#ffffff;border-radius:8px;box-shadow:0 2px 4px rgba(0,0,0,0.1);\">\r\n                            <tr>\r\n                                <td align=\"center\" style=\"padding:40px 0;\">\r\n                                    <img src=\"https://olymp-ai-invest.com/logo.png\" alt=\"Logo\" width=\"150\">\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td style=\"padding:0 40px;\">\r\n                                    <h1 style=\"color:#333;font-size:24px;margin:0 0 20px;text-align:center;\">\r\n                                        Welcome to Olymp AI Invest!\r\n                                    </h1>\r\n                                    <p style=\"color:#666;font-size:16px;line-height:24px;margin:0 0 20px;\">\r\n                                        Thank you for choosing Olymp AI Invest. Please verify your email to get started.\r\n                                    </p>\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td style=\"padding:30px 40px;\">\r\n                                    <table width=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\" \r\n                                           style=\"background:#f8f9fa;border-radius:8px;padding:20px;\">\r\n                                        <tr>\r\n                                            <td align=\"center\">\r\n                                                <p style=\"color:#666;font-size:16px;margin:0 0 15px;\">\r\n                                                    Your verification code is:\r\n                                                </p>\r\n                                                <p style=\"background:#e9ecef;color:#333;font-size:32px;font-weight:bold;\r\n                                                          letter-spacing:8px;margin:0;padding:15px 25px;border-radius:4px;\">\r\n                                                    ${otp}\r\n                                                </p>\r\n                                                <p style=\"color:#999;font-size:14px;margin:15px 0 0;\">\r\n                                                    This code will expire in 10 minutes\r\n                                                </p>\r\n                                            </td>\r\n                                        </tr>\r\n                                    </table>\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td style=\"padding:0 40px 30px;\">\r\n                                    <p style=\"color:#666;font-size:14px;line-height:21px;margin:0;\">\r\n                                        If you didn't request this code, please ignore this email.\r\n                                    </p>\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td style=\"background:#f8f9fa;padding:30px 40px;border-radius:0 0 8px 8px;\">\r\n                                    <p style=\"color:#999;font-size:14px;margin:0;text-align:center;\">\r\n                                        &copy; ${new Date().getFullYear()} Olymp AI Invest. All rights reserved.\r\n                                    </p>\r\n                                </td>\r\n                            </tr>\r\n                        </table>\r\n                    </td>\r\n                </tr>\r\n            </table>\r\n        </body>\r\n        </html>\r\n    `;\r\n}"],"names":["toastify","text","background","color","icon","duration","t","toast","createTradingAccounts","userId","existingAccounts","checkError","supabase","existingTypes","acc","accountsToCreate","insertError","error","signupHandler","formData","loadingToast","existingUser","authData","authError","otp","otpExpiry","profileError","sendEmail","generateWelcomeEmailTemplate","emailError","verificationResult","showOTPModal","isWebAuthnAvailable","resolve","Modal","close","result","registerWebAuthn","showWelcomeMessage","loadPage","handleGoogleLogin","data","authWindow","checkAuth","session","profile","modal","Welcome","email","verifyBtn","code","updateError"],"mappings":"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"}