{"version":3,"file":"charts-DtvOp9yy.js","sources":["../../src/script/views/user/charts.js"],"sourcesContent":["import auth from \"../../utils/auth\";\r\nimport reset from \"../../utils/reset\";\r\nimport Navbar from \"./components/Navbar\";\r\nimport { trackPageVisit } from '../../utils/analtics'\r\n\r\n\r\nlet isInitialized = false;\r\nlet loadAttempts = 0;\r\nconst MAX_ATTEMPTS = 3;\r\n\r\nconst widgetConfigs = {\r\n    advancedChart: {\r\n        autosize: true,\r\n        symbol: \"BITSTAMP:BTCUSD\",\r\n        interval: \"D\",\r\n        timezone: \"Etc/UTC\",\r\n        theme: \"dark\",\r\n        style: \"1\",\r\n        locale: \"en\",\r\n        enable_publishing: false,\r\n        hide_side_toolbar: false,\r\n        allow_symbol_change: true,\r\n        studies: [\"MACD@tv-basicstudies\"],\r\n        container_id: \"tradingview_chart\",\r\n        backgroundColor: \"#1E222D\",\r\n        onReady: () => console.log(\"Main chart loaded successfully\"),\r\n    },\r\n    technicalAnalysis: {\r\n        symbol: \"BITSTAMP:BTCUSD\",\r\n        showIntervalTabs: true,\r\n        interval: \"1D\",\r\n        width: \"100%\",\r\n        height: \"400\",\r\n        timezone: \"Etc/UTC\",\r\n        theme: \"dark\",\r\n        style: \"1\",\r\n        locale: \"en\",\r\n        backgroundColor: \"#1E222D\",\r\n        displayMode: \"single\",\r\n    },\r\n    cryptoMarket: {\r\n        dataSource: \"Crypto\",\r\n        width: \"100%\",\r\n        height: \"400\",\r\n        defaultColumn: \"overview\",\r\n        screener_type: \"crypto_mkt\",\r\n        displayCurrency: \"USD\",\r\n        colorTheme: \"dark\",\r\n        locale: \"en\",\r\n        backgroundColor: \"#1E222D\",\r\n    },\r\n};\r\n\r\nfunction loadScript(src) {\r\n    return new Promise((resolve, reject) => {\r\n        // Check if script already exists\r\n        if (document.querySelector(`script[src=\"${src}\"]`)) {\r\n            resolve();\r\n            return;\r\n        }\r\n\r\n        const script = document.createElement(\"script\");\r\n        script.src = src;\r\n        script.async = true;\r\n        script.onload = resolve;\r\n        script.onerror = () => reject(new Error(`Failed to load: ${src}`));\r\n        document.head.appendChild(script);\r\n    });\r\n}\r\n\r\nasync function createWidget(containerId, config, type) {\r\n    await new Promise((resolve) => {\r\n        const checkContainer = () => {\r\n            const container = document.getElementById(containerId);\r\n            if (container) {\r\n                resolve(container);\r\n            } else {\r\n                setTimeout(checkContainer, 100);\r\n            }\r\n        };\r\n        checkContainer();\r\n    });\r\n\r\n    const container = document.getElementById(containerId);\r\n    container.innerHTML = \"\"; // Clear previous content\r\n\r\n    try {\r\n        if (type === \"main\") {\r\n            await loadScript(\"https://s3.tradingview.com/tv.js\");\r\n            // Ensure TradingView is loaded\r\n            await new Promise((resolve) => {\r\n                const checkTradingView = () => {\r\n                    if (window.TradingView) {\r\n                        resolve();\r\n                    } else {\r\n                        setTimeout(checkTradingView, 100);\r\n                    }\r\n                };\r\n                checkTradingView();\r\n            });\r\n\r\n            new TradingView.widget({\r\n                ...config,\r\n                container_id: containerId,\r\n            });\r\n        } else {\r\n            const script = document.createElement(\"script\");\r\n            script.type = \"text/javascript\";\r\n            script.async = true;\r\n            script.src = `https://s3.tradingview.com/external-embedding/embed-widget-${type}.js`;\r\n            script.innerHTML = JSON.stringify(config);\r\n            container.appendChild(script);\r\n        }\r\n    } catch (error) {\r\n        console.error(`Failed to create widget ${containerId}:`, error);\r\n    }\r\n}\r\n\r\nasync function initializeWidgets() {\r\n    if (isInitialized || loadAttempts >= MAX_ATTEMPTS) return;\r\n\r\n    try {\r\n        loadAttempts++;\r\n\r\n        // Wait for DOM\r\n        if (document.readyState !== \"complete\") {\r\n            await new Promise((resolve) => window.addEventListener(\"load\", resolve));\r\n        }\r\n\r\n        // Initialize widgets\r\n        await createWidget(\r\n            \"tradingview_chart\",\r\n            widgetConfigs.advancedChart,\r\n            \"main\"\r\n        );\r\n\r\n        const otherWidgets = [\r\n            {\r\n                type: \"technical-analysis\",\r\n                id: \"technical_analysis_container\",\r\n                config: widgetConfigs.technicalAnalysis,\r\n            },\r\n            {\r\n                type: \"screener\",\r\n                id: \"crypto_market_container\",\r\n                config: widgetConfigs.cryptoMarket,\r\n            },\r\n        ];\r\n\r\n        await Promise.all(\r\n            otherWidgets.map((w) => createWidget(w.id, w.config, w.type))\r\n        );\r\n\r\n        isInitialized = true;\r\n        console.log(\"All widgets initialized successfully\");\r\n    } catch (error) {\r\n        console.error(\"Widget initialization failed:\", error);\r\n        if (loadAttempts < MAX_ATTEMPTS) {\r\n            setTimeout(() => initializeWidgets(), 1000);\r\n        }\r\n    }\r\n}\r\n\r\nconst charts = async () => {\r\n    const authCheck = await auth.check(\"charts\");\r\n    if (!authCheck) return { html: \"\", pageEvents: () => { } };\r\n\r\n    reset(\"Olymp AI | Charts\");\r\n    await trackPageVisit()\r\n    const { html: navbar, pageEvents: navEvents } = Navbar();\r\n\r\n    return {\r\n        html: /* html */ `\r\n            ${navbar}\r\n            <main class=\"main-scroll-view flex-1\">\r\n                <!-- Header Section -->\r\n                <div class=\"p-4\">\r\n                    <h1 class=\"text-2xl font-bold text-white\">Market Charts</h1>\r\n                </div>\r\n\r\n                <div class=\"h-full p-4 space-y-6\">\r\n                    <!-- Main Chart -->\r\n                    <section class=\"rounded-lg overflow-hidden bg-[#1E222D]\">\r\n                        <div id=\"tradingview_chart\" class=\"h-[600px] w-full\"></div>\r\n                    </section>\r\n\r\n                    <!-- Technical Analysis & Market Data -->\r\n                    <div class=\"grid grid-cols-1 lg:grid-cols-2 gap-6 pb-16 lg:pb-0\">\r\n                        <section class=\"rounded-lg overflow-hidden p-4\">\r\n                            <h2 class=\"text-xl font-semibold text-white mb-4\">Technical Analysis</h2>\r\n                            <div id=\"technical_analysis_container\" class=\"h-[400px]\"></div>\r\n                        </section>\r\n                        \r\n                        <section class=\"rounded-lg overflow-hidden p-4\">\r\n                            <h2 class=\"text-xl font-semibold text-white mb-4\">Crypto Market</h2>\r\n                            <div id=\"crypto_market_container\" class=\"h-[400px]\"></div>\r\n                        </section>\r\n                    </div>\r\n                </div>\r\n            </main>\r\n        `,\r\n        pageEvents: async () => {\r\n            navEvents();\r\n            if (!isInitialized) {\r\n                await initializeWidgets();\r\n            }\r\n        },\r\n    };\r\n};\r\n\r\nexport default charts;\r\n"],"names":["isInitialized","loadAttempts","MAX_ATTEMPTS","widgetConfigs","loadScript","src","resolve","reject","script","createWidget","containerId","config","type","checkContainer","container","checkTradingView","error","initializeWidgets","otherWidgets","w","charts","auth","reset","trackPageVisit","navbar","navEvents","Navbar"],"mappings":"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"}