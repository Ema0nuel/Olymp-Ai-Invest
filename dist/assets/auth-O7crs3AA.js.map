{"version":3,"file":"auth-O7crs3AA.js","sources":["../../src/script/views/user/components/handleTrade.js","../../src/script/views/user/functions/loginHandler.js","../../src/script/utils/auth.js"],"sourcesContent":["import toastify from \"../../../components/toastify\";\r\nimport supabase from \"../../../utils/supabaseClients\";\r\nimport LOGO from \"../../../../images/logo.jpg\";\r\n\r\nconst CRYPTO_IDS = [\r\n  \"bitcoin\",\r\n  \"ethereum\",\r\n  \"tether\",\r\n  \"binancecoin\",\r\n  \"ripple\",\r\n  \"cardano\",\r\n  \"solana\",\r\n  \"polkadot\",\r\n  \"dogecoin\",\r\n  \"avalanche-2\",\r\n  \"chainlink\",\r\n  \"uniswap\",\r\n  \"litecoin\",\r\n  \"matic-network\",\r\n  \"stellar\",\r\n].join(\",\");\r\n\r\nclass TradeSessionHandler {\r\n  constructor() {\r\n    this.session = null;\r\n    this.chart = null;\r\n    this.priceInterval = null;\r\n    this.timerInterval = null;\r\n    this.socket = null;\r\n    this.lastPrice = 100;\r\n    this.candleData = [];\r\n    this.isPaused = false;\r\n    this.pauseStart = null;\r\n    this.totalPausedTime = 0;\r\n    this.tvWidget = null;\r\n    this.tradeAsset = null;\r\n\r\n    // Trading parameters\r\n    this.leverage = 100;\r\n    this.volatility = 0.002;\r\n    this.trendStrength = 0.3;\r\n    this.trend = 0;\r\n    this.downwardBias = 0.48;\r\n    this.priceHistory = [];\r\n    this.marketPrices = {};\r\n    this.priceUpdateInterval = null;\r\n    this.marketSentiment = 0;\r\n    this.volatilityFactor = 1.5;\r\n    this.slippageFee = 0.05;\r\n  }\r\n\r\n  initializeTradingView(symbol = \"BTCUSDT\") {\r\n    const container = document.getElementById(\"tradingview_widget\");\r\n    if (!container) return;\r\n\r\n    container.innerHTML = /* html */ `\r\n            <div class=\"tradingview-widget-container\" style=\"height:100%;width:100%\">\r\n                <div class=\"tradingview-widget-container__widget\" style=\"height:calc(100% - 32px);width:100%\"></div>\r\n                <div class=\"tradingview-widget-copyright\">\r\n                    <a href=\"https://www.tradingview.com/\" rel=\"noopener nofollow\" target=\"_blank\">\r\n                        <span class=\"blue-text\">Track all markets on TradingView</span>\r\n                    </a>\r\n                </div>\r\n            </div>\r\n        `;\r\n\r\n    const script = document.createElement(\"script\");\r\n    script.type = \"text/javascript\";\r\n    script.src =\r\n      \"https://s3.tradingview.com/external-embedding/embed-widget-advanced-chart.js\";\r\n    script.async = true;\r\n    script.innerHTML = JSON.stringify({\r\n      autosize: true,\r\n      symbol: `${symbol}`,\r\n      interval: \"1\",\r\n      timezone: \"exchange\",\r\n      theme: \"dark\",\r\n      style: \"1\",\r\n      locale: \"en\",\r\n      enable_publishing: false,\r\n      allow_symbol_change: true,\r\n      calendar: false,\r\n      support_host: \"https://www.tradingview.com\",\r\n      withdateranges: true,\r\n      save_image: false,\r\n      details: true,\r\n      hotlist: true,\r\n      backgroundColor: \"rgba(30, 34, 45, 1)\",\r\n    });\r\n\r\n    container\r\n      .querySelector(\".tradingview-widget-container\")\r\n      .appendChild(script);\r\n  }\r\n\r\n  async initializeSession(sessionData) {\r\n    try {\r\n      const {\r\n        data: { user },\r\n      } = await supabase.auth.getUser();\r\n      if (!user) throw new Error(\"User not authenticated\");\r\n\r\n      let currentBalance;\r\n      let accountId;\r\n      const tradeAmount = parseFloat(sessionData.amount);\r\n\r\n      // Handle USD balance from trading_accounts\r\n      if (sessionData.tradeAsset === \"USD\") {\r\n        const { data: tradingAccount, error: tradingError } = await supabase\r\n          .from(\"trading_accounts\")\r\n          .select(\"*\")\r\n          .eq(\"user_id\", user.id)\r\n          .eq(\"account_type\", \"live\")\r\n          .single();\r\n\r\n        if (tradingError) throw tradingError;\r\n\r\n        currentBalance = parseFloat(tradingAccount?.balance || 0);\r\n        accountId = tradingAccount?.id;\r\n\r\n        // Immediately deduct trade amount from USD balance\r\n        const newBalance = currentBalance - tradeAmount;\r\n        if (newBalance < 0) {\r\n          throw new Error(\r\n            `Insufficient USD balance. Available: ${currentBalance}`\r\n          );\r\n        }\r\n\r\n        const { error: updateError } = await supabase\r\n          .from(\"trading_accounts\")\r\n          .update({ balance: newBalance })\r\n          .eq(\"id\", accountId);\r\n\r\n        if (updateError) throw updateError;\r\n      }\r\n      // Handle other assets from user_assets\r\n      else {\r\n        // First get the asset ID\r\n        const { data: asset, error: assetError } = await supabase\r\n          .from(\"assets\")\r\n          .select(\"id\")\r\n          .eq(\"symbol\", sessionData.tradeAsset)\r\n          .single();\r\n\r\n        if (assetError) {\r\n          throw new Error(`Asset ${sessionData.tradeAsset} not found`);\r\n        }\r\n\r\n        // Then get the user's asset balance\r\n        const { data: userAsset, error: userAssetError } = await supabase\r\n          .from(\"user_assets\")\r\n          .select(\"id, balance\")\r\n          .eq(\"user_id\", user.id)\r\n          .eq(\"asset_id\", asset.id)\r\n          .single();\r\n\r\n        if (userAssetError) {\r\n          throw new Error(`No ${sessionData.tradeAsset} balance found`);\r\n        }\r\n\r\n        currentBalance = parseFloat(userAsset?.balance || 0);\r\n        accountId = userAsset?.id;\r\n\r\n        // Verify balance\r\n        const newBalance = currentBalance - tradeAmount;\r\n        if (newBalance < 0) {\r\n          throw new Error(\r\n            `Insufficient ${sessionData.tradeAsset} balance. Available: ${currentBalance}`\r\n          );\r\n        }\r\n\r\n        // Update balance\r\n        const { error: updateError } = await supabase\r\n          .from(\"user_assets\")\r\n          .update({ balance: newBalance })\r\n          .eq(\"id\", accountId);\r\n\r\n        if (updateError) throw updateError;\r\n      }\r\n\r\n      // Initialize session with correct values\r\n      this.session = {\r\n        ...sessionData,\r\n        startTime: Date.now(),\r\n        currentProfit: 0,\r\n        highestProfit: 0,\r\n        lowestProfit: 0,\r\n        remainingTime: sessionData.duration,\r\n        startPrice: this.lastPrice,\r\n        currentPrice: this.lastPrice,\r\n        takeProfitLevel: null,\r\n        stopLossLevel: null,\r\n        userId: user.id,\r\n        accountId: accountId,\r\n        initialBalance: currentBalance,\r\n        currentBalance: currentBalance - tradeAmount,\r\n        tradeAmount: tradeAmount,\r\n        tradeFee: tradeAmount * 0.1,\r\n        tradeAsset: sessionData.tradeAsset,\r\n      };\r\n\r\n      this.tradeAsset = sessionData.tradeAsset;\r\n\r\n      localStorage.setItem(\r\n        `userBalance_${this.tradeAsset}`,\r\n        (currentBalance - tradeAmount).toString()\r\n      );\r\n      this.saveSessionToStorage();\r\n\r\n      this.initializeTradingView(sessionData.symbol || \"BTCUSDT\");\r\n      this.startPriceSimulation();\r\n      this.startTimer();\r\n\r\n      return this.session;\r\n    } catch (error) {\r\n      console.error(\"Session initialization error:\", error);\r\n      toastify({\r\n        text: error.message || \"Failed to initialize session\",\r\n        background: \"bg-red-500\",\r\n      });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Update calculateProfit method\r\n\r\n  calculateProfit() {\r\n    if (!this.session) return;\r\n\r\n    const tradeAmount = parseFloat(this.session.tradeAmount);\r\n    const startPrice = parseFloat(this.session.startPrice);\r\n    const currentPrice = parseFloat(this.lastPrice);\r\n\r\n    // Calculate percentage change (as decimal)\r\n    const priceChangePercent = (currentPrice - startPrice) / startPrice;\r\n\r\n    // Calculate raw profit with corrected formula:\r\n    // Example for 20% price change:\r\n    // tradeAmount * (priceChangePercent) * leverage\r\n    // $100 * 0.20 * 100 = $2000\r\n    const rawProfit = tradeAmount * priceChangePercent * this.leverage;\r\n\r\n    // Calculate fixed trading fee (10% of trade amount)\r\n    const tradeFee = tradeAmount * 0.1; // $100 * 10% = $10\r\n\r\n    // Store values in session\r\n    this.session.rawProfit = rawProfit;\r\n    this.session.tradeFee = tradeFee;\r\n    this.session.currentProfit = rawProfit; // Raw profit before fees for display\r\n\r\n    // Track profit extremes\r\n    this.session.highestProfit = Math.max(\r\n      this.session.highestProfit || 0,\r\n      rawProfit\r\n    );\r\n    this.session.lowestProfit = Math.min(\r\n      this.session.lowestProfit || 0,\r\n      rawProfit\r\n    );\r\n\r\n    this.saveSessionToStorage();\r\n  }\r\n\r\n  async endSession(reason = \"manual\") {\r\n    if (!this.session) return;\r\n\r\n    try {\r\n      // Cleanup\r\n      if (this.priceInterval) clearInterval(this.priceInterval);\r\n      if (this.timerInterval) clearInterval(this.timerInterval);\r\n      if (this.socket) this.socket.close();\r\n      if (this.tvWidget) this.tvWidget.remove();\r\n\r\n      // Get values\r\n      const tradeAmount = parseFloat(this.session.tradeAmount);\r\n      const rawProfit = parseFloat(this.session.rawProfit);\r\n      const tradeFee = parseFloat(this.session.tradeFee);\r\n      const balanceAfterTrade = parseFloat(this.session.currentBalance); // $900 ($1000 - $100)\r\n\r\n      // Calculate final balance:\r\n      // 1. Start with balance after trade ($900)\r\n      // 2. Add back trade amount ($900 + $100 = $1000)\r\n      // 3. Add profit/loss after fees ($1000 + ($500 - $10) = $1490)\r\n      const finalBalance =\r\n        balanceAfterTrade + tradeAmount + (rawProfit - tradeFee);\r\n\r\n      // Update balance in database\r\n      const { error: updateError } = await supabase\r\n        .from(\r\n          this.session.tradeAsset === \"USD\" ? \"trading_accounts\" : \"user_assets\"\r\n        )\r\n        .update({\r\n          balance: Math.max(0, finalBalance),\r\n        })\r\n        .eq(\"id\", this.session.accountId);\r\n\r\n      if (updateError) throw updateError;\r\n\r\n      // Create transaction record\r\n      const transactionData = {\r\n        user_id: this.session.userId,\r\n        type: \"swap\",\r\n        status: \"completed\",\r\n        amount: Math.abs(rawProfit),\r\n        fee: tradeFee,\r\n        fee_percentage: 10, // 10% fixed fee\r\n        network: \"internal\",\r\n        created_at: new Date(this.session.startTime).toISOString(),\r\n        completed_at: new Date().toISOString(),\r\n        currency: this.session.tradeAsset,\r\n        notes: `Trading ${reason}`,\r\n        metadata: {\r\n          trade_type: \"spot\",\r\n          initial_balance: this.session.initialBalance,\r\n          trade_amount: tradeAmount,\r\n          balance_after_trade: balanceAfterTrade,\r\n          raw_profit_loss: rawProfit,\r\n          trading_fee: tradeFee,\r\n          final_balance: finalBalance,\r\n          reason: reason,\r\n          leverage_used: this.leverage,\r\n        },\r\n      };\r\n\r\n      const { error: transactionError } = await supabase\r\n        .from(\"transactions\")\r\n        .insert(transactionData);\r\n\r\n      if (transactionError) throw transactionError;\r\n\r\n      // Store final values and clean up\r\n      const netProfit = rawProfit - tradeFee;\r\n      const sessionAsset = this.session.tradeAsset;\r\n\r\n      // Clear session\r\n      this.session = null;\r\n      localStorage.removeItem(\"activeTradeSession\");\r\n      localStorage.setItem(\r\n        `userBalance_${sessionAsset}`,\r\n        finalBalance.toString()\r\n      );\r\n\r\n      toastify({\r\n        text: `Trading session ended. P/L: ${netProfit.toFixed(\r\n          2\r\n        )} ${sessionAsset}`,\r\n        background: netProfit >= 0 ? \"bg-green-500\" : \"bg-red-500\",\r\n      });\r\n\r\n      return netProfit;\r\n    } catch (error) {\r\n      console.error(\"Session end error:\", error);\r\n      toastify({\r\n        text: \"Error ending trading session\",\r\n        background: \"bg-red-500\",\r\n      });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async fetchMarketPrices() {\r\n    try {\r\n      const response = await fetch(\r\n        `https://api.coingecko.com/api/v3/simple/price?ids=${CRYPTO_IDS}&vs_currencies=usd`\r\n      );\r\n      const data = await response.json();\r\n      this.marketPrices = data;\r\n      return data;\r\n    } catch (error) {\r\n      console.error(\"Price fetch error:\", error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  startPriceSimulation() {\r\n    if (this.priceInterval) clearInterval(this.priceInterval);\r\n    if (this.priceUpdateInterval) clearInterval(this.priceUpdateInterval);\r\n\r\n    this.priceUpdateInterval = setInterval(async () => {\r\n      await this.fetchMarketPrices();\r\n    }, 30000);\r\n\r\n    this.priceInterval = setInterval(() => {\r\n      if (this.isPaused) return;\r\n\r\n      this.marketSentiment += (Math.random() - 0.5) * 0.1;\r\n      this.marketSentiment = Math.max(Math.min(this.marketSentiment, 1), -1);\r\n\r\n      const symbol = this.session?.symbol?.toLowerCase() || \"bitcoin\";\r\n      const marketPrice = this.marketPrices[symbol]?.usd || this.lastPrice;\r\n\r\n      const volatility = this.volatility * this.volatilityFactor;\r\n      const sentimentImpact = this.marketSentiment * volatility * 2;\r\n      const trendImpact = this.trend * volatility;\r\n      const randomFactor = (Math.random() - 0.5) * volatility;\r\n\r\n      const priceChange =\r\n        marketPrice *\r\n        (sentimentImpact +\r\n          trendImpact +\r\n          randomFactor +\r\n          Math.sin(Date.now() / 10000) * volatility * 0.5);\r\n\r\n      this.lastPrice = Math.max(1, marketPrice + priceChange);\r\n      this.priceHistory.push({\r\n        price: this.lastPrice,\r\n        timestamp: Date.now(),\r\n      });\r\n\r\n      if (this.priceHistory.length > 3600) {\r\n        this.priceHistory.shift();\r\n      }\r\n\r\n      const candle = {\r\n        x: Date.now(),\r\n        o: this.lastPrice,\r\n        h: this.lastPrice * (1 + Math.random() * volatility),\r\n        l: this.lastPrice * (1 - Math.random() * volatility),\r\n        c: this.lastPrice,\r\n      };\r\n\r\n      this.updatePriceData(candle);\r\n    }, 1000);\r\n  }\r\n\r\n  updatePriceData(candle) {\r\n    this.candleData.push(candle);\r\n    if (this.candleData.length > 100) this.candleData.shift();\r\n\r\n    if (this.session) {\r\n      this.session.currentPrice = this.lastPrice;\r\n      this.calculateProfit();\r\n      this.updateChart();\r\n      this.checkTakeProfitStopLoss();\r\n      this.updateUI();\r\n    }\r\n  }\r\n\r\n  renderTakeProfitStopLoss() {\r\n    if (!this.session) return \"\";\r\n\r\n    const { takeProfitLevel, stopLossLevel, currentProfit } = this.session;\r\n\r\n    return /* html */ `\r\n            ${\r\n              takeProfitLevel\r\n                ? /* html */ `\r\n                <div class=\"mt-4 p-2 bg-green-500/10 rounded-lg flex justify-between items-center\">\r\n                    <span>Take Profit</span>\r\n                    <span class=\"font-bold ${\r\n                      currentProfit >= takeProfitLevel\r\n                        ? \"text-green-500\"\r\n                        : \"text-white\"\r\n                    }\">\r\n                        $${takeProfitLevel.toFixed(2)}\r\n                    </span>\r\n                </div>\r\n            `\r\n                : \"\"\r\n            }\r\n            \r\n            ${\r\n              stopLossLevel\r\n                ? /* html */ `\r\n                <div class=\"mt-2 p-2 bg-red-500/10 rounded-lg flex justify-between items-center\">\r\n                    <span>Stop Loss</span>\r\n                    <span class=\"font-bold ${\r\n                      currentProfit <= stopLossLevel\r\n                        ? \"text-red-500\"\r\n                        : \"text-white\"\r\n                    }\">\r\n                        $${Math.abs(stopLossLevel).toFixed(2)}\r\n                    </span>\r\n                </div>\r\n            `\r\n                : \"\"\r\n            }\r\n        `;\r\n  }\r\n\r\n  updateChart() {\r\n    if (!this.chart || !this.candleData.length) return;\r\n\r\n    this.chart.data.datasets[0].data = this.candleData;\r\n    this.chart.update(\"none\");\r\n  }\r\n\r\n  updateUI() {\r\n    const infoContainer = document.getElementById(\"tradeInfo\");\r\n    if (!infoContainer || !this.session || !this.lastPrice) return;\r\n\r\n    try {\r\n      const timeLeft = this.session.remainingTime || 0;\r\n      const minutes = Math.floor(timeLeft / 60);\r\n      const seconds = timeLeft % 60;\r\n\r\n      const startPrice = this.session.startPrice || this.lastPrice;\r\n      const isProfit = this.lastPrice > startPrice;\r\n      const profitClass = isProfit ? \"text-green-500\" : \"text-red-500\";\r\n      const profitPrefix = isProfit ? \"+\" : \"\";\r\n\r\n      const priceMovement = startPrice\r\n        ? ((this.lastPrice - startPrice) / startPrice) * 100\r\n        : 0;\r\n      const momentum = this.calculateMomentum();\r\n\r\n      const currentProfit = this.session.currentProfit || 0;\r\n      const tradeFee = this.session.tradeFee || 0;\r\n      const initialBalance = this.session.initialBalance || 0;\r\n      const tradeAsset = this.session.tradeAsset || \"USD\";\r\n\r\n      infoContainer.innerHTML = /* html */ `\r\n            <div class=\"space-y-4 p-4 bg-brand-black/30 rounded-xl border border-brand-primary/10\">\r\n                <div class=\"grid grid-cols-2 gap-4\">\r\n                    <div>\r\n                        <div class=\"text-sm text-gray-400\">Current Leverage</div>\r\n                        <div class=\"text-xl font-bold text-white\">\r\n                            ${(this.lastPrice || 0).toFixed(2)} ${tradeAsset}\r\n                        </div>\r\n                        <div class=\"text-xs ${profitClass}\">\r\n                            ${profitPrefix}${priceMovement.toFixed(2)}%\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        <div class=\"text-sm text-gray-400\">Time Left</div>\r\n                        <div class=\"text-xl font-bold text-white\">\r\n                            ${minutes}:${seconds.toString().padStart(2, \"0\")}\r\n                        </div>\r\n                        <div class=\"text-xs text-gray-400\">Momentum: ${momentum}</div>\r\n                    </div>\r\n                    <div>\r\n                        <div class=\"text-sm text-gray-400\">Current P/L</div>\r\n                        <div class=\"text-xl font-bold ${profitClass}\">\r\n                            ${profitPrefix}${Math.abs(currentProfit).toFixed(\r\n        2\r\n      )} ${tradeAsset}\r\n                        </div>\r\n                        <div class=\"text-xs text-gray-400\">\r\n                            Fee: ${tradeFee.toFixed(2)} ${tradeAsset}\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        <div class=\"text-sm text-gray-400\">Initial Balance</div>\r\n                        <div class=\"text-xl font-bold text-white\">\r\n                            ${initialBalance.toFixed(2)} ${tradeAsset}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                ${this.renderTakeProfitStopLoss()}\r\n            </div>\r\n        `;\r\n    } catch (error) {\r\n      console.error(\"UI update error:\", error);\r\n      infoContainer.innerHTML = `\r\n            <div class=\"p-4 bg-red-500/10 rounded-xl border border-red-500/20\">\r\n                <p class=\"text-red-500\">Error updating trade information</p>\r\n            </div>\r\n        `;\r\n    }\r\n  }\r\n\r\n  calculateMomentum() {\r\n    if (!Array.isArray(this.priceHistory) || this.priceHistory.length < 10) {\r\n      return \"Calculating...\";\r\n    }\r\n\r\n    try {\r\n      const recent = this.priceHistory.slice(-10);\r\n      const momentum = recent.reduce((acc, curr, i, arr) => {\r\n        if (i === 0) return acc;\r\n        return acc + (curr.price - arr[i - 1].price) / arr[i - 1].price;\r\n      }, 0);\r\n\r\n      if (momentum > 0.01) return \"🔥 Strong Up\";\r\n      if (momentum > 0) return \"📈 Upward\";\r\n      if (momentum < -0.01) return \"❄️ Strong Down\";\r\n      if (momentum < 0) return \"📉 Downward\";\r\n      return \"↔️ Neutral\";\r\n    } catch (error) {\r\n      console.error(\"Momentum calculation error:\", error);\r\n      return \"Calculating...\";\r\n    }\r\n  }\r\n\r\n  setTakeProfit(amount) {\r\n    if (!this.session || !amount) return false;\r\n    this.session.takeProfitLevel = parseFloat(amount);\r\n    this.saveSessionToStorage();\r\n    toastify({\r\n      text: `Take Profit set to $${amount}`,\r\n      background: \"bg-green-500\",\r\n    });\r\n    return true;\r\n  }\r\n\r\n  setStopLoss(amount) {\r\n    if (!this.session || !amount) return false;\r\n    this.session.stopLossLevel = -Math.abs(parseFloat(amount));\r\n    this.saveSessionToStorage();\r\n    toastify({\r\n      text: `Stop Loss set to $${amount}`,\r\n      background: \"bg-red-500\",\r\n    });\r\n    return true;\r\n  }\r\n\r\n  checkTakeProfitStopLoss() {\r\n    if (!this.session?.currentProfit) return;\r\n\r\n    const { currentProfit, takeProfitLevel, stopLossLevel } = this.session;\r\n\r\n    if (takeProfitLevel && currentProfit >= takeProfitLevel) {\r\n      this.endSession(\"take_profit\");\r\n      return;\r\n    }\r\n\r\n    if (stopLossLevel && currentProfit <= stopLossLevel) {\r\n      this.endSession(\"stop_loss\");\r\n      return;\r\n    }\r\n  }\r\n\r\n  startTimer() {\r\n    if (this.timerInterval) clearInterval(this.timerInterval);\r\n\r\n    this.timerInterval = setInterval(() => {\r\n      if (this.isPaused || !this.session) return;\r\n\r\n      if (this.session.remainingTime <= 0) {\r\n        this.endSession(\"timeout\");\r\n        return;\r\n      }\r\n\r\n      this.session.remainingTime--;\r\n      this.saveSessionToStorage();\r\n      this.updateUI();\r\n    }, 1000);\r\n  }\r\n\r\n  handleVisibilityChange(isHidden) {\r\n    if (isHidden) {\r\n      this.pauseSession();\r\n      this.showNotification(\r\n        \"Trading Session Paused\",\r\n        \"Your trading session is on hold. Return to continue trading.\"\r\n      );\r\n    } else {\r\n      this.resumeSession();\r\n    }\r\n  }\r\n\r\n  pauseSession() {\r\n    if (this.isPaused) return;\r\n    this.isPaused = true;\r\n    this.pauseStart = Date.now();\r\n    this.updateUI();\r\n  }\r\n\r\n  resumeSession() {\r\n    if (!this.isPaused) return;\r\n    this.isPaused = false;\r\n    if (this.pauseStart) {\r\n      this.totalPausedTime += Date.now() - this.pauseStart;\r\n    }\r\n    this.updateUI();\r\n  }\r\n\r\n  saveSessionToStorage() {\r\n    if (!this.session) return;\r\n    localStorage.setItem(\r\n      \"activeTradeSession\",\r\n      JSON.stringify({\r\n        ...this.session,\r\n        lastUpdated: Date.now(),\r\n      })\r\n    );\r\n  }\r\n\r\n  restoreSession(savedSession) {\r\n    this.session = savedSession;\r\n    this.lastPrice = savedSession.currentPrice;\r\n    this.initializeTradingView(savedSession.symbol || \"BTCUSDT\");\r\n    this.startPriceSimulation();\r\n    this.startTimer();\r\n  }\r\n\r\n  showNotification(title, body) {\r\n    if (Notification.permission === \"granted\") {\r\n      new Notification(title, {\r\n        body,\r\n        icon: LOGO,\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nexport const handleTradeSession = new TradeSessionHandler();\r\n","import spinner from '../../../utils/spinner'\r\nimport toastify from '../../../components/toastify'\r\nimport supabase from '../../../utils/supabaseClients'\r\nimport { loadPage } from '../../../routes/router'\r\nimport { handleTradeSession } from '../components/handleTrade';\r\nimport { loginWebAuthn, isWebAuthnAvailable } from \"../../../utils/webAuthnHelper\";\r\n\r\nexport async function loginHandler({ email, password }) {\r\n    try {\r\n        spinner.start()\r\n\r\n        // Clear any existing sessions - with better error handling\r\n        if (handleTradeSession.session) {\r\n            try {\r\n                await handleTradeSession.endSession('login');\r\n            } catch (sessionError) {\r\n                console.warn('Session end error:', sessionError);\r\n                // Clear session manually if endSession fails\r\n                handleTradeSession.session = null;\r\n            }\r\n        }\r\n\r\n        // Always clear storage regardless of session status\r\n        localStorage.removeItem('activeTradeSession');\r\n        Object.keys(localStorage)\r\n            .filter(key => key.startsWith('userBalance_'))\r\n            .forEach(key => localStorage.removeItem(key));\r\n\r\n\r\n        // If no email/password, try biometric login\r\n        if ((!email || !password) && await isWebAuthnAvailable()) {\r\n            // Prompt for email if not present\r\n            let userId = null;\r\n            if (!email) {\r\n                // You may want to show a modal to ask for email, then fetch userId from Supabase\r\n                toastify({\r\n                    text: \"Please enter your email for biometric login\",\r\n                    icon: \"fas fa-exclamation-circle\",\r\n                    background: \"bg-yellow-500\"\r\n                });\r\n                spinner.stop();\r\n                return false;\r\n            }\r\n            // Fetch userId from Supabase by email\r\n            const { data: user, error } = await supabase\r\n                .from('auth.users')\r\n                .select('id')\r\n                .eq('email', email)\r\n                .single();\r\n            if (error || !user) {\r\n                spinner.stop();\r\n                toastify({\r\n                    text: \"User not found for biometric login\",\r\n                    icon: \"fas fa-exclamation-circle\",\r\n                    background: \"bg-red-500\"\r\n                });\r\n                return false;\r\n            }\r\n            userId = user.id;\r\n\r\n            // Try biometric login\r\n            const result = await loginWebAuthn(userId);\r\n            spinner.stop();\r\n            if (result.success) {\r\n                toastify({\r\n                    text: \"Biometric login successful! Redirecting...\",\r\n                    icon: \"fas fa-fingerprint\",\r\n                    background: \"bg-green-500/10\"\r\n                });\r\n                await loadPage('dashboard');\r\n                return true;\r\n            } else {\r\n                toastify({\r\n                    text: \"Biometric login failed: \" + result.error,\r\n                    icon: \"fas fa-exclamation-circle\",\r\n                    background: \"bg-red-500\"\r\n                });\r\n                return false;\r\n            }\r\n        }\r\n\r\n\r\n        const { data, error } = await supabase.auth.signInWithPassword({\r\n            email,\r\n            password\r\n        })\r\n\r\n        if (error) throw error\r\n\r\n        // Get user profile\r\n        const { data: profile, error: profileError } = await supabase\r\n            .from('profiles')\r\n            .select('*')\r\n            .eq('id', data.user.id)\r\n            .single()\r\n\r\n        if (profileError) throw profileError\r\n\r\n        // Verify if user is verified\r\n        if (!profile.is_verified) {\r\n            spinner.stop()\r\n            toastify({\r\n                text: \"Please verify your email first\",\r\n                icon: \"fas fa-exclamation-circle\",\r\n                background: \"bg-yellow-500\",\r\n                duration: 3000\r\n            })\r\n\r\n        }\r\n        // Update last login timestamp for all user's trading accounts\r\n        const { error: updateError } = await supabase\r\n            .from('trading_accounts')\r\n            .update({ last_login: new Date().toISOString() })\r\n            .eq('user_id', data.user.id)\r\n\r\n        if (updateError) {\r\n            console.error('Error updating last login:', updateError)\r\n            // Continue with login process despite error\r\n        }\r\n\r\n        spinner.stop()\r\n        toastify({\r\n            text: \"Welcome back! Redirecting to dashboard...\",\r\n            icon: \"fas fa-check-circle\",\r\n            background: \"bg-green-500/10\",\r\n            duration: 2000\r\n        })\r\n\r\n        // Small delay for toast to be visible\r\n        await new Promise(resolve => setTimeout(resolve, 1000))\r\n        await loadPage('dashboard')\r\n        return true\r\n\r\n    } catch (error) {\r\n        spinner.stop()\r\n        toastify({\r\n            text: error.message === 'Invalid login credentials'\r\n                ? \"Invalid email or password\"\r\n                : \"An error occurred during login\",\r\n            icon: \"fas fa-exclamation-circle\",\r\n            background: \"bg-red-500\",\r\n            duration: 3000\r\n        })\r\n        return false\r\n    }\r\n}\r\n\r\nexport async function logoutHandler() {\r\n    try {\r\n        spinner.start();\r\n\r\n        // Clear any active trading sessions\r\n        if (handleTradeSession.session) {\r\n            try {\r\n                await handleTradeSession.endSession('logout');\r\n            } catch (sessionError) {\r\n                console.warn('Error ending trade session:', sessionError);\r\n                // Continue with logout even if session end fails\r\n            }\r\n        }\r\n\r\n        // Clear all storage regardless of session end success\r\n        localStorage.removeItem('activeTradeSession');\r\n\r\n        // Clear all user-related data from localStorage\r\n        Object.keys(localStorage)\r\n            .filter(key => key.startsWith('userBalance_') || key.startsWith('user'))\r\n            .forEach(key => localStorage.removeItem(key));\r\n\r\n        // Sign out from Supabase\r\n        const { error } = await supabase.auth.signOut();\r\n        if (error) throw error;\r\n\r\n        spinner.stop();\r\n        toastify({\r\n            text: 'Logged out successfully',\r\n            background: 'bg-green-500',\r\n            duration: 2000\r\n        });\r\n\r\n        await loadPage('login');\r\n        return true;\r\n\r\n    } catch (error) {\r\n        console.error('Logout error:', error);\r\n        spinner.stop();\r\n\r\n        // Ensure user is redirected to login even on error\r\n        await loadPage('login');\r\n\r\n        toastify({\r\n            text: 'Error during logout, please refresh the page',\r\n            background: 'bg-red-500',\r\n            duration: 3000\r\n        });\r\n        return false;\r\n    }\r\n}","import { loadPage } from '../routes/router'\r\nimport supabase from './supabaseClients'\r\nimport toastify from '../components/toastify'\r\n\r\nexport async function checkAuthSession(currentPage = '') {\r\n    try {\r\n        const { data: { session }, error } = await supabase.auth.getSession()\r\n\r\n        if (error) throw error\r\n\r\n        // If on login page and logged in, redirect to dashboard\r\n        if (currentPage.toLowerCase() === 'login' && session) {\r\n            loadPage('dashboard')\r\n            return false\r\n        }\r\n\r\n        // If not on login page and not logged in, redirect to login\r\n        if (currentPage.toLowerCase() !== 'login' && !session) {\r\n            toastify({\r\n                text: \"Please login to continue\",\r\n                icon: \"fas fa-lock\",\r\n                background: \"bg-yellow-500/10\",\r\n                duration: 3000\r\n            })\r\n            loadPage('login')\r\n            return false\r\n        }\r\n\r\n        // If session exists, fetch and cache user profile\r\n        if (session) {\r\n            const { data: profile, error: profileError } = await supabase\r\n                .from('profiles')\r\n                .select('*')\r\n                .eq('id', session.user.id)\r\n                .single()\r\n\r\n            if (profileError) throw profileError\r\n\r\n            // Cache user data in localStorage\r\n            localStorage.setItem('userProfile', JSON.stringify(profile))\r\n        }\r\n\r\n        return true\r\n    } catch (error) {\r\n        console.error('Auth check failed:', error)\r\n        localStorage.removeItem('userProfile')\r\n\r\n        if (currentPage.toLowerCase() !== 'login') {\r\n            toastify({\r\n                text: \"Session expired. Please login again\",\r\n                icon: \"fas fa-exclamation-circle\",\r\n                background: \"bg-red-500/10\",\r\n                duration: 3000\r\n            })\r\n            loadPage('login')\r\n        }\r\n        return false\r\n    }\r\n}\r\n\r\n// Helper to get cached user profile\r\nexport function getUserProfile() {\r\n    try {\r\n        return JSON.parse(localStorage.getItem('userProfile'))\r\n    } catch {\r\n        return null\r\n    }\r\n}\r\n\r\n// Helper to clear auth data\r\nexport function clearAuth() {\r\n    localStorage.removeItem('userProfile')\r\n    supabase.auth.signOut()\r\n}\r\n\r\nexport default {\r\n    check: checkAuthSession,\r\n    getProfile: getUserProfile,\r\n    clear: clearAuth\r\n}"],"names":["CRYPTO_IDS","TradeSessionHandler","symbol","container","script","sessionData","user","supabase","currentBalance","accountId","tradeAmount","tradingAccount","tradingError","newBalance","updateError","asset","assetError","userAsset","userAssetError","error","toastify","startPrice","priceChangePercent","rawProfit","tradeFee","reason","balanceAfterTrade","finalBalance","transactionData","transactionError","netProfit","sessionAsset","data","marketPrice","volatility","sentimentImpact","trendImpact","randomFactor","priceChange","candle","takeProfitLevel","stopLossLevel","currentProfit","infoContainer","timeLeft","minutes","seconds","isProfit","profitClass","profitPrefix","priceMovement","momentum","initialBalance","tradeAsset","acc","curr","i","arr","amount","isHidden","savedSession","title","body","LOGO","handleTradeSession","loginHandler","email","password","spinner","sessionError","key","isWebAuthnAvailable","userId","result","loginWebAuthn","loadPage","profile","profileError","resolve","logoutHandler","checkAuthSession","currentPage","session","getUserProfile","clearAuth","auth"],"mappings":"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"}