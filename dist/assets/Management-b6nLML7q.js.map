{"version":3,"file":"Management-b6nLML7q.js","sources":["../../src/script/views/admin/components/Management.js"],"sourcesContent":["import toastify from \"../../../components/toastify\";\r\nimport { sendEmail } from \"../../../utils/send-email\";\r\n\r\nclass KycManager {\r\n    constructor(supabase, spinner) {\r\n        this.supabase = supabase;\r\n        this.spinner = spinner;\r\n    }\r\n\r\n    async updateKycStatus(userId, status, reason = null) {\r\n        this.spinner.show('Updating KYC status...');\r\n        try {\r\n            const { error } = await this.supabase\r\n                .from('profiles')\r\n                .update({\r\n                    kyc_status: status,\r\n                    kyc_rejection_reason: reason,\r\n                    kyc_approved_at: status === 'approved' ? new Date().toISOString() : null\r\n                })\r\n                .eq('id', userId);\r\n\r\n            if (error) throw error;\r\n            return true;\r\n        } catch (error) {\r\n            console.error('KYC status update failed:', error);\r\n            return false;\r\n        } finally {\r\n            this.spinner.hide();\r\n        }\r\n    }\r\n\r\n    async handleDocumentReview(docId, action, reason = null) {\r\n        this.spinner.show(`${action === 'approve' ? 'Approving' : 'Rejecting'} document...`);\r\n        try {\r\n            const { data: doc, error: docError } = await this.supabase\r\n                .from('kyc_documents')\r\n                .update({\r\n                    status: action === 'approve' ? 'approved' : 'rejected',\r\n                    rejection_reason: reason,\r\n                    reviewed_at: new Date().toISOString(),\r\n                    verified_at: action === 'approve' ? new Date().toISOString() : null\r\n                })\r\n                .eq('id', docId)\r\n                .select('*, user:user_id(*)')\r\n                .single();\r\n\r\n            if (docError) throw docError;\r\n\r\n            // Check if all documents are approved/rejected\r\n            const { data: docs } = await this.supabase\r\n                .from('kyc_documents')\r\n                .select('status')\r\n                .eq('user_id', doc.user_id);\r\n\r\n            const allApproved = docs.every(d => d.status === 'approved');\r\n            const anyRejected = docs.some(d => d.status === 'rejected');\r\n\r\n            // Update overall KYC status\r\n            await this.updateKycStatus(\r\n                doc.user_id,\r\n                allApproved ? 'approved' : anyRejected ? 'rejected' : 'pending',\r\n                reason\r\n            );\r\n\r\n            return doc;\r\n        } catch (error) {\r\n            console.error('Document review failed:', error);\r\n            throw error;\r\n        } finally {\r\n            this.spinner.hide();\r\n        }\r\n    }\r\n}\r\n\r\nclass EmailNotifier {\r\n    constructor(sendEmail, spinner) {\r\n        this.sendEmail = sendEmail;\r\n        this.spinner = spinner;\r\n        this.templates = {\r\n            kyc_approved: {\r\n                subject: 'KYC Verification Approved',\r\n                body: (data) => `\r\n                    <h2>Hello ${data.name},</h2>\r\n                    <p>Your KYC verification has been successfully approved.</p>\r\n                    <p>You now have full access to all platform features.</p>\r\n                `\r\n            },\r\n            kyc_rejected: {\r\n                subject: 'KYC Verification Rejected',\r\n                body: (data) => `\r\n                    <h2>Hello ${data.name},</h2>\r\n                    <p>Your KYC verification has been rejected.</p>\r\n                    <p>Reason: ${data.reason}</p>\r\n                    <p>Please review and resubmit your documents.</p>\r\n                `\r\n            },\r\n            balance_updated: {\r\n                subject: 'Account Balance Updated',\r\n                body: (data) => `\r\n                    <h2>Hello ${data.name},</h2>\r\n                    <p>Your ${data.accountType} account balance has been updated.</p>\r\n                    <p>Action: ${data.action}</p>\r\n                    <p>Amount: $${data.amount.toLocaleString()}</p>\r\n                    <p>New Balance: $${data.newBalance.toLocaleString()}</p>\r\n                `\r\n            },\r\n            asset_updated: {\r\n                subject: 'Asset Balance Updated',\r\n                body: (data) => `\r\n                    <h2>Hello ${data.name},</h2>\r\n                    <p>Your ${data.asset} balance has been updated.</p>\r\n                    <p>Action: ${data.action}</p>\r\n                    <p>Amount: ${data.amount} ${data.asset}</p>\r\n                    <p>New Balance: ${data.newBalance} ${data.asset}</p>\r\n                `\r\n            },\r\n            transaction_approved: {\r\n                subject: 'Transaction Approved',\r\n                body: (data) => `\r\n                    <h2>Hello ${data.name},</h2>\r\n                    <p>Your ${data.type} transaction has been approved.</p>\r\n                    <p>Amount: $${data.amount.toLocaleString()}</p>\r\n                    ${data.fee ? `<p>Fee: $${data.fee.toLocaleString()}</p>` : ''}\r\n                `\r\n            },\r\n            transaction_rejected: {\r\n                subject: 'Transaction Rejected',\r\n                body: (data) => `\r\n                    <h2>Hello ${data.name},</h2>\r\n                    <p>Your ${data.type} transaction has been rejected.</p>\r\n                    <p>Amount: $${data.amount.toLocaleString()}</p>\r\n                `\r\n            }\r\n        };\r\n    }\r\n\r\n    async sendTemplateEmail(templateName, data) {\r\n        if (!this.templates[templateName]) {\r\n            throw new Error(`Email template '${templateName}' not found`);\r\n        }\r\n\r\n        const template = this.templates[templateName];\r\n\r\n        try {\r\n            this.spinner.show('Sending email notification...');\r\n\r\n            await sendEmail({\r\n                to: data.email,\r\n                subject: template.subject,\r\n                html: template.body(data)\r\n            });\r\n\r\n            toastify({\r\n                text: 'Email sent successfully',\r\n                icon: 'fas fa-check'\r\n            });\r\n        } catch (error) {\r\n            console.error('Failed to send email:', error);\r\n            toastify({\r\n                text: 'Failed to send email',\r\n                icon: 'fas fa-times',\r\n                background: 'bg-red-500'\r\n            });\r\n        } finally {\r\n            this.spinner.hide();\r\n        }\r\n    }\r\n}\r\n\r\nclass TransactionManager {\r\n    constructor(supabase, spinner, emailNotifier) {\r\n        this.supabase = supabase;\r\n        this.spinner = spinner;\r\n        this.emailNotifier = emailNotifier;\r\n        this.FEE_PERCENTAGE = 0.10; // 10% fee\r\n    }\r\n\r\n    async handleTransaction(txId, action) {\r\n        this.spinner.show(`${action === 'approve' ? 'Approving' : 'Rejecting'} transaction...`);\r\n        try {\r\n            // First fetch transaction\r\n            const { data: tx, error: txError } = await this.supabase\r\n                .from('transactions')\r\n                .select(`\r\n                *,\r\n                profiles!transactions_user_id_fkey (\r\n                    id, email, full_name\r\n                )\r\n            `)\r\n                .eq('id', txId)\r\n                .single();\r\n\r\n            if (txError) throw txError;\r\n\r\n            // Then fetch account details\r\n            const { data: account, error: accountError } = await this.supabase\r\n                .from('trading_accounts')\r\n                .select('*')\r\n                .eq('user_id', tx.user_id)\r\n                .eq('account_type', 'live')\r\n                .single();\r\n\r\n            if (accountError) {\r\n                console.error('Account fetch error:', accountError);\r\n                throw new Error('Account not found for this transaction');\r\n            }\r\n\r\n            // Process transaction with both transaction and account data\r\n            if (action === 'approve') {\r\n                await this.approveTransaction({\r\n                    ...tx,\r\n                    trading_accounts: account\r\n                });\r\n            } else {\r\n                await this.rejectTransaction(tx);\r\n            }\r\n\r\n            return true;\r\n        } catch (error) {\r\n            console.error('Transaction handling failed:', error);\r\n            throw error;\r\n        } finally {\r\n            this.spinner.hide();\r\n        }\r\n    }\r\n\r\n    async approveTransaction(tx) {\r\n        const fee = tx.type === 'withdrawal' ? tx.amount * this.FEE_PERCENTAGE : 0;\r\n        const totalAmount = tx.type === 'withdrawal' ? tx.amount + fee : tx.amount;\r\n\r\n        // Get the user's live trading account\r\n        const { data: account, error: accountError } = await this.supabase\r\n            .from('trading_accounts')\r\n            .select('*')\r\n            .eq('user_id', tx.user_id)\r\n            .eq('account_type', 'live')\r\n            .single();\r\n\r\n        if (accountError) {\r\n            throw new Error('Could not find user trading account');\r\n        }\r\n\r\n        if (tx.type === 'withdrawal') {\r\n            if (!account || account.balance < totalAmount) {\r\n                toastify({\r\n                    text: `Insufficient balance for withdrawal. Available: $${account?.balance?.toLocaleString() || 0}, Required: $${totalAmount.toLocaleString()}`,\r\n                    icon: 'fas fa-exclamation-circle'\r\n                });\r\n                throw new Error(\r\n                    `Insufficient balance for withdrawal. Available: $${account?.balance?.toLocaleString() || 0}, Required: $${totalAmount.toLocaleString()}`\r\n                );\r\n            }\r\n        }\r\n\r\n        // Update transaction status and balance\r\n        const { error } = await this.supabase.rpc('handle_transaction', {\r\n            p_transaction_id: tx.id,\r\n            p_status: 'completed',\r\n            p_amount: tx.amount,\r\n            p_fee: fee\r\n        });\r\n\r\n        if (error) throw error;\r\n\r\n        // Send email notification\r\n        await this.emailNotifier.sendTemplateEmail('transaction_approved', {\r\n            email: tx.profiles.email,\r\n            name: tx.profiles.full_name,\r\n            type: tx.type,\r\n            amount: tx.amount,\r\n            fee: fee\r\n        });\r\n    }\r\n\r\n    async rejectTransaction(tx) {\r\n        const { error } = await this.supabase\r\n            .from('transactions')\r\n            .update({\r\n                status: 'failed',\r\n                completed_at: new Date().toISOString()\r\n            })\r\n            .eq('id', tx.id);\r\n\r\n        if (error) throw error;\r\n\r\n        // Send email notification\r\n        await this.emailNotifier.sendTemplateEmail('transaction_rejected', {\r\n            email: tx.profiles.email,\r\n            name: tx.profiles.full_name,\r\n            type: tx.type,\r\n            amount: tx.amount\r\n        });\r\n    }\r\n}\r\n\r\nclass BalanceManager {\r\n    constructor(supabase, spinner, emailNotifier) {\r\n        this.supabase = supabase;\r\n        this.spinner = spinner;\r\n        this.emailNotifier = emailNotifier;\r\n    }\r\n\r\n    async updateBalance(accountId, action, amount, reason) {\r\n        this.spinner.show('Updating balance...');\r\n        try {\r\n            const { data: account, error: accountError } = await this.supabase\r\n                .from('trading_accounts')\r\n                .select('*, profiles:user_id(*)')\r\n                .eq('id', accountId)\r\n                .single();\r\n\r\n            if (accountError) throw accountError;\r\n\r\n            let newBalance;\r\n            switch (action) {\r\n                case 'set':\r\n                    newBalance = amount;\r\n                    break;\r\n                case 'add':\r\n                    newBalance = account.balance + amount;\r\n                    break;\r\n                case 'subtract':\r\n                    if (account.balance < amount) {\r\n                        throw new Error('Insufficient balance');\r\n                    }\r\n                    newBalance = account.balance - amount;\r\n                    break;\r\n                default:\r\n                    throw new Error('Invalid action');\r\n            }\r\n\r\n            // Update balance without updated_at (it's handled by trigger)\r\n            const { error } = await this.supabase\r\n                .from('trading_accounts')\r\n                .update({ balance: newBalance })\r\n                .eq('id', accountId);\r\n\r\n            if (error) throw error;\r\n\r\n            // Log balance change\r\n            await this.logBalanceChange(account, action, amount, newBalance, reason);\r\n\r\n            // Only send email if emailNotifier exists\r\n            if (this.emailNotifier && account.profiles) {\r\n                await this.emailNotifier.sendTemplateEmail('balance_updated', {\r\n                    email: account.profiles.email,\r\n                    name: account.profiles.full_name,\r\n                    amount: amount,\r\n                    action: action,\r\n                    newBalance: newBalance\r\n                });\r\n            }\r\n\r\n            return true;\r\n        } catch (error) {\r\n            console.error('Balance update failed:', error);\r\n            throw error;\r\n        } finally {\r\n            this.spinner.hide();\r\n        }\r\n    }\r\n\r\n    async logBalanceChange(account, action, amount, newBalance, reason) {\r\n        await this.supabase.from('balance_history').insert({\r\n            account_id: account.id,\r\n            user_id: account.user_id,\r\n            action_type: action,\r\n            amount: amount,\r\n            previous_balance: account.balance,\r\n            new_balance: newBalance,\r\n            reason: reason,\r\n            created_at: new Date().toISOString()\r\n        });\r\n    }\r\n}\r\n\r\n// In the same Management.js file\r\n\r\nclass AssetManager {\r\n    constructor(supabase, spinner, emailNotifier) {\r\n        this.supabase = supabase;\r\n        this.spinner = spinner;\r\n        this.emailNotifier = emailNotifier;\r\n    }\r\n\r\n    async updateUserAsset(userId, assetId, amount, action = 'set') {\r\n        this.spinner.show('Updating asset balance...');\r\n        try {\r\n            // First get the existing asset if any\r\n            const { data: existingAsset, error: fetchError } = await this.supabase\r\n                .from('user_assets')\r\n                .select('*, assets(*), profiles:user_id(*)')\r\n                .eq('user_id', userId)\r\n                .eq('asset_id', assetId)\r\n                .maybeSingle();\r\n\r\n            if (fetchError) throw fetchError;\r\n\r\n            let newBalance;\r\n            if (existingAsset) {\r\n                // Calculate new balance based on action\r\n                switch (action) {\r\n                    case 'add':\r\n                        newBalance = existingAsset.balance + amount;\r\n                        break;\r\n                    case 'subtract':\r\n                        if (existingAsset.balance < amount) {\r\n                            throw new Error('Insufficient balance');\r\n                        }\r\n                        newBalance = existingAsset.balance - amount;\r\n                        break;\r\n                    case 'set':\r\n                    default:\r\n                        newBalance = amount;\r\n                }\r\n\r\n                // Update existing asset\r\n                const { data: updatedAsset, error: updateError } = await this.supabase\r\n                    .from('user_assets')\r\n                    .update({ balance: newBalance })\r\n                    .eq('id', existingAsset.id)\r\n                    .select('*, assets(*), profiles:user_id(*)')\r\n                    .single();\r\n\r\n                if (updateError) throw updateError;\r\n                return updatedAsset;\r\n\r\n            } else {\r\n                // Create new asset\r\n                const { data: newAsset, error: insertError } = await this.supabase\r\n                    .from('user_assets')\r\n                    .insert({\r\n                        user_id: userId,\r\n                        asset_id: assetId,\r\n                        balance: amount\r\n                    })\r\n                    .select('*, assets(*), profiles:user_id(*)')\r\n                    .single();\r\n\r\n                if (insertError) throw insertError;\r\n                return newAsset;\r\n            }\r\n        } catch (error) {\r\n            console.error('Asset update failed:', error);\r\n            throw error;\r\n        } finally {\r\n            this.spinner.hide();\r\n        }\r\n    }\r\n}\r\n\r\nclass UserAssetModal {\r\n    constructor(modal, assetManager) {\r\n        this.modal = modal;\r\n        this.assetManager = assetManager;\r\n    }\r\n\r\n    render(userId, currentAssets = []) {\r\n        return /* html */`\r\n            <div class=\"space-y-6\">\r\n                <div class=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                    ${currentAssets.map(asset => /* html */`\r\n                        <div class=\"bg-brand-black/30 p-4 rounded-xl\">\r\n                            <div class=\"flex items-center justify-between\">\r\n                                <div class=\"flex items-center gap-3\">\r\n                                    <div class=\"w-10 h-10 rounded-full bg-brand-primary/10 \r\n                                                flex items-center justify-center\">\r\n                                        <img src=\"${asset.assets.logo_url}\" \r\n                                             alt=\"${asset.assets.symbol}\"\r\n                                             class=\"w-6 h-6\">\r\n                                    </div>\r\n                                    <div>\r\n                                        <div class=\"font-medium text-white\">\r\n                                            ${asset.assets.symbol}\r\n                                        </div>\r\n                                        <div class=\"text-sm text-gray-400\">\r\n                                            Balance: ${asset.balance}\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                <button onclick=\"window.editAssetBalance('${userId}', '${asset.id}')\"\r\n                                        class=\"p-2 rounded-lg bg-brand-primary/10 text-brand-primary\r\n                                               hover:bg-brand-primary/20 transition-colors\">\r\n                                    <i class=\"fas fa-edit\"></i>\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    `).join('')}\r\n                </div>\r\n\r\n                <form id=\"addAssetForm\" class=\"space-y-4\">\r\n                    <!-- Form fields for adding new assets -->\r\n                </form>\r\n            </div>\r\n        `;\r\n    }\r\n\r\n}\r\n\r\nclass UserDetailsView {\r\n    constructor(supabase, spinner) {\r\n        this.supabase = supabase;\r\n        this.spinner = spinner;\r\n        this.currentTab = 'overview';\r\n        this.tabs = [\r\n            { id: 'overview', label: 'Overview', icon: 'chart-pie' },\r\n            { id: 'assets', label: 'Assets', icon: 'coins' },\r\n            { id: 'transactions', label: 'Transactions', icon: 'exchange-alt' },\r\n            { id: 'kyc', label: 'KYC Documents', icon: 'id-card' },\r\n            { id: 'notifications', label: 'Notifications', icon: 'bell' }\r\n        ];\r\n    }\r\n\r\n    render(userData) {\r\n        return /* html */`\r\n            <div class=\"space-y-6\">\r\n                <!-- Back Navigation -->\r\n                <div class=\"flex items-center justify-between\">\r\n                    <button onclick=\"window.backToUsers()\"\r\n                            class=\"flex items-center gap-2 text-gray-400 hover:text-white \r\n                                   transition-colors\">\r\n                        <i class=\"fas fa-arrow-left\"></i>\r\n                        <span>Back to Users</span>\r\n                    </button>\r\n                    <div class=\"flex gap-2\">\r\n                        <button onclick=\"window.editUser('${userData.id}')\"\r\n                                class=\"px-4 py-2 rounded-xl bg-brand-primary/10 text-brand-primary\r\n                                       hover:bg-brand-primary/20 transition-colors\">\r\n                            <i class=\"fas fa-edit mr-2\"></i>\r\n                            Edit User\r\n                        </button>\r\n                        <button onclick=\"window.sendEmail('${userData.id}')\"\r\n                                class=\"px-4 py-2 rounded-xl bg-brand-primary/10 text-brand-primary\r\n                                       hover:bg-brand-primary/20 transition-colors\">\r\n                            <i class=\"fas fa-envelope mr-2\"></i>\r\n                            Send Email\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n\r\n                <!-- User Header -->\r\n                ${this.renderUserHeader(userData)}\r\n\r\n                <!-- Tab Navigation -->\r\n                <div class=\"flex overflow-x-auto hide-scrollbar gap-2\">\r\n                    ${this.renderTabs()}\r\n                </div>\r\n\r\n                <!-- Tab Content -->\r\n                <div id=\"tabContent\">\r\n                    ${this.renderTabContent(userData)}\r\n                </div>\r\n            </div>\r\n        `;\r\n    }\r\n\r\n    renderUserHeader(user) {\r\n        const liveAccount = user.trading_accounts?.find(acc => acc.account_type === 'live');\r\n\r\n        return /* html */`\r\n            <div class=\"bg-brand-black/30 rounded-xl p-6\">\r\n                <div class=\"flex flex-col md:flex-row justify-between gap-6\">\r\n                    <div class=\"flex items-center gap-4\">\r\n                        <div class=\"w-16 h-16 rounded-full bg-brand-primary/10 overflow-hidden\">\r\n                            ${user.avatar_url ?\r\n                `<img src=\"${user.avatar_url}\" alt=\"${user.full_name}\"\r\n                                      class=\"w-full h-full object-cover\">` :\r\n                `<div class=\"w-full h-full flex items-center justify-center\r\n                                            text-2xl text-brand-primary\">\r\n                                    ${user.full_name.charAt(0).toUpperCase()}\r\n                                </div>`\r\n            }\r\n                        </div>\r\n                        <div>\r\n                            <h2 class=\"text-xl font-bold text-white\">${user.full_name}</h2>\r\n                            <p class=\"text-gray-400\">${user.email}</p>\r\n                            <div class=\"flex items-center gap-2 mt-2\">\r\n                                <span class=\"px-2 py-1 rounded-full text-sm\r\n                                    ${user.is_verified ?\r\n                'bg-green-500/10 text-green-500' :\r\n                'bg-yellow-500/10 text-yellow-500'}\">\r\n                                    ${user.is_verified ? 'Verified' : 'Pending Verification'}\r\n                                </span>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"text-right\">\r\n                        <span class=\"text-sm text-gray-400\">Live Balance</span>\r\n                        <h3 class=\"text-2xl font-bold text-white mt-1\">\r\n                            $${liveAccount?.balance?.toLocaleString() || '0.00'}\r\n                        </h3>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        `;\r\n    }\r\n\r\n    // ...existing code...\r\n\r\n    renderTabContent(userData) {\r\n        switch (this.currentTab) {\r\n            case 'overview':\r\n                return this.renderOverviewTab(userData);\r\n            case 'assets':\r\n                return this.renderAssetsTab(userData);\r\n            case 'transactions':\r\n                return this.renderTransactionsTab(userData);\r\n            case 'kyc':\r\n                return this.renderKycTab(userData);\r\n            case 'notifications':\r\n                return this.renderNotificationsTab(userData);\r\n            default:\r\n                return '<div>Tab not found</div>';\r\n        }\r\n    }\r\n\r\n    renderOverviewTab(userData) {\r\n        const pendingTx = userData.transactions?.filter(tx => tx.status === 'pending') || [];\r\n        const recentActivity = userData.transactions?.slice(0, 5) || [];\r\n\r\n        return /* html */`\r\n        <div class=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n            <!-- Pending Transactions Card -->\r\n            <div class=\"bg-brand-black/30 rounded-xl p-6\">\r\n                <div class=\"flex items-center justify-between mb-4\">\r\n                    <h3 class=\"text-lg font-semibold text-white\">Pending Transactions</h3>\r\n                    ${pendingTx.length ? `\r\n                        <span class=\"px-2 py-1 rounded-full text-sm bg-yellow-500/10 text-yellow-500\">\r\n                            ${pendingTx.length} pending\r\n                        </span>\r\n                    ` : ''}\r\n                </div>\r\n                ${this.renderPendingTransactions(pendingTx)}\r\n            </div>\r\n\r\n            <!-- Recent Activity Card -->\r\n            <div class=\"bg-brand-black/30 rounded-xl p-6\">\r\n                <h3 class=\"text-lg font-semibold text-white mb-4\">Recent Activity</h3>\r\n                ${this.renderRecentActivity(recentActivity)}\r\n            </div>\r\n\r\n            <!-- User Statistics -->\r\n            <div class=\"bg-brand-black/30 rounded-xl p-6 lg:col-span-2\">\r\n                <h3 class=\"text-lg font-semibold text-white mb-4\">Account Statistics</h3>\r\n                ${this.renderUserStats(userData)}\r\n            </div>\r\n        </div>\r\n    `;\r\n    }\r\n\r\n    renderPendingTransactions(transactions) {\r\n        if (!transactions.length) {\r\n            return `\r\n            <div class=\"text-center text-gray-400 py-4\">\r\n                No pending transactions\r\n            </div>\r\n        `;\r\n        }\r\n\r\n        return /* html */`\r\n        <div class=\"space-y-4\">\r\n            ${transactions.map(tx => /* html */`\r\n                <div class=\"flex items-center justify-between p-4 bg-brand-black/20 rounded-lg\">\r\n                    <div>\r\n                        <div class=\"text-white capitalize\">${tx.type}</div>\r\n                        <div class=\"text-sm text-gray-400\">\r\n                            $${tx.amount.toLocaleString()} ${tx.currency || ''}\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"flex gap-2\">\r\n                        <button onclick=\"window.handleTransaction('${tx.id}', 'approve')\"\r\n                                class=\"px-3 py-1 rounded-lg bg-green-500/10 text-green-500\r\n                                       hover:bg-green-500/20 transition-colors\">\r\n                            Approve\r\n                        </button>\r\n                        <button onclick=\"window.handleTransaction('${tx.id}', 'reject')\"\r\n                                class=\"px-3 py-1 rounded-lg bg-red-500/10 text-red-500\r\n                                       hover:bg-red-500/20 transition-colors\">\r\n                            Reject\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            `).join('')}\r\n        </div>\r\n    `;\r\n    }\r\n\r\n    renderAssetsTab(userData) {\r\n        const userAssets = userData.user_assets || [];\r\n\r\n        return /* html */`\r\n        <div class=\"space-y-6\">\r\n            <!-- Assets Header -->\r\n            <div class=\"flex justify-between items-center\">\r\n                <h3 class=\"text-lg font-semibold text-white\">User Assets</h3>\r\n                <button onclick=\"window.addUserAsset('${userData.id}')\"\r\n                        class=\"px-4 py-2 rounded-xl bg-brand-primary text-white\r\n                               hover:bg-brand-primary/90 transition-colors\">\r\n                    <i class=\"fas fa-plus mr-2\"></i>\r\n                    Add Asset\r\n                </button>\r\n            </div>\r\n\r\n            <!-- Assets Grid -->\r\n            <div class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\r\n                ${userAssets.map(asset => /* html */`\r\n                    <div class=\"bg-brand-black/30 rounded-xl p-4\">\r\n                        <div class=\"flex items-center justify-between\">\r\n                            <div class=\"flex items-center gap-3\">\r\n                                <div class=\"w-12 h-12 rounded-full bg-brand-primary/10 \r\n                                            flex items-center justify-center overflow-hidden\">\r\n                                    ${asset.assets.logo_url ?\r\n                `<img src=\"${asset.assets.logo_url}\" \r\n                                              alt=\"${asset.assets.symbol}\"\r\n                                              class=\"w-8 h-8 object-contain\">` :\r\n                `<span class=\"text-xl text-brand-primary\">\r\n                                            ${asset.assets.symbol.charAt(0)}\r\n                                        </span>`\r\n            }\r\n                                </div>\r\n                                <div>\r\n                                    <h4 class=\"font-medium text-white\">\r\n                                        ${asset.assets.symbol}\r\n                                    </h4>\r\n                                    <p class=\"text-sm text-gray-400\">\r\n                                        ${asset.assets.name}\r\n                                    </p>\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"flex gap-2\">\r\n                                <button onclick=\"window.editAssetBalance(\r\n                                    '${userData.id}', \r\n                                    '${asset.id}',\r\n                                    '${asset.assets.symbol}'\r\n                                )\"\r\n                                        class=\"p-2 rounded-lg bg-brand-primary/10 text-brand-primary\r\n                                               hover:bg-brand-primary/20 transition-colors\">\r\n                                    <i class=\"fas fa-edit\"></i>\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div class=\"mt-4 pt-4 border-t border-brand-primary/10\">\r\n                            <div class=\"flex justify-between items-center\">\r\n                                <span class=\"text-gray-400\">Balance</span>\r\n                                <span class=\"text-lg font-medium text-white\">\r\n                                    ${asset.balance} ${asset.assets.symbol}\r\n                                </span>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                `).join('')}\r\n            </div>\r\n        </div>\r\n    `;\r\n    }\r\n\r\n    renderTransactionsTab(userData) {\r\n        const transactions = userData.transactions || [];\r\n        const statusColors = {\r\n            completed: 'green',\r\n            pending: 'yellow',\r\n            failed: 'red'\r\n        };\r\n\r\n        return /* html */`\r\n        <div class=\"space-y-6\">\r\n            <!-- Transactions Header -->\r\n            <div class=\"flex justify-between items-center\">\r\n                <h3 class=\"text-lg font-semibold text-white\">\r\n                    Transactions History\r\n                </h3>\r\n                <div class=\"flex gap-2\">\r\n                    <select id=\"txTypeFilter\" \r\n                            class=\"px-3 py-2 rounded-lg bg-brand-black/50 border border-brand-primary/20 \r\n                                   text-white focus:border-brand-primary outline-none\">\r\n                        <option value=\"\">All Types</option>\r\n                        <option value=\"deposit\">Deposits</option>\r\n                        <option value=\"withdrawal\">Withdrawals</option>\r\n                        <option value=\"swap\">Swaps</option>\r\n                    </select>\r\n                    <select id=\"txStatusFilter\"\r\n                            class=\"px-3 py-2 rounded-lg bg-brand-black/50 border border-brand-primary/20 \r\n                                   text-white focus:border-brand-primary outline-none\">\r\n                        <option value=\"\">All Status</option>\r\n                        <option value=\"completed\">Completed</option>\r\n                        <option value=\"pending\">Pending</option>\r\n                        <option value=\"failed\">Failed</option>\r\n                    </select>\r\n                </div>\r\n            </div>\r\n\r\n            <!-- Transactions Table -->\r\n            <div class=\"overflow-x-auto\">\r\n                <table class=\"w-full\">\r\n                    <thead>\r\n                        <tr class=\"text-left border-b border-brand-primary/10\">\r\n                            <th class=\"p-4 text-gray-400 font-medium\">Type</th>\r\n                            <th class=\"p-4 text-gray-400 font-medium\">Amount</th>\r\n                            <th class=\"p-4 text-gray-400 font-medium\">Status</th>\r\n                            <th class=\"p-4 text-gray-400 font-medium\">Date</th>\r\n                            <th class=\"p-4 text-gray-400 font-medium\">Actions</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        ${transactions.length ? transactions.map(tx => /* html */`\r\n                            <tr class=\"border-b border-brand-primary/10 hover:bg-brand-black/20\">\r\n                                <td class=\"p-4\">\r\n                                    <div class=\"flex items-center gap-2\">\r\n                                        <i class=\"fas fa-${tx.type === 'deposit' ? 'arrow-down' :\r\n                tx.type === 'withdrawal' ? 'arrow-up' : 'exchange-alt'\r\n            } text-${statusColors[tx.status]}-500\"></i>\r\n                                        <span class=\"capitalize\">${tx.type}</span>\r\n                                    </div>\r\n                                </td>\r\n                                <td class=\"p-4\">\r\n                                    <div class=\"text-white\">\r\n                                        $${tx.amount.toLocaleString()}\r\n                                    </div>\r\n                                    ${tx.fee ? `\r\n                                        <div class=\"text-sm text-gray-400\">\r\n                                            Fee: $${tx.fee.toLocaleString()}\r\n                                        </div>\r\n                                    ` : ''}\r\n                                </td>\r\n                                <td class=\"p-4\">\r\n                                    <span class=\"px-2 py-1 rounded-full text-sm\r\n                                        bg-${statusColors[tx.status]}-500/10 \r\n                                        text-${statusColors[tx.status]}-500\">\r\n                                        ${tx.status}\r\n                                    </span>\r\n                                </td>\r\n                                <td class=\"p-4 text-gray-400\">\r\n                                    ${this.formatDate(tx.created_at)}\r\n                                </td>\r\n                                <td class=\"p-4\">\r\n                                    <div class=\"flex gap-2\">\r\n                                        <button onclick=\"window.viewTransaction('${tx.id}')\"\r\n                                                class=\"p-2 rounded-lg bg-brand-primary/10 text-brand-primary\r\n                                                       hover:bg-brand-primary/20 transition-colors\">\r\n                                            <i class=\"fas fa-eye\"></i>\r\n                                        </button>\r\n                                        ${tx.status === 'pending' ? `\r\n                                            <button onclick=\"window.handleTransaction('${tx.id}', 'approve')\"\r\n                                                    class=\"p-2 rounded-lg bg-green-500/10 text-green-500\r\n                                                           hover:bg-green-500/20 transition-colors\">\r\n                                                <i class=\"fas fa-check\"></i>\r\n                                            </button>\r\n                                            <button onclick=\"window.handleTransaction('${tx.id}', 'reject')\"\r\n                                                    class=\"p-2 rounded-lg bg-red-500/10 text-red-500\r\n                                                           hover:bg-red-500/20 transition-colors\">\r\n                                                <i class=\"fas fa-times\"></i>\r\n                                            </button>\r\n                                        ` : ''}\r\n                                    </div>\r\n                                </td>\r\n                            </tr>\r\n                        `).join('') : `\r\n                            <tr>\r\n                                <td colspan=\"5\" class=\"p-8 text-center text-gray-400\">\r\n                                    No transactions found\r\n                                </td>\r\n                            </tr>\r\n                        `}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n    `;\r\n    }\r\n\r\n    renderKycTab(userData) {\r\n        const { kyc_documents = [], kyc_status, kyc_submitted_at, kyc_rejection_reason } = userData;\r\n        const statusColors = {\r\n            approved: 'green',\r\n            pending: 'yellow',\r\n            rejected: 'red',\r\n            not_started: 'gray'\r\n        };\r\n\r\n        return /* html */`\r\n        <div class=\"space-y-6\">\r\n            <!-- KYC Status Header -->\r\n            <div class=\"bg-brand-black/30 rounded-xl p-6\">\r\n                <div class=\"flex items-center justify-between\">\r\n                    <div>\r\n                        <h3 class=\"text-lg font-semibold text-white\">KYC Verification Status</h3>\r\n                        <p class=\"text-gray-400 mt-1\">\r\n                            ${kyc_submitted_at ?\r\n                `Submitted ${this.formatDate(kyc_submitted_at)}` :\r\n                'Not submitted yet'}\r\n                        </p>\r\n                    </div>\r\n                    <span class=\"px-3 py-1 rounded-full text-sm\r\n                        bg-${statusColors[kyc_status]}-500/10 \r\n                        text-${statusColors[kyc_status]}-500\">\r\n                        ${kyc_status?.replace('_', ' ').toUpperCase() || 'NOT STARTED'}\r\n                    </span>\r\n                </div>\r\n                ${kyc_rejection_reason ? `\r\n                    <div class=\"mt-4 p-4 bg-red-500/10 rounded-lg\">\r\n                        <span class=\"text-red-500\">Rejection Reason:</span>\r\n                        <p class=\"text-gray-400 mt-1\">${kyc_rejection_reason}</p>\r\n                    </div>\r\n                ` : ''}\r\n            </div>\r\n\r\n            <!-- KYC Documents Grid -->\r\n            <div class=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n                ${kyc_documents.map(doc => this.renderKycDocument(doc)).join('')}\r\n            </div>\r\n        </div>\r\n    `;\r\n    }\r\n\r\n    renderNotificationsTab(userData) {\r\n        const notifications = userData.notifications || [];\r\n        const typeIcons = {\r\n            deposit: 'arrow-down',\r\n            withdrawal: 'arrow-up',\r\n            swap: 'exchange-alt',\r\n            system: 'bell'\r\n        };\r\n\r\n        return /* html */`\r\n        <div class=\"space-y-6\">\r\n            <!-- Notifications Header -->\r\n            <div class=\"flex justify-between items-center\">\r\n                <h3 class=\"text-lg font-semibold text-white\">Notifications</h3>\r\n                <button onclick=\"window.sendCustomNotification('${userData.id}')\"\r\n                        class=\"px-4 py-2 rounded-xl bg-brand-primary text-white\r\n                               hover:bg-brand-primary/90 transition-colors\">\r\n                    <i class=\"fas fa-plus mr-2\"></i>\r\n                    Send Notification\r\n                </button>\r\n            </div>\r\n\r\n            <!-- Notifications List -->\r\n            <div class=\"space-y-4\">\r\n                ${notifications.length ? notifications.map(notif => /* html */`\r\n                    <div class=\"bg-brand-black/30 rounded-xl p-4 \r\n                               ${!notif.is_read ? 'border-l-4 border-brand-primary' : ''}\">\r\n                        <div class=\"flex items-start justify-between\">\r\n                            <div class=\"flex-1\">\r\n                                <div class=\"flex items-center gap-2\">\r\n                                    <i class=\"fas fa-${typeIcons[notif.type]} text-brand-primary\"></i>\r\n                                    <h4 class=\"font-medium text-white\">${notif.title}</h4>\r\n                                    <span class=\"px-2 py-0.5 rounded-full text-xs capitalize\r\n                                               bg-brand-primary/10 text-brand-primary\">\r\n                                        ${notif.type}\r\n                                    </span>\r\n                                </div>\r\n                                <p class=\"text-gray-400 mt-2\">${notif.message}</p>\r\n                                <div class=\"text-sm text-gray-500 mt-2\">\r\n                                    ${this.formatDate(notif.created_at)}\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"flex items-center gap-2 ml-4\">\r\n                                ${!notif.is_read ? `\r\n                                    <button onclick=\"window.markNotificationRead('${notif.id}')\"\r\n                                            class=\"p-2 rounded-lg bg-brand-primary/10 text-brand-primary\r\n                                                   hover:bg-brand-primary/20 transition-colors\">\r\n                                        <i class=\"fas fa-check\"></i>\r\n                                    </button>\r\n                                ` : ''}\r\n                                <button onclick=\"window.deleteNotification('${notif.id}')\"\r\n                                        class=\"p-2 rounded-lg bg-red-500/10 text-red-500\r\n                                               hover:bg-red-500/20 transition-colors\">\r\n                                    <i class=\"fas fa-trash\"></i>\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                `).join('') : `\r\n                    <div class=\"text-center text-gray-400 py-8\">\r\n                        No notifications found\r\n                    </div>\r\n                `}\r\n            </div>\r\n        </div>\r\n    `;\r\n    }\r\n\r\n    // ...existing code...\r\n\r\n    initializeEventHandlers() {\r\n        // Tab switching\r\n        document.querySelectorAll('[data-tab]').forEach(tab => {\r\n            tab.addEventListener('click', () => this.switchTab(tab.dataset.tab));\r\n        });\r\n\r\n        // Transaction filters\r\n        document.getElementById('txTypeFilter')?.addEventListener('change', this.filterTransactions);\r\n        document.getElementById('txStatusFilter')?.addEventListener('change', this.filterTransactions);\r\n\r\n        // Global window handlers\r\n        window.handleTransaction = this.handleTransaction.bind(this);\r\n        window.editAssetBalance = this.showEditAssetModal.bind(this);\r\n        window.sendCustomNotification = this.showNotificationModal.bind(this);\r\n        window.markNotificationRead = this.markNotificationRead.bind(this);\r\n        window.deleteNotification = this.deleteNotification.bind(this);\r\n        window.viewTransaction = this.showTransactionDetails.bind(this);\r\n    }\r\n\r\n    formatDate(dateString) {\r\n        const date = new Date(dateString);\r\n        return new Intl.DateTimeFormat('en-US', {\r\n            year: 'numeric',\r\n            month: 'short',\r\n            day: 'numeric',\r\n            hour: '2-digit',\r\n            minute: '2-digit'\r\n        }).format(date);\r\n    }\r\n\r\n    async refreshData() {\r\n        this.spinner.show('Refreshing data...');\r\n        try {\r\n            const { data, error } = await this.supabase\r\n                .from('profiles')\r\n                .select(this.getFullUserQuery())\r\n                .eq('id', this.userId)\r\n                .single();\r\n\r\n            if (error) throw error;\r\n            this.userData = data;\r\n            this.render(data);\r\n        } catch (error) {\r\n            console.error('Failed to refresh data:', error);\r\n            toastify({\r\n                text: 'Failed to refresh data',\r\n                background: 'bg-red-500'\r\n            });\r\n        } finally {\r\n            this.spinner.hide();\r\n        }\r\n    }\r\n\r\n    getFullUserQuery() {\r\n        return `\r\n        *,\r\n        trading_accounts (\r\n            id, account_type, balance, leverage, asset_type\r\n        ),\r\n        user_assets (\r\n            id, balance,\r\n            assets:asset_id (\r\n                id, symbol, name, logo_url\r\n            )\r\n        ),\r\n        transactions!transactions_user_id_fkey (\r\n            id, \r\n            type,\r\n            status,\r\n            amount,\r\n            fee,\r\n            fee_percentage,\r\n            wallet_address,\r\n            network,\r\n            screenshot_url,\r\n            created_at,\r\n            completed_at,\r\n            notes,\r\n            metadata,\r\n            currency,\r\n            user_id,\r\n            account_id\r\n        ),\r\n        notifications (\r\n            id, title, message, type, is_read, created_at\r\n        ),\r\n        kyc_documents (\r\n            id,\r\n            document_type,\r\n            document_url,\r\n            status,\r\n            verification_number,\r\n            expiry_date,\r\n            created_at,\r\n            rejection_reason\r\n        )\r\n    `;\r\n    }\r\n\r\n    destroy() {\r\n        // Cleanup event listeners\r\n        window.handleTransaction = null;\r\n        window.editAssetBalance = null;\r\n        window.sendCustomNotification = null;\r\n        window.markNotificationRead = null;\r\n        window.deleteNotification = null;\r\n        window.viewTransaction = null;\r\n    }\r\n}\r\n\r\nclass UserManager {\r\n    async deleteProfile(userId) {\r\n        this.spinner.show('Deleting profile...');\r\n        try {\r\n            const { error } = await this.supabase\r\n                .from('profiles')\r\n                .delete()\r\n                .eq('id', userId);\r\n\r\n            if (error) throw error;\r\n            return true;\r\n        } catch (error) {\r\n            console.error('Profile deletion failed:', error);\r\n            throw error;\r\n        } finally {\r\n            this.spinner.hide();\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport { KycManager, EmailNotifier, AssetManager, BalanceManager, TransactionManager, UserAssetModal, UserDetailsView, UserManager }"],"names":["KycManager","supabase","spinner","userId","status","reason","error","docId","action","doc","docError","docs","allApproved","d","anyRejected","EmailNotifier","sendEmail","data","templateName","template","toastify","TransactionManager","emailNotifier","txId","tx","txError","account","accountError","fee","totalAmount","BalanceManager","accountId","amount","newBalance","AssetManager","assetId","existingAsset","fetchError","updatedAsset","updateError","newAsset","insertError"],"mappings":"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"}