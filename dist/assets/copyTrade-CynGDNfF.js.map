{"version":3,"file":"copyTrade-CynGDNfF.js","sources":["../../src/script/views/user/copyTrade.js"],"sourcesContent":["import auth from '../../utils/auth'\r\nimport reset from '../../utils/reset'\r\nimport Navbar from './components/Navbar'\r\nimport Modal from '../../components/Modal'\r\nimport toastify from '../../components/toastify'\r\nimport { formatMoney } from '../../utils/formatters'\r\nimport supabase from '../../utils/supabaseClients'\r\nimport { handleTradeSession } from './components/handleTrade'\r\nimport { trackPageVisit } from '../../utils/analtics'\r\n\r\n\r\n// Import asset images\r\nimport btcLogo from '../../../images/welcome/btc.png'\r\nimport ethLogo from '../../../images/welcome/eth.png'\r\nimport bnbLogo from '../../../images/welcome/bnb.png'\r\nimport solLogo from '../../../images/welcome/sol.png'\r\n\r\nconst ASSET_LOGOS = {\r\n    'BTC/USDT': btcLogo,\r\n    'ETH/USDT': ethLogo,\r\n    'BNB/USDT': bnbLogo,\r\n    'SOL/USDT': solLogo\r\n}\r\n// In the renderTradeViewStyles function\r\nfunction renderTradeViewStyles() {\r\n    return /* css */ `\r\n        .modal-content {\r\n            min-width: 320px;\r\n            max-width: 90vw;\r\n            max-height: 90vh;\r\n            overflow-y: auto;\r\n        }\r\n\r\n        #tradingview_widget {\r\n            background: #131722;\r\n            min-height: 400px;\r\n            position: relative;\r\n            z-index: 1;\r\n        }\r\n\r\n        .trading-view-container {\r\n            position: relative;\r\n            width: 100%;\r\n            height: 400px;\r\n            overflow: hidden;\r\n        }\r\n    `\r\n}\r\n\r\n// Update the loadTradingViewScript function\r\nfunction loadTradingViewScript() {\r\n    return new Promise((resolve) => {\r\n        if (window.TradingView) {\r\n            resolve(window.TradingView);\r\n            return;\r\n        }\r\n\r\n        const script = document.createElement('script');\r\n        script.type = 'text/javascript';\r\n        script.src = \"https://s3.tradingview.com/tv.js\";\r\n        script.async = true;\r\n\r\n        script.onload = () => {\r\n            resolve(window.TradingView);\r\n        };\r\n\r\n        script.onerror = (err) => {\r\n            console.error('Failed to load TradingView:', err);\r\n            resolve(null);\r\n        };\r\n\r\n        document.head.appendChild(script);\r\n    });\r\n}\r\n\r\nconst copyTrade = async () => {\r\n    const authCheck = await auth.check('copyTrade')\r\n    if (!authCheck) return { html: '', pageEvents: () => { } }\r\n\r\n    reset('Olymp AI | Copy Trading')\r\n    await trackPageVisit()\r\n    const { html: navbar, pageEvents: navEvents } = Navbar()\r\n\r\n    // Get user's trading account info\r\n    const { data: { user } } = await supabase.auth.getUser()\r\n    const { data: tradingAccount } = await supabase\r\n        .from('trading_accounts')\r\n        .select('balance')\r\n        .eq('user_id', user.id)\r\n        .eq('account_type', 'live')\r\n        .single()\r\n\r\n    // Fetch trading bots with their latest trades\r\n    const { data: bots, error: botsError } = await supabase\r\n        .from('trading_bots')\r\n        .select(`\r\n            *,\r\n            creator:profiles(full_name),\r\n            bot_trades(\r\n                pair,\r\n                pnl,\r\n                created_at,\r\n                status\r\n            )\r\n        `)\r\n        .eq('status', 'active')\r\n        .order('total_profit', { ascending: false })\r\n\r\n    if (botsError) {\r\n        toastify({\r\n            text: 'Error loading trading bots',\r\n            background: 'bg-red-500/10',\r\n            icon: 'fas fa-exclamation-circle'\r\n        })\r\n        return { html: '', pageEvents: () => { } }\r\n    }\r\n\r\n    // Format bot data\r\n    const formattedBots = bots.map(bot => ({\r\n        ...bot,\r\n        lastTrades: bot.bot_trades\r\n            .sort((a, b) => new Date(b.created_at) - new Date(a.created_at))\r\n            .slice(0, 3)\r\n            .map(trade => ({\r\n                pair: trade.pair,\r\n                pnl: trade.pnl,\r\n                status: trade.status,\r\n                time: new Intl.RelativeTimeFormat('en').format(\r\n                    Math.round((new Date(trade.created_at) - new Date()) / (1000 * 60)),\r\n                    'minutes'\r\n                )\r\n            }))\r\n    }))\r\n\r\n    function showCopyTradeModal(bot) {\r\n        loadTradingViewScript().then(() => {\r\n            const symbol = bot.lastTrades[0]?.pair?.replace('/', '') || 'BTCUSDT';\r\n            const modal = new Modal({\r\n                title: `Copy Trade ${bot.name}`,\r\n                content: /* html */`\r\n                <div class=\"space-y-6\">\r\n                    <div class=\"w-full h-[400px] bg-[#131722] rounded-xl overflow-hidden\" \r\n                         style=\"position:relative;\">\r\n                        <div id=\"tradingview_widget\" \r\n                            style=\"width:100%; height:100%; position:absolute; top:0; left:0;\">\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    <div class=\"flex items-center justify-between p-4 bg-brand-primary/10 rounded-xl\">\r\n                        <div class=\"flex items-center gap-3\">\r\n                            <img src=\"${ASSET_LOGOS[bot.lastTrades[0]?.pair] || btcLogo}\" \r\n                                 class=\"w-10 h-10 rounded-full\" alt=\"${bot.name}\">\r\n                            <div>\r\n                                <h4 class=\"text-white font-medium\">${bot.name}</h4>\r\n                                <p class=\"text-sm text-gray-400\">Win Rate: ${bot.win_rate}%</p>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"text-right\">\r\n                            <p class=\"text-${bot.total_profit >= 0 ? 'green' : 'red'}-500 font-medium\">\r\n                                ${formatMoney(bot.total_profit)}\r\n                            </p>\r\n                            <p class=\"text-sm text-gray-400\">${bot.total_trades} trades</p>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div class=\"grid grid-cols-2 gap-4\">\r\n                        <div>\r\n                            <label class=\"text-sm text-gray-400 mb-2 block\">Allocation Amount (USDT)</label>\r\n                            <input type=\"number\" id=\"allocation\" min=\"${bot.min_allocation || 10}\" max=\"${Math.min(bot.max_allocation || 10000, tradingAccount?.balance || 0)}\"\r\n                                   class=\"w-full bg-brand-black/50 border border-brand-primary/20 rounded-xl px-4 py-3\r\n                                          text-white focus:border-brand-primary transition-colors\"\r\n                                   placeholder=\"Enter amount...\">\r\n                            <p class=\"text-xs text-gray-400 mt-1\">Available: ${formatMoney(tradingAccount?.balance || 0)}</p>\r\n                        </div>\r\n\r\n                        <div>\r\n                            <label class=\"text-sm text-gray-400 mb-2 block\">Stop Loss (%)</label>\r\n                            <input type=\"number\" id=\"stopLoss\" min=\"1\" max=\"100\"\r\n                                   class=\"w-full bg-brand-black/50 border border-brand-primary/20 rounded-xl px-4 py-3\r\n                                          text-white focus:border-brand-primary transition-colors\"\r\n                                   placeholder=\"Enter stop loss...\">\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div class=\"p-4 bg-yellow-500/10 rounded-xl\">\r\n                        <h4 class=\"text-yellow-500 font-medium mb-2\">Risk Summary</h4>\r\n                        <ul class=\"text-sm text-gray-400 space-y-2\">\r\n                            <li>• Maximum possible loss: <span id=\"maxLoss\">-</span></li>\r\n                            <li>• Estimated monthly return: <span id=\"estReturn\">-</span></li>\r\n                            <li>• Trading fee: 2% of profits</li>\r\n                        </ul>\r\n                    </div>\r\n\r\n                    <div id=\"tradeInfo\"></div>\r\n                </div>\r\n            `,\r\n                size: 'lg',\r\n                actions: [\r\n                    {\r\n                        text: 'Start Copy Trading',\r\n                        primary: true,\r\n                        onClick: (close) => handleCopyTradeSubmit(bot, close)\r\n                    }\r\n                ],\r\n            })\r\n\r\n            modal.show()\r\n\r\n            // Initialize TradingView after modal is shown\r\n            requestAnimationFrame(() => {\r\n                try {\r\n                    initializeTradingView(symbol);\r\n                    setupCopyTradeCalculations(bot);\r\n                } catch (err) {\r\n                    console.error('Failed to initialize trading view:', err);\r\n                    const container = document.getElementById('tradingview_widget');\r\n                    if (container) {\r\n                        container.innerHTML = '<div class=\"p-4 text-center text-red-500\">Failed to load chart</div>';\r\n                    }\r\n                }\r\n            });\r\n\r\n        })\r\n    }\r\n    // Update the initializeTradingView function\r\n    function initializeTradingView(symbol = 'BTCUSDT') {\r\n\r\n        const container = document.getElementById('tradingview_widget');\r\n        if (!container) {\r\n            console.error('Container not found');\r\n            return;\r\n        }\r\n\r\n        // Clear existing content\r\n        container.innerHTML = '';\r\n\r\n        try {\r\n            const widget = new window.TradingView.widget({\r\n                container_id: \"tradingview_widget\",\r\n                autosize: false, // Changed to false\r\n                width: container.offsetWidth,\r\n                height: container.offsetHeight,\r\n                symbol: `BINANCE:${symbol}`,\r\n                interval: \"15\",\r\n                timezone: \"Etc/UTC\",\r\n                theme: \"dark\",\r\n                style: \"1\",\r\n                locale: \"en\",\r\n                toolbar_bg: \"#131722\",\r\n                enable_publishing: false,\r\n                hide_side_toolbar: false,\r\n                allow_symbol_change: true,\r\n                save_image: false,\r\n                hideideas: true\r\n            });\r\n\r\n            return widget;\r\n        } catch (error) {\r\n            console.error('Widget creation error:', error);\r\n            container.innerHTML = '<div class=\"p-4 text-center text-red-500\">Failed to initialize chart</div>';\r\n        }\r\n    }\r\n\r\n    function setupCopyTradeCalculations(bot) {\r\n        const allocation = document.getElementById('allocation')\r\n        const stopLoss = document.getElementById('stopLoss')\r\n        const maxLoss = document.getElementById('maxLoss')\r\n        const estReturn = document.getElementById('estReturn')\r\n\r\n        function updateCalculations() {\r\n            const amount = parseFloat(allocation.value) || 0\r\n            const stop = parseFloat(stopLoss.value) || 0\r\n            maxLoss.textContent = formatMoney(-(amount * (stop / 100)))\r\n            estReturn.textContent = formatMoney(amount * 0.15) // 15% monthly estimate\r\n        }\r\n\r\n        allocation?.addEventListener('input', updateCalculations)\r\n        stopLoss?.addEventListener('input', updateCalculations)\r\n    }\r\n\r\n    // Modify handleCopyTradeSubmit to use confirmation\r\n    async function handleCopyTradeSubmit(bot, close) {\r\n        const allocation = document.getElementById('allocation')?.value\r\n        const stopLoss = document.getElementById('stopLoss')?.value\r\n\r\n        if (!allocation || !stopLoss) {\r\n            toastify({\r\n                text: 'Please fill in all fields',\r\n                background: 'bg-red-500/10',\r\n                icon: 'fas fa-exclamation-circle'\r\n            })\r\n            return\r\n        }\r\n\r\n        // Show confirmation modal\r\n        const confirmed = await showConfirmationModal(bot, parseFloat(allocation), parseFloat(stopLoss))\r\n        if (!confirmed) return\r\n\r\n        const { data: { user } } = await supabase.auth.getUser()\r\n\r\n        // Create subscription\r\n        const { error: subError } = await supabase\r\n            .from('copy_trade_subscriptions')\r\n            .insert({\r\n                user_id: user.id,\r\n                bot_id: bot.id,\r\n                allocation_amount: parseFloat(allocation),\r\n                stop_loss: parseFloat(stopLoss),\r\n                status: 'active',\r\n                created_at: new Date().toISOString()\r\n            })\r\n\r\n        if (subError) {\r\n            toastify({\r\n                text: 'Failed to start copy trading',\r\n                background: 'bg-red-500/10',\r\n                icon: 'fas fa-exclamation-circle'\r\n            })\r\n            return\r\n        }\r\n\r\n        toastify({\r\n            text: `Successfully started copy trading ${bot.name}`,\r\n            background: 'bg-green-500/10',\r\n            icon: 'fas fa-check-circle'\r\n        })\r\n\r\n        // Show success modal with next steps\r\n        const successModal = new Modal({\r\n            title: 'Copy Trade Started',\r\n            content: /* html */`\r\n            <div class=\"space-y-6 text-center\">\r\n                <div class=\"text-green-500\">\r\n                    <svg class=\"w-16 h-16 mx-auto\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" \r\n                              d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"/>\r\n                    </svg>\r\n                </div>\r\n                <h3 class=\"text-xl font-medium text-white\">Successfully Started Copy Trading</h3>\r\n                <p class=\"text-gray-400\">\r\n                    Your copy trade has been set up successfully. You can monitor your positions\r\n                    and performance in the Copy Trading dashboard.\r\n                </p>\r\n                <button onclick=\"window.location.href='/copy-trade'\"\r\n                        class=\"px-6 py-3 bg-brand-primary text-white rounded-xl hover:bg-opacity-90\">\r\n                    View Copy Trading Dashboard\r\n                </button>\r\n            </div>\r\n        `\r\n        })\r\n\r\n        close()\r\n        successModal.show()\r\n    }\r\n\r\n    async function showConfirmationModal(bot, allocation, stopLoss) {\r\n        return new Promise((resolve) => {\r\n            const modal = new Modal({\r\n                title: 'Confirm Copy Trade',\r\n                content: /* html */`\r\n                <div class=\"space-y-6\">\r\n                    <div class=\"p-4 bg-brand-primary/10 rounded-xl\">\r\n                        <h4 class=\"text-lg font-medium text-white mb-2\">Summary</h4>\r\n                        <ul class=\"space-y-2 text-sm text-gray-400\">\r\n                            <li class=\"flex justify-between\">\r\n                                <span>Bot:</span>\r\n                                <span class=\"text-white\">${bot.name}</span>\r\n                            </li>\r\n                            <li class=\"flex justify-between\">\r\n                                <span>Allocation:</span>\r\n                                <span class=\"text-white\">${formatMoney(allocation)}</span>\r\n                            </li>\r\n                            <li class=\"flex justify-between\">\r\n                                <span>Stop Loss:</span>\r\n                                <span class=\"text-white\">${stopLoss}%</span>\r\n                            </li>\r\n                            <li class=\"flex justify-between\">\r\n                                <span>Max Loss:</span>\r\n                                <span class=\"text-red-500\">${formatMoney(-(allocation * (stopLoss / 100)))}</span>\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n                    \r\n                    <div class=\"bg-yellow-500/10 p-4 rounded-xl\">\r\n                        <h4 class=\"text-yellow-500 font-medium mb-2\">Important Notice</h4>\r\n                        <p class=\"text-sm text-gray-400\">\r\n                            By confirming, you agree to allocate funds to copy this trader's positions.\r\n                            The stop loss will automatically close positions if losses exceed ${stopLoss}%.\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n            `,\r\n                actions: [\r\n                    {\r\n                        text: 'Cancel',\r\n                        onClick: (close) => {\r\n                            close()\r\n                            resolve(false)\r\n                        }\r\n                    },\r\n                    {\r\n                        text: 'Confirm Copy Trade',\r\n                        primary: true,\r\n                        onClick: async (close) => {\r\n                            close()\r\n                            resolve(true)\r\n                        }\r\n                    }\r\n                ]\r\n            })\r\n            modal.show()\r\n        })\r\n    }\r\n\r\n    function renderBotCard(bot) {\r\n        return /* html */`\r\n            <div class=\"bg-brand-black/50 backdrop-blur-xl rounded-xl border border-brand-primary/10\r\n                        hover:border-brand-primary/30 transition-all duration-300\">\r\n                <div class=\"p-6 space-y-4\">\r\n                    <div class=\"flex items-center justify-between\">\r\n                        <div class=\"flex items-center gap-3\">\r\n                            <img src=\"${ASSET_LOGOS[bot.lastTrades[0]?.pair] || btcLogo}\" \r\n                                 class=\"w-10 h-10 rounded-full\" alt=\"${bot.name}\">\r\n                            <div>\r\n                                <h3 class=\"text-lg font-medium text-white\">${bot.name}</h3>\r\n                                <p class=\"text-sm text-gray-400\">Created by ${bot.creator?.full_name || 'N/A'}</p>\r\n                            </div>\r\n                        </div>\r\n                        <span class=\"px-3 py-1 rounded-full text-xs bg-green-500/10 text-green-500\">\r\n                            ${bot.status}\r\n                        </span>\r\n                    </div>\r\n                    <div class=\"grid grid-cols-3 gap-4\">\r\n                        <div>\r\n                            <p class=\"text-gray-400 text-sm\">Profit</p>\r\n                            <p class=\"text-${bot.total_profit >= 0 ? 'green' : 'red'}-500 font-medium\">\r\n                                ${formatMoney(bot.total_profit)}\r\n                            </p>\r\n                        </div>\r\n                        <div>\r\n                            <p class=\"text-gray-400 text-sm\">Win Rate</p>\r\n                            <p class=\"text-white font-medium\">${bot.win_rate}%</p>\r\n                        </div>\r\n                        <div>\r\n                            <p class=\"text-gray-400 text-sm\">Trades</p>\r\n                            <p class=\"text-white font-medium\">${bot.total_trades}</p>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"space-y-2\">\r\n                        <p class=\"text-sm text-gray-400\">Recent Trades</p>\r\n                        ${bot.lastTrades.map(trade => `\r\n                            <div class=\"flex items-center justify-between text-sm\">\r\n                                <span class=\"text-white\">${trade.pair}</span>\r\n                                <span class=\"text-${trade.pnl >= 0 ? 'green' : 'red'}-500\">\r\n                                    ${formatMoney(trade.pnl)}\r\n                                </span>\r\n                            </div>\r\n                        `).join('')}\r\n                    </div>\r\n                    <button onclick=\"window.showCopyTradeModal('${bot.id}')\"\r\n                            class=\"w-full px-4 py-3 rounded-xl bg-brand-primary text-white font-medium\r\n                                   hover:bg-opacity-90 transition-colors\">\r\n                        Copy Trade\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        `\r\n    }\r\n\r\n    function pageEvents() {\r\n        navEvents();\r\n        loadTradingViewScript(); // Preload the script\r\n        window.showCopyTradeModal = (botId) => {\r\n            const bot = formattedBots.find(b => b.id === botId);\r\n            if (bot) showCopyTradeModal(bot);\r\n        };\r\n    }\r\n\r\n    return {\r\n        html: /* html */`\r\n            ${navbar}\r\n            <main class=\"main-scroll-view\">\r\n                <div class=\"p-4 md:p-8 max-w-7xl mx-auto\">\r\n                    <div class=\"mb-8\">\r\n                        <h1 class=\"text-2xl font-bold text-white mb-2\">Copy Trading</h1>\r\n                        <p class=\"text-gray-400\">Follow and copy successful traders automatically</p>\r\n                    </div>\r\n                    <div class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\r\n                        <style>\r\n                            ${renderTradeViewStyles()}\r\n                        </style>\r\n                        ${formattedBots.map(renderBotCard).join('')}\r\n                    </div>\r\n                </div>\r\n            </main>\r\n        `,\r\n        pageEvents\r\n    }\r\n}\r\n\r\nexport default copyTrade"],"names":["ASSET_LOGOS","btcLogo","ethLogo","bnbLogo","solLogo","renderTradeViewStyles","loadTradingViewScript","resolve","script","err","copyTrade","auth","reset","trackPageVisit","navbar","navEvents","Navbar","user","supabase","tradingAccount","bots","botsError","toastify","formattedBots","bot","a","b","trade","showCopyTradeModal","symbol","Modal","formatMoney","close","handleCopyTradeSubmit","initializeTradingView","setupCopyTradeCalculations","container","error","allocation","stopLoss","maxLoss","estReturn","updateCalculations","amount","stop","showConfirmationModal","subError","successModal","renderBotCard","pageEvents","botId"],"mappings":"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"}