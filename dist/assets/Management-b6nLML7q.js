import{t as p}from"./toastify-C88f8oFV.js";import{s as u}from"./send-email-89Z52C2k.js";class f{constructor(a,t){this.supabase=a,this.spinner=t}async updateKycStatus(a,t,e=null){this.spinner.show("Updating KYC status...");try{const{error:s}=await this.supabase.from("profiles").update({kyc_status:t,kyc_rejection_reason:e,kyc_approved_at:t==="approved"?new Date().toISOString():null}).eq("id",a);if(s)throw s;return!0}catch(s){return console.error("KYC status update failed:",s),!1}finally{this.spinner.hide()}}async handleDocumentReview(a,t,e=null){this.spinner.show(`${t==="approve"?"Approving":"Rejecting"} document...`);try{const{data:s,error:r}=await this.supabase.from("kyc_documents").update({status:t==="approve"?"approved":"rejected",rejection_reason:e,reviewed_at:new Date().toISOString(),verified_at:t==="approve"?new Date().toISOString():null}).eq("id",a).select("*, user:user_id(*)").single();if(r)throw r;const{data:i}=await this.supabase.from("kyc_documents").select("status").eq("user_id",s.user_id),n=i.every(o=>o.status==="approved"),c=i.some(o=>o.status==="rejected");return await this.updateKycStatus(s.user_id,n?"approved":c?"rejected":"pending",e),s}catch(s){throw console.error("Document review failed:",s),s}finally{this.spinner.hide()}}}class m{constructor(a,t){this.sendEmail=a,this.spinner=t,this.templates={kyc_approved:{subject:"KYC Verification Approved",body:e=>`
                    <h2>Hello ${e.name},</h2>
                    <p>Your KYC verification has been successfully approved.</p>
                    <p>You now have full access to all platform features.</p>
                `},kyc_rejected:{subject:"KYC Verification Rejected",body:e=>`
                    <h2>Hello ${e.name},</h2>
                    <p>Your KYC verification has been rejected.</p>
                    <p>Reason: ${e.reason}</p>
                    <p>Please review and resubmit your documents.</p>
                `},balance_updated:{subject:"Account Balance Updated",body:e=>`
                    <h2>Hello ${e.name},</h2>
                    <p>Your ${e.accountType} account balance has been updated.</p>
                    <p>Action: ${e.action}</p>
                    <p>Amount: $${e.amount.toLocaleString()}</p>
                    <p>New Balance: $${e.newBalance.toLocaleString()}</p>
                `},asset_updated:{subject:"Asset Balance Updated",body:e=>`
                    <h2>Hello ${e.name},</h2>
                    <p>Your ${e.asset} balance has been updated.</p>
                    <p>Action: ${e.action}</p>
                    <p>Amount: ${e.amount} ${e.asset}</p>
                    <p>New Balance: ${e.newBalance} ${e.asset}</p>
                `},transaction_approved:{subject:"Transaction Approved",body:e=>`
                    <h2>Hello ${e.name},</h2>
                    <p>Your ${e.type} transaction has been approved.</p>
                    <p>Amount: $${e.amount.toLocaleString()}</p>
                    ${e.fee?`<p>Fee: $${e.fee.toLocaleString()}</p>`:""}
                `},transaction_rejected:{subject:"Transaction Rejected",body:e=>`
                    <h2>Hello ${e.name},</h2>
                    <p>Your ${e.type} transaction has been rejected.</p>
                    <p>Amount: $${e.amount.toLocaleString()}</p>
                `}}}async sendTemplateEmail(a,t){if(!this.templates[a])throw new Error(`Email template '${a}' not found`);const e=this.templates[a];try{this.spinner.show("Sending email notification..."),await u({to:t.email,subject:e.subject,html:e.body(t)}),p({text:"Email sent successfully",icon:"fas fa-check"})}catch(s){console.error("Failed to send email:",s),p({text:"Failed to send email",icon:"fas fa-times",background:"bg-red-500"})}finally{this.spinner.hide()}}}class w{constructor(a,t,e){this.supabase=a,this.spinner=t,this.emailNotifier=e,this.FEE_PERCENTAGE=.1}async handleTransaction(a,t){this.spinner.show(`${t==="approve"?"Approving":"Rejecting"} transaction...`);try{const{data:e,error:s}=await this.supabase.from("transactions").select(`
                *,
                profiles!transactions_user_id_fkey (
                    id, email, full_name
                )
            `).eq("id",a).single();if(s)throw s;const{data:r,error:i}=await this.supabase.from("trading_accounts").select("*").eq("user_id",e.user_id).eq("account_type","live").single();if(i)throw console.error("Account fetch error:",i),new Error("Account not found for this transaction");return t==="approve"?await this.approveTransaction({...e,trading_accounts:r}):await this.rejectTransaction(e),!0}catch(e){throw console.error("Transaction handling failed:",e),e}finally{this.spinner.hide()}}async approveTransaction(a){const t=a.type==="withdrawal"?a.amount*this.FEE_PERCENTAGE:0,e=a.type==="withdrawal"?a.amount+t:a.amount,{data:s,error:r}=await this.supabase.from("trading_accounts").select("*").eq("user_id",a.user_id).eq("account_type","live").single();if(r)throw new Error("Could not find user trading account");if(a.type==="withdrawal"&&(!s||s.balance<e))throw p({text:`Insufficient balance for withdrawal. Available: $${s?.balance?.toLocaleString()||0}, Required: $${e.toLocaleString()}`,icon:"fas fa-exclamation-circle"}),new Error(`Insufficient balance for withdrawal. Available: $${s?.balance?.toLocaleString()||0}, Required: $${e.toLocaleString()}`);const{error:i}=await this.supabase.rpc("handle_transaction",{p_transaction_id:a.id,p_status:"completed",p_amount:a.amount,p_fee:t});if(i)throw i;await this.emailNotifier.sendTemplateEmail("transaction_approved",{email:a.profiles.email,name:a.profiles.full_name,type:a.type,amount:a.amount,fee:t})}async rejectTransaction(a){const{error:t}=await this.supabase.from("transactions").update({status:"failed",completed_at:new Date().toISOString()}).eq("id",a.id);if(t)throw t;await this.emailNotifier.sendTemplateEmail("transaction_rejected",{email:a.profiles.email,name:a.profiles.full_name,type:a.type,amount:a.amount})}}class b{constructor(a,t,e){this.supabase=a,this.spinner=t,this.emailNotifier=e}async updateBalance(a,t,e,s){this.spinner.show("Updating balance...");try{const{data:r,error:i}=await this.supabase.from("trading_accounts").select("*, profiles:user_id(*)").eq("id",a).single();if(i)throw i;let n;switch(t){case"set":n=e;break;case"add":n=r.balance+e;break;case"subtract":if(r.balance<e)throw new Error("Insufficient balance");n=r.balance-e;break;default:throw new Error("Invalid action")}const{error:c}=await this.supabase.from("trading_accounts").update({balance:n}).eq("id",a);if(c)throw c;return await this.logBalanceChange(r,t,e,n,s),this.emailNotifier&&r.profiles&&await this.emailNotifier.sendTemplateEmail("balance_updated",{email:r.profiles.email,name:r.profiles.full_name,amount:e,action:t,newBalance:n}),!0}catch(r){throw console.error("Balance update failed:",r),r}finally{this.spinner.hide()}}async logBalanceChange(a,t,e,s,r){await this.supabase.from("balance_history").insert({account_id:a.id,user_id:a.user_id,action_type:t,amount:e,previous_balance:a.balance,new_balance:s,reason:r,created_at:new Date().toISOString()})}}class _{constructor(a,t,e){this.supabase=a,this.spinner=t,this.emailNotifier=e}async updateUserAsset(a,t,e,s="set"){this.spinner.show("Updating asset balance...");try{const{data:r,error:i}=await this.supabase.from("user_assets").select("*, assets(*), profiles:user_id(*)").eq("user_id",a).eq("asset_id",t).maybeSingle();if(i)throw i;let n;if(r){switch(s){case"add":n=r.balance+e;break;case"subtract":if(r.balance<e)throw new Error("Insufficient balance");n=r.balance-e;break;case"set":default:n=e}const{data:c,error:o}=await this.supabase.from("user_assets").update({balance:n}).eq("id",r.id).select("*, assets(*), profiles:user_id(*)").single();if(o)throw o;return c}else{const{data:c,error:o}=await this.supabase.from("user_assets").insert({user_id:a,asset_id:t,balance:e}).select("*, assets(*), profiles:user_id(*)").single();if(o)throw o;return c}}catch(r){throw console.error("Asset update failed:",r),r}finally{this.spinner.hide()}}}export{_ as AssetManager,b as BalanceManager,m as EmailNotifier,f as KycManager,w as TransactionManager};
//# sourceMappingURL=Management-b6nLML7q.js.map
