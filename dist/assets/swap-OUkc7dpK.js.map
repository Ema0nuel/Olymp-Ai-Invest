{"version":3,"file":"swap-OUkc7dpK.js","sources":["../../src/script/views/user/swap.js"],"sourcesContent":["import auth from '../../utils/auth'\r\nimport reset from '../../utils/reset'\r\nimport Navbar from './components/Navbar'\r\nimport supabase from '../../utils/supabaseClients'\r\nimport { createNotification } from '../../utils/notifications'\r\nimport toastify from '../../components/toastify'\r\nimport spinner from '../../utils/spinner'\r\nimport Modal from '../../components/Modal'\r\nimport { loadPage } from '../../routes/router'\r\nimport { trackPageVisit } from '../../utils/analtics'\r\n\r\nconst swap = async () => {\r\n    const authCheck = await auth.check('swap')\r\n    if (!authCheck) return { html: '', pageEvents: () => { } }\r\n\r\n    reset('Olymp AI | Swap Assets')\r\n    await trackPageVisit()\r\n    const { html: navbar, pageEvents: navEvents } = Navbar()\r\n\r\n    // State\r\n    let userAssets = []\r\n    let allAssets = []\r\n    let userMainBalance = 0\r\n    let selectedFromAsset = null\r\n    let selectedToAsset = null\r\n    let cryptoPrices = {}\r\n    let swapAmount = 0\r\n    let isProcessing = false\r\n\r\n    // Fetch crypto prices\r\n    async function fetchCryptoPrices() {\r\n        try {\r\n            const res = await fetch(\r\n                \"https://api.coingecko.com/api/v3/simple/price?ids=bitcoin,ethereum,tether,binancecoin&vs_currencies=usd\"\r\n            )\r\n            const data = await res.json()\r\n\r\n            cryptoPrices = {\r\n                BTC: data.bitcoin.usd,\r\n                ETH: data.ethereum.usd,\r\n                USDT: data.tether.usd,\r\n                BNB: data.binancecoin.usd,\r\n            }\r\n\r\n            return cryptoPrices\r\n        } catch (err) {\r\n            toastify({\r\n                text: 'Failed to fetch current prices',\r\n                background: 'bg-red-500'\r\n            })\r\n        }\r\n    }\r\n\r\n    // Initialize data\r\n    async function initializeData() {\r\n        try {\r\n            spinner.start()\r\n            await Promise.all([\r\n                fetchCryptoPrices(),\r\n                fetchUserAssets()\r\n            ])\r\n        } catch (error) {\r\n            console.error('Initialization error:', error)\r\n        } finally {\r\n            spinner.stop()\r\n        }\r\n    }\r\n\r\n    // Fetch user assets and balance\r\n    async function fetchUserAssets() {\r\n        try {\r\n            const { data: { session } } = await supabase.auth.getSession()\r\n            if (!session) throw new Error('Not authenticated')\r\n\r\n            const [userAssetsResult, allAssetsResult, balanceResult] = await Promise.all([\r\n                supabase\r\n                    .from('user_assets')\r\n                    .select(`\r\n                        *,\r\n                        assets:asset_id (\r\n                            id,\r\n                            symbol,\r\n                            name,\r\n                            network,\r\n                            logo_url\r\n                        )\r\n                    `)\r\n                    .eq('user_id', session.user.id),\r\n                supabase\r\n                    .from('assets')\r\n                    .select('*'),\r\n                supabase\r\n                    .from('trading_accounts')\r\n                    .select('balance')\r\n                    .eq('user_id', session.user.id)\r\n                    .eq('account_type', 'live')\r\n                    .single()\r\n            ])\r\n\r\n            if (userAssetsResult.error) throw userAssetsResult.error\r\n            if (allAssetsResult.error) throw allAssetsResult.error\r\n            if (balanceResult.error) throw balanceResult.error\r\n\r\n            userAssets = userAssetsResult.data || []\r\n            allAssets = allAssetsResult.data || []\r\n            userMainBalance = balanceResult.data?.balance || 0\r\n\r\n            renderAssetSelectors()\r\n        } catch (error) {\r\n            console.error('Fetch assets error:', error)\r\n            toastify({\r\n                text: 'Failed to load assets',\r\n                background: 'bg-red-500'\r\n            })\r\n        }\r\n    }\r\n\r\n    // Calculate exchange rate\r\n    function calculateExchangeRate() {\r\n        if (!selectedFromAsset || !selectedToAsset || !cryptoPrices) return 0\r\n\r\n        // If swapping from main balance (USD) to asset\r\n        if (selectedFromAsset === 'balance') {\r\n            return 1 / cryptoPrices[selectedToAsset.symbol]\r\n        }\r\n\r\n        // If swapping from asset to main balance (USD)\r\n        if (selectedToAsset === 'balance') {\r\n            return cryptoPrices[selectedFromAsset.assets.symbol]\r\n        }\r\n\r\n        // Asset to asset swap\r\n        const fromPrice = cryptoPrices[selectedFromAsset.assets.symbol]\r\n        const toPrice = cryptoPrices[selectedToAsset.symbol]\r\n        return toPrice ? fromPrice / toPrice : 0\r\n    }\r\n\r\n    // Update swap preview\r\n    function updateSwapPreview() {\r\n        const previewElement = document.getElementById('swapPreview')\r\n        const amount = document.getElementById('swapAmount')?.value || 0\r\n        swapAmount = parseFloat(amount)\r\n\r\n        if (!selectedFromAsset || !selectedToAsset || !amount) {\r\n            previewElement.innerHTML = ''\r\n            return\r\n        }\r\n\r\n        const rate = calculateExchangeRate()\r\n        const receivedAmount = amount * rate\r\n        const fee = amount * 0.01 // 1% fee\r\n\r\n        const fromSymbol = selectedFromAsset === 'balance' ? 'USD' : selectedFromAsset.assets.symbol\r\n        const toSymbol = selectedToAsset === 'balance' ? 'USD' : selectedToAsset.symbol\r\n\r\n        previewElement.innerHTML = `\r\n            <div class=\"space-y-4 p-4 bg-brand-black/30 rounded-xl border border-brand-primary/10\">\r\n                <div class=\"flex justify-between text-sm\">\r\n                    <span class=\"text-gray-400\">Exchange Rate</span>\r\n                    <span class=\"text-white\">\r\n                        1 ${fromSymbol} = ${rate.toFixed(8)} ${toSymbol}\r\n                    </span>\r\n                </div>\r\n                <div class=\"flex justify-between text-sm\">\r\n                    <span class=\"text-gray-400\">Fee (1%)</span>\r\n                    <span class=\"text-white\">\r\n                        ${fee.toFixed(8)} ${fromSymbol}\r\n                    </span>\r\n                </div>\r\n                <div class=\"flex justify-between text-sm\">\r\n                    <span class=\"text-gray-400\">You'll Receive</span>\r\n                    <span class=\"text-green-500\">\r\n                        ${receivedAmount.toFixed(8)} ${toSymbol}\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        `\r\n    }\r\n\r\n    // Handle asset selections\r\n    function handleFromAssetSelect(e) {\r\n        const value = e.target.value\r\n        selectedFromAsset = value === 'balance' ? 'balance' :\r\n            userAssets.find(a => a.assets.id === value)\r\n        updateSwapPreview()\r\n\r\n        // Disable selecting same asset in \"To\" dropdown\r\n        const toSelect = document.getElementById('toAsset')\r\n        Array.from(toSelect.options).forEach(option => {\r\n            option.disabled = option.value === value\r\n        })\r\n    }\r\n\r\n    function handleToAssetSelect(e) {\r\n        const value = e.target.value\r\n        selectedToAsset = value === 'balance' ? 'balance' :\r\n            allAssets.find(a => a.id === value)\r\n        updateSwapPreview()\r\n    }\r\n\r\n    // Render asset selectors\r\n    function renderAssetSelectors() {\r\n        const fromSelect = document.getElementById('fromAsset')\r\n        const toSelect = document.getElementById('toAsset')\r\n\r\n        if (!fromSelect || !toSelect) return\r\n\r\n        fromSelect.innerHTML = `\r\n            <option value=\"\" disabled selected>Select Source</option>\r\n            <option value=\"balance\">Main Balance - $${userMainBalance.toFixed(2)} USD</option>\r\n            ${userAssets.map(a => `\r\n                <option value=\"${a.assets.id}\">\r\n                    ${a.assets.symbol} - Balance: ${parseFloat(a.balance).toFixed(8)}\r\n                </option>\r\n            `).join('')}\r\n        `\r\n\r\n        toSelect.innerHTML = `\r\n            <option value=\"\" disabled selected>Select Destination</option>\r\n            <option value=\"balance\">Main Balance (USD)</option>\r\n            ${allAssets.map(a => `\r\n                <option value=\"${a.id}\">${a.symbol}</option>\r\n            `).join('')}\r\n        `\r\n    }\r\n\r\n    // Process swap\r\n    async function processSwap(e) {\r\n        e.preventDefault()\r\n\r\n        if (isProcessing) return\r\n\r\n        try {\r\n            isProcessing = true\r\n            spinner.start()\r\n            const { data: { session } } = await supabase.auth.getSession()\r\n            if (!session) throw new Error('Not authenticated')\r\n\r\n            if (!selectedFromAsset || !selectedToAsset || !swapAmount) {\r\n                throw new Error('Please fill all fields')\r\n            }\r\n\r\n            // Check balance\r\n            if (selectedFromAsset === 'balance') {\r\n                if (userMainBalance < swapAmount) {\r\n                    throw new Error('Insufficient main balance')\r\n                }\r\n            } else {\r\n                if (selectedFromAsset.balance < swapAmount) {\r\n                    throw new Error('Insufficient asset balance')\r\n                }\r\n            }\r\n\r\n            spinner.stop()\r\n            isProcessing = false\r\n            // Verify PIN\r\n            const pin = await new Promise((resolve) => {\r\n                const modal = new Modal({\r\n                    title: 'Confirm Swap',\r\n                    content: `\r\n                        <div class=\"space-y-4 text-center\">\r\n                            <i class=\"fas fa-lock text-4xl text-brand-primary\"></i>\r\n                            <input type=\"password\" \r\n                                   id=\"txPin\"\r\n                                   class=\"w-full p-4 bg-brand-black/50 border border-brand-primary/20 rounded-xl text-white\"\r\n                                   placeholder=\"Enter 6-digit PIN\"\r\n                                   maxlength=\"6\"\r\n                                   pattern=\"[0-9]*\">\r\n                        </div>\r\n                    `,\r\n                    actions: [{\r\n                        text: 'Confirm',\r\n                        primary: true,\r\n                        onClick: (close) => {\r\n                            resolve(document.getElementById('txPin').value)\r\n                            close()\r\n                        }\r\n                    }]\r\n                })\r\n                modal.show()\r\n            })\r\n\r\n            if (!pin || pin.length !== 6) throw new Error('Invalid PIN')\r\n\r\n            const rate = calculateExchangeRate()\r\n            const receivedAmount = swapAmount * rate\r\n            const fee = swapAmount * 0.01\r\n\r\n            // Create transaction record\r\n            const { error: txError } = await supabase\r\n                .from('transactions')\r\n                .insert({\r\n                    user_id: session.user.id,\r\n                    type: 'swap',\r\n                    status: 'completed',\r\n                    from_asset: selectedFromAsset === 'balance' ? null : selectedFromAsset.assets.id,\r\n                    to_asset: selectedToAsset === 'balance' ? null : selectedToAsset.id,\r\n                    amount: swapAmount,\r\n                    fee: fee,\r\n                    fee_percentage: 1\r\n                })\r\n\r\n            if (txError) throw txError\r\n\r\n            // Update balances based on swap direction\r\n            if (selectedFromAsset === 'balance') {\r\n                // From main balance to asset\r\n                await Promise.all([\r\n                    supabase\r\n                        .from('trading_accounts')\r\n                        .update({ balance: userMainBalance - swapAmount })\r\n                        .eq('user_id', session.user.id)\r\n                        .eq('account_type', 'live'),\r\n                    supabase.rpc('create_or_update_user_asset', {\r\n                        p_user_id: session.user.id,\r\n                        p_asset_id: selectedToAsset.id,\r\n                        p_amount: receivedAmount\r\n                    })\r\n                ])\r\n            } else if (selectedToAsset === 'balance') {\r\n                // From asset to main balance\r\n                await Promise.all([\r\n                    supabase.rpc('create_or_update_user_asset', {\r\n                        p_user_id: session.user.id,\r\n                        p_asset_id: selectedFromAsset.assets.id,\r\n                        p_amount: -swapAmount\r\n                    }),\r\n                    supabase\r\n                        .from('trading_accounts')\r\n                        .update({ balance: userMainBalance + receivedAmount })\r\n                        .eq('user_id', session.user.id)\r\n                        .eq('account_type', 'live')\r\n                ])\r\n            } else {\r\n                // Asset to asset swap\r\n                await Promise.all([\r\n                    supabase.rpc('create_or_update_user_asset', {\r\n                        p_user_id: session.user.id,\r\n                        p_asset_id: selectedFromAsset.assets.id,\r\n                        p_amount: -swapAmount\r\n                    }),\r\n                    supabase.rpc('create_or_update_user_asset', {\r\n                        p_user_id: session.user.id,\r\n                        p_asset_id: selectedToAsset.id,\r\n                        p_amount: receivedAmount\r\n                    })\r\n                ])\r\n            }\r\n\r\n            // Create notification\r\n            const fromText = selectedFromAsset === 'balance' ? 'USD' : selectedFromAsset.assets.symbol\r\n            const toText = selectedToAsset === 'balance' ? 'USD' : selectedToAsset.symbol\r\n\r\n            await createNotification(\r\n                session.user.id,\r\n                'swap',\r\n                'Swap Successful',\r\n                `Swapped ${swapAmount} ${fromText} to ${receivedAmount.toFixed(8)} ${toText}`\r\n            )\r\n\r\n            // Show success\r\n            const successModal = new Modal({\r\n                content: `\r\n                    <div class=\"text-center space-y-4\">\r\n                        <div class=\"text-6xl text-green-500\">\r\n                            <i class=\"fas fa-check-circle\"></i>\r\n                        </div>\r\n                        <h3 class=\"text-xl font-medium text-white\">Swap Successful</h3>\r\n                        <p class=\"text-gray-400\">Your assets have been swapped</p>\r\n                    </div>\r\n                `\r\n            })\r\n            successModal.show()\r\n\r\n            setTimeout(async () => {\r\n                successModal.hide()\r\n                await loadPage(\"dashboard\")\r\n            }, 3000)\r\n\r\n        } catch (error) {\r\n            console.error('Swap error:', error)\r\n            toastify({\r\n                text: error.message || 'Failed to process swap',\r\n                background: 'bg-red-500'\r\n            })\r\n        } finally {\r\n            isProcessing = false\r\n            spinner.stop()\r\n        }\r\n    }\r\n\r\n    // Attach global handlers\r\n    window.handleFromAssetSelect = handleFromAssetSelect\r\n    window.handleToAssetSelect = handleToAssetSelect\r\n    window.processSwap = processSwap\r\n    window.updateSwapPreview = updateSwapPreview\r\n\r\n    function pageEvents() {\r\n        navEvents()\r\n        initializeData()\r\n    }\r\n\r\n    return {\r\n        html: /* html */`\r\n            ${navbar}\r\n            <main class=\"main-scroll-view pb-36 lg:pb-0\">\r\n                <div class=\"max-w-3xl mx-auto p-4 md:p-8 space-y-8\">\r\n                    <h1 class=\"text-2xl font-bold text-white\">Swap Assets</h1>\r\n                    \r\n                    <form class=\"space-y-6\" onsubmit=\"window.processSwap(event)\">\r\n                        <!-- From Asset -->\r\n                        <div class=\"space-y-4\">\r\n                            <label class=\"block text-sm font-medium text-gray-400\">From</label>\r\n                            <select id=\"fromAsset\" \r\n                                    class=\"w-full p-4 bg-brand-black/50 border border-brand-primary/20 rounded-xl text-white\"\r\n                                    onchange=\"window.handleFromAssetSelect(event)\"\r\n                                    required>\r\n                                <option value=\"\" disabled selected>Select Asset</option>\r\n                            </select>\r\n                        </div>\r\n\r\n                        <!-- Swap Icon -->\r\n                        <div class=\"flex justify-center\">\r\n                            <div class=\"w-10 h-10 rounded-full bg-brand-primary/10 flex items-center justify-center\">\r\n                                <i class=\"fas fa-arrow-down text-brand-primary\"></i>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <!-- To Asset -->\r\n                        <div class=\"space-y-4\">\r\n                            <label class=\"block text-sm font-medium text-gray-400\">To</label>\r\n                            <select id=\"toAsset\" \r\n                                    class=\"w-full p-4 bg-brand-black/50 border border-brand-primary/20 rounded-xl text-white\"\r\n                                    onchange=\"window.handleToAssetSelect(event)\"\r\n                                    required>\r\n                                <option value=\"\" disabled selected>Select Asset</option>\r\n                            </select>\r\n                        </div>\r\n\r\n                        <!-- Amount -->\r\n                        <div class=\"space-y-4\">\r\n                            <label class=\"block text-sm font-medium text-gray-400\">Amount</label>\r\n                            <input type=\"number\" \r\n                                   id=\"swapAmount\"\r\n                                   step=\"any\"\r\n                                   required\r\n                                   class=\"w-full p-4 bg-brand-black/50 border border-brand-primary/20 rounded-xl text-white\"\r\n                                   placeholder=\"Enter amount\"\r\n                                   oninput=\"window.updateSwapPreview()\">\r\n                        </div>\r\n\r\n                        <!-- Swap Preview -->\r\n                        <div id=\"swapPreview\" class=\"space-y-4\"></div>\r\n\r\n                        <button type=\"submit\"\r\n                                class=\"w-full p-4 bg-brand-primary text-white rounded-xl hover:bg-brand-primary/90\r\n                                       transition-colors duration-300 flex items-center justify-center gap-2\">\r\n                            <i class=\"fas fa-exchange-alt\"></i>\r\n                            Swap Assets\r\n                        </button>\r\n                    </form>\r\n                </div>\r\n            </main>\r\n        `,\r\n        pageEvents\r\n    }\r\n}\r\n\r\nexport default swap"],"names":["swap","auth","reset","trackPageVisit","navbar","navEvents","Navbar","userAssets","allAssets","userMainBalance","selectedFromAsset","selectedToAsset","cryptoPrices","swapAmount","isProcessing","fetchCryptoPrices","data","toastify","initializeData","spinner","fetchUserAssets","error","session","supabase","userAssetsResult","allAssetsResult","balanceResult","renderAssetSelectors","calculateExchangeRate","fromPrice","toPrice","updateSwapPreview","previewElement","amount","rate","receivedAmount","fee","fromSymbol","toSymbol","handleFromAssetSelect","e","value","a","toSelect","option","handleToAssetSelect","fromSelect","processSwap","pin","resolve","Modal","close","txError","fromText","toText","createNotification","successModal","loadPage","pageEvents"],"mappings":"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"}