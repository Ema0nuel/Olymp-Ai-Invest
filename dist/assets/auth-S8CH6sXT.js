import{s as f}from"./spinner-DaVCJ9xF.js";import{t as c}from"./toastify-C88f8oFV.js";import{s as n}from"./supabaseClients-Fr4pJEim.js";import{l as m}from"./index-BXoOFHK0.js";import{L as P}from"./logo-9_xFcp4C.js";import{i as S,l as x}from"./webAuthnHelper-CFOYufXH.js";const y=["bitcoin","ethereum","tether","binancecoin","ripple","cardano","solana","polkadot","dogecoin","avalanche-2","chainlink","uniswap","litecoin","matic-network","stellar"].join(",");class I{constructor(){this.session=null,this.chart=null,this.priceInterval=null,this.timerInterval=null,this.socket=null,this.lastPrice=100,this.candleData=[],this.isPaused=!1,this.pauseStart=null,this.totalPausedTime=0,this.tvWidget=null,this.tradeAsset=null,this.leverage=100,this.volatility=.002,this.trendStrength=.3,this.trend=0,this.downwardBias=.48,this.priceHistory=[],this.marketPrices={},this.priceUpdateInterval=null,this.marketSentiment=0,this.volatilityFactor=1.5,this.slippageFee=.05}initializeTradingView(t="BTCUSDT"){const e=document.getElementById("tradingview_widget");if(!e)return;e.innerHTML=`
            <div class="tradingview-widget-container" style="height:100%;width:100%">
                <div class="tradingview-widget-container__widget" style="height:calc(100% - 32px);width:100%"></div>
                <div class="tradingview-widget-copyright">
                    <a href="https://www.tradingview.com/" rel="noopener nofollow" target="_blank">
                        <span class="blue-text">Track all markets on TradingView</span>
                    </a>
                </div>
            </div>
        `;const s=document.createElement("script");s.type="text/javascript",s.src="https://s3.tradingview.com/external-embedding/embed-widget-advanced-chart.js",s.async=!0,s.innerHTML=JSON.stringify({autosize:!0,symbol:`${t}`,interval:"1",timezone:"exchange",theme:"dark",style:"1",locale:"en",enable_publishing:!1,allow_symbol_change:!0,calendar:!1,support_host:"https://www.tradingview.com",withdateranges:!0,save_image:!1,details:!0,hotlist:!0,backgroundColor:"rgba(30, 34, 45, 1)"}),e.querySelector(".tradingview-widget-container").appendChild(s)}async initializeSession(t){try{const{data:{user:e}}=await n.auth.getUser();if(!e)throw new Error("User not authenticated");let s,i;const r=parseFloat(t.amount);if(t.tradeAsset==="USD"){const{data:o,error:a}=await n.from("trading_accounts").select("*").eq("user_id",e.id).eq("account_type","live").single();if(a)throw a;s=parseFloat(o?.balance||0),i=o?.id;const l=s-r;if(l<0)throw new Error(`Insufficient USD balance. Available: ${s}`);const{error:h}=await n.from("trading_accounts").update({balance:l}).eq("id",i);if(h)throw h}else{const{data:o,error:a}=await n.from("assets").select("id").eq("symbol",t.tradeAsset).single();if(a)throw new Error(`Asset ${t.tradeAsset} not found`);const{data:l,error:h}=await n.from("user_assets").select("id, balance").eq("user_id",e.id).eq("asset_id",o.id).single();if(h)throw new Error(`No ${t.tradeAsset} balance found`);s=parseFloat(l?.balance||0),i=l?.id;const u=s-r;if(u<0)throw new Error(`Insufficient ${t.tradeAsset} balance. Available: ${s}`);const{error:g}=await n.from("user_assets").update({balance:u}).eq("id",i);if(g)throw g}return this.session={...t,startTime:Date.now(),currentProfit:0,highestProfit:0,lowestProfit:0,remainingTime:t.duration,startPrice:this.lastPrice,currentPrice:this.lastPrice,takeProfitLevel:null,stopLossLevel:null,userId:e.id,accountId:i,initialBalance:s,currentBalance:s-r,tradeAmount:r,tradeFee:r*.1,tradeAsset:t.tradeAsset},this.tradeAsset=t.tradeAsset,localStorage.setItem(`userBalance_${this.tradeAsset}`,(s-r).toString()),this.saveSessionToStorage(),this.initializeTradingView(t.symbol||"BTCUSDT"),this.startPriceSimulation(),this.startTimer(),this.session}catch(e){throw console.error("Session initialization error:",e),c({text:e.message||"Failed to initialize session",background:"bg-red-500"}),e}}calculateProfit(){if(!this.session)return;const t=parseFloat(this.session.tradeAmount),e=parseFloat(this.session.startPrice),i=(parseFloat(this.lastPrice)-e)/e,r=t*i*this.leverage,o=t*.1;this.session.rawProfit=r,this.session.tradeFee=o,this.session.currentProfit=r,this.session.highestProfit=Math.max(this.session.highestProfit||0,r),this.session.lowestProfit=Math.min(this.session.lowestProfit||0,r),this.saveSessionToStorage()}async endSession(t="manual"){if(this.session)try{this.priceInterval&&clearInterval(this.priceInterval),this.timerInterval&&clearInterval(this.timerInterval),this.socket&&this.socket.close(),this.tvWidget&&this.tvWidget.remove();const e=parseFloat(this.session.tradeAmount),s=parseFloat(this.session.rawProfit),i=parseFloat(this.session.tradeFee),r=parseFloat(this.session.currentBalance),o=r+e+(s-i),{error:a}=await n.from(this.session.tradeAsset==="USD"?"trading_accounts":"user_assets").update({balance:Math.max(0,o)}).eq("id",this.session.accountId);if(a)throw a;const l={user_id:this.session.userId,type:"swap",status:"completed",amount:Math.abs(s),fee:i,fee_percentage:10,network:"internal",created_at:new Date(this.session.startTime).toISOString(),completed_at:new Date().toISOString(),currency:this.session.tradeAsset,notes:`Trading ${t}`,metadata:{trade_type:"spot",initial_balance:this.session.initialBalance,trade_amount:e,balance_after_trade:r,raw_profit_loss:s,trading_fee:i,final_balance:o,reason:t,leverage_used:this.leverage}},{error:h}=await n.from("transactions").insert(l);if(h)throw h;const u=s-i,g=this.session.tradeAsset;return this.session=null,localStorage.removeItem("activeTradeSession"),localStorage.setItem(`userBalance_${g}`,o.toString()),c({text:`Trading session ended. P/L: ${u.toFixed(2)} ${g}`,background:u>=0?"bg-green-500":"bg-red-500"}),u}catch(e){throw console.error("Session end error:",e),c({text:"Error ending trading session",background:"bg-red-500"}),e}}async fetchMarketPrices(){try{const e=await(await fetch(`https://api.coingecko.com/api/v3/simple/price?ids=${y}&vs_currencies=usd`)).json();return this.marketPrices=e,e}catch(t){return console.error("Price fetch error:",t),null}}startPriceSimulation(){this.priceInterval&&clearInterval(this.priceInterval),this.priceUpdateInterval&&clearInterval(this.priceUpdateInterval),this.priceUpdateInterval=setInterval(async()=>{await this.fetchMarketPrices()},3e4),this.priceInterval=setInterval(()=>{if(this.isPaused)return;this.marketSentiment+=(Math.random()-.5)*.1,this.marketSentiment=Math.max(Math.min(this.marketSentiment,1),-1);const t=this.session?.symbol?.toLowerCase()||"bitcoin",e=this.marketPrices[t]?.usd||this.lastPrice,s=this.volatility*this.volatilityFactor,i=this.marketSentiment*s*2,r=this.trend*s,o=(Math.random()-.5)*s,a=e*(i+r+o+Math.sin(Date.now()/1e4)*s*.5);this.lastPrice=Math.max(1,e+a),this.priceHistory.push({price:this.lastPrice,timestamp:Date.now()}),this.priceHistory.length>3600&&this.priceHistory.shift();const l={x:Date.now(),o:this.lastPrice,h:this.lastPrice*(1+Math.random()*s),l:this.lastPrice*(1-Math.random()*s),c:this.lastPrice};this.updatePriceData(l)},1e3)}updatePriceData(t){this.candleData.push(t),this.candleData.length>100&&this.candleData.shift(),this.session&&(this.session.currentPrice=this.lastPrice,this.calculateProfit(),this.updateChart(),this.checkTakeProfitStopLoss(),this.updateUI())}renderTakeProfitStopLoss(){if(!this.session)return"";const{takeProfitLevel:t,stopLossLevel:e,currentProfit:s}=this.session;return`
            ${t?`
                <div class="mt-4 p-2 bg-green-500/10 rounded-lg flex justify-between items-center">
                    <span>Take Profit</span>
                    <span class="font-bold ${s>=t?"text-green-500":"text-white"}">
                        $${t.toFixed(2)}
                    </span>
                </div>
            `:""}
            
            ${e?`
                <div class="mt-2 p-2 bg-red-500/10 rounded-lg flex justify-between items-center">
                    <span>Stop Loss</span>
                    <span class="font-bold ${s<=e?"text-red-500":"text-white"}">
                        $${Math.abs(e).toFixed(2)}
                    </span>
                </div>
            `:""}
        `}updateChart(){!this.chart||!this.candleData.length||(this.chart.data.datasets[0].data=this.candleData,this.chart.update("none"))}updateUI(){const t=document.getElementById("tradeInfo");if(!(!t||!this.session||!this.lastPrice))try{const e=this.session.remainingTime||0,s=Math.floor(e/60),i=e%60,r=this.session.startPrice||this.lastPrice,o=this.lastPrice>r,a=o?"text-green-500":"text-red-500",l=o?"+":"",h=r?(this.lastPrice-r)/r*100:0,u=this.calculateMomentum(),g=this.session.currentProfit||0,w=this.session.tradeFee||0,b=this.session.initialBalance||0,v=this.session.tradeAsset||"USD";t.innerHTML=`
            <div class="space-y-4 p-4 bg-brand-black/30 rounded-xl border border-brand-primary/10">
                <div class="grid grid-cols-2 gap-4">
                    <div>
                        <div class="text-sm text-gray-400">Current Leverage</div>
                        <div class="text-xl font-bold text-white">
                            ${(this.lastPrice||0).toFixed(2)} ${v}
                        </div>
                        <div class="text-xs ${a}">
                            ${l}${h.toFixed(2)}%
                        </div>
                    </div>
                    <div>
                        <div class="text-sm text-gray-400">Time Left</div>
                        <div class="text-xl font-bold text-white">
                            ${s}:${i.toString().padStart(2,"0")}
                        </div>
                        <div class="text-xs text-gray-400">Momentum: ${u}</div>
                    </div>
                    <div>
                        <div class="text-sm text-gray-400">Current P/L</div>
                        <div class="text-xl font-bold ${a}">
                            ${l}${Math.abs(g).toFixed(2)} ${v}
                        </div>
                        <div class="text-xs text-gray-400">
                            Fee: ${w.toFixed(2)} ${v}
                        </div>
                    </div>
                    <div>
                        <div class="text-sm text-gray-400">Initial Balance</div>
                        <div class="text-xl font-bold text-white">
                            ${b.toFixed(2)} ${v}
                        </div>
                    </div>
                </div>
                ${this.renderTakeProfitStopLoss()}
            </div>
        `}catch(e){console.error("UI update error:",e),t.innerHTML=`
            <div class="p-4 bg-red-500/10 rounded-xl border border-red-500/20">
                <p class="text-red-500">Error updating trade information</p>
            </div>
        `}}calculateMomentum(){if(!Array.isArray(this.priceHistory)||this.priceHistory.length<10)return"Calculating...";try{const e=this.priceHistory.slice(-10).reduce((s,i,r,o)=>r===0?s:s+(i.price-o[r-1].price)/o[r-1].price,0);return e>.01?"🔥 Strong Up":e>0?"📈 Upward":e<-.01?"❄️ Strong Down":e<0?"📉 Downward":"↔️ Neutral"}catch(t){return console.error("Momentum calculation error:",t),"Calculating..."}}setTakeProfit(t){return!this.session||!t?!1:(this.session.takeProfitLevel=parseFloat(t),this.saveSessionToStorage(),c({text:`Take Profit set to $${t}`,background:"bg-green-500"}),!0)}setStopLoss(t){return!this.session||!t?!1:(this.session.stopLossLevel=-Math.abs(parseFloat(t)),this.saveSessionToStorage(),c({text:`Stop Loss set to $${t}`,background:"bg-red-500"}),!0)}checkTakeProfitStopLoss(){if(!this.session?.currentProfit)return;const{currentProfit:t,takeProfitLevel:e,stopLossLevel:s}=this.session;if(e&&t>=e){this.endSession("take_profit");return}if(s&&t<=s){this.endSession("stop_loss");return}}startTimer(){this.timerInterval&&clearInterval(this.timerInterval),this.timerInterval=setInterval(()=>{if(!(this.isPaused||!this.session)){if(this.session.remainingTime<=0){this.endSession("timeout");return}this.session.remainingTime--,this.saveSessionToStorage(),this.updateUI()}},1e3)}handleVisibilityChange(t){t?(this.pauseSession(),this.showNotification("Trading Session Paused","Your trading session is on hold. Return to continue trading.")):this.resumeSession()}pauseSession(){this.isPaused||(this.isPaused=!0,this.pauseStart=Date.now(),this.updateUI())}resumeSession(){this.isPaused&&(this.isPaused=!1,this.pauseStart&&(this.totalPausedTime+=Date.now()-this.pauseStart),this.updateUI())}saveSessionToStorage(){this.session&&localStorage.setItem("activeTradeSession",JSON.stringify({...this.session,lastUpdated:Date.now()}))}restoreSession(t){this.session=t,this.lastPrice=t.currentPrice,this.initializeTradingView(t.symbol||"BTCUSDT"),this.startPriceSimulation(),this.startTimer()}showNotification(t,e){Notification.permission==="granted"&&new Notification(t,{body:e,icon:P})}}const p=new I;async function U({email:d,password:t}){try{if(f.start(),p.session)try{await p.endSession("login")}catch(a){console.warn("Session end error:",a),p.session=null}if(localStorage.removeItem("activeTradeSession"),Object.keys(localStorage).filter(a=>a.startsWith("userBalance_")).forEach(a=>localStorage.removeItem(a)),(!d||!t)&&await S()){let a=null;if(!d)return c({text:"Please enter your email for biometric login",icon:"fas fa-exclamation-circle",background:"bg-yellow-500"}),f.stop(),!1;const{data:l,error:h}=await n.from("auth.users").select("id").eq("email",d).single();if(h||!l)return f.stop(),c({text:"User not found for biometric login",icon:"fas fa-exclamation-circle",background:"bg-red-500"}),!1;a=l.id;const u=await x(a);return f.stop(),u.success?(c({text:"Biometric login successful! Redirecting...",icon:"fas fa-fingerprint",background:"bg-green-500/10"}),await m("dashboard"),!0):(c({text:"Biometric login failed: "+u.error,icon:"fas fa-exclamation-circle",background:"bg-red-500"}),!1)}const{data:e,error:s}=await n.auth.signInWithPassword({email:d,password:t});if(s)throw s;const{data:i,error:r}=await n.from("profiles").select("*").eq("id",e.user.id).single();if(r)throw r;i.is_verified||(f.stop(),c({text:"Please verify your email first",icon:"fas fa-exclamation-circle",background:"bg-yellow-500",duration:3e3}));const{error:o}=await n.from("trading_accounts").update({last_login:new Date().toISOString()}).eq("user_id",e.user.id);return o&&console.error("Error updating last login:",o),f.stop(),c({text:"Welcome back! Redirecting to dashboard...",icon:"fas fa-check-circle",background:"bg-green-500/10",duration:2e3}),await new Promise(a=>setTimeout(a,1e3)),await m("dashboard"),!0}catch(e){return f.stop(),c({text:e.message==="Invalid login credentials"?"Invalid email or password":"An error occurred during login",icon:"fas fa-exclamation-circle",background:"bg-red-500",duration:3e3}),!1}}async function B(){try{if(f.start(),p.session)try{await p.endSession("logout")}catch(t){console.warn("Error ending trade session:",t)}localStorage.removeItem("activeTradeSession"),Object.keys(localStorage).filter(t=>t.startsWith("userBalance_")||t.startsWith("user")).forEach(t=>localStorage.removeItem(t));const{error:d}=await n.auth.signOut();if(d)throw d;return f.stop(),c({text:"Logged out successfully",background:"bg-green-500",duration:2e3}),await m("login"),!0}catch(d){return console.error("Logout error:",d),f.stop(),await m("login"),c({text:"Error during logout, please refresh the page",background:"bg-red-500",duration:3e3}),!1}}async function k(d=""){try{const{data:{session:t},error:e}=await n.auth.getSession();if(e)throw e;if(d.toLowerCase()==="login"&&t)return m("dashboard"),!1;if(d.toLowerCase()!=="login"&&!t)return c({text:"Please login to continue",icon:"fas fa-lock",background:"bg-yellow-500/10",duration:3e3}),m("login"),!1;if(t){const{data:s,error:i}=await n.from("profiles").select("*").eq("id",t.user.id).single();if(i)throw i;localStorage.setItem("userProfile",JSON.stringify(s))}return!0}catch(t){return console.error("Auth check failed:",t),localStorage.removeItem("userProfile"),d.toLowerCase()!=="login"&&(c({text:"Session expired. Please login again",icon:"fas fa-exclamation-circle",background:"bg-red-500/10",duration:3e3}),m("login")),!1}}function T(){try{return JSON.parse(localStorage.getItem("userProfile"))}catch{return null}}function _(){localStorage.removeItem("userProfile"),n.auth.signOut()}const C={check:k,getProfile:T,clear:_};export{C as a,B as b,p as h,U as l};
//# sourceMappingURL=auth-S8CH6sXT.js.map
