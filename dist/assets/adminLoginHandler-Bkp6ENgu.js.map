{"version":3,"file":"adminLoginHandler-Bkp6ENgu.js","sources":["../../src/script/views/admin/functions/adminLoginHandler.js"],"sourcesContent":["import CryptoJS from 'crypto-js';\r\nimport toastify from '../../../components/toastify';\r\nimport { loadPage } from '../../../routes/router';\r\n\r\nconst ADMIN_EMAIL = 'olympaiinvest@gmail.com';\r\nconst ADMIN_HASH = '23a0f5670db762e769016f5f7e3eebe5780bccc6fc035c468e3efc910d11bc4d';\r\nconst SESSION_KEY = 'OlYMP_AI_ADMIN_SECRET';\r\n\r\nexport async function adminLoginHandler(formData) {\r\n    try {\r\n        await new Promise(resolve => setTimeout(resolve, 800));\r\n\r\n        const inputEmail = formData.email?.trim().toLowerCase();\r\n        const inputPassword = formData.password || '';\r\n        const inputHash = CryptoJS.SHA256(inputPassword.trim()).toString();\r\n\r\n        if (inputEmail !== ADMIN_EMAIL || inputHash !== ADMIN_HASH) {\r\n            throw new Error('Invalid credentials');\r\n        }\r\n\r\n        const sessionToken = CryptoJS.SHA256(Date.now() + Math.random().toString()).toString();\r\n        const adminSession = {\r\n            token: sessionToken,\r\n            timestamp: Date.now(),\r\n            expiresAt: Date.now() + 24 * 60 * 60 * 1000,\r\n            email: ADMIN_EMAIL\r\n        };\r\n\r\n        const encryptedSession = CryptoJS.AES.encrypt(\r\n            JSON.stringify(adminSession),\r\n            SESSION_KEY\r\n        ).toString();\r\n        localStorage.setItem('adminSession', encryptedSession);\r\n\r\n        toastify({\r\n            text: 'Welcome back, Admin!',\r\n            background: 'bg-green-500',\r\n            duration: 4000,\r\n        });\r\n\r\n        setTimeout(async () => await loadPage(\"adminDashboard\"), 2000)\r\n        return true;\r\n\r\n    } catch (error) {\r\n        toastify({\r\n            text: 'Invalid credentials',\r\n            background: 'bg-red-500'\r\n        });\r\n        return false;\r\n    }\r\n}\r\n\r\nexport function checkAdminAuth() {\r\n    try {\r\n        const encryptedSession = localStorage.getItem('adminSession');\r\n        if (!encryptedSession) return false;\r\n\r\n        const decrypted = CryptoJS.AES.decrypt(encryptedSession, SESSION_KEY).toString(CryptoJS.enc.Utf8);\r\n        if (!decrypted) return false;\r\n\r\n        const session = JSON.parse(decrypted);\r\n        if (Date.now() > session.expiresAt) {\r\n            localStorage.removeItem('adminSession');\r\n            return false;\r\n        }\r\n        return true;\r\n    } catch (error) {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport async function logoutAdmin() {\r\n    localStorage.removeItem('adminSession');\r\n    toastify({\r\n        text: 'Successfully Logged Out!',\r\n        icon: \"fas fa-check-circle\",\r\n        duration: 4000,\r\n    });\r\n    setTimeout(async () => await loadPage(\"adminLogin\"), 2000)\r\n}"],"names":["ADMIN_EMAIL","ADMIN_HASH","SESSION_KEY","adminLoginHandler","formData","resolve","inputEmail","inputPassword","inputHash","CryptoJS","adminSession","encryptedSession","toastify","loadPage","logoutAdmin"],"mappings":"2HAIA,MAAMA,EAAc,0BACdC,EAAa,mEACbC,EAAc,wBAEb,eAAeC,EAAkBC,EAAU,CAC9C,GAAI,CACA,MAAM,IAAI,QAAQC,GAAW,WAAWA,EAAS,GAAG,CAAC,EAErD,MAAMC,EAAaF,EAAS,OAAO,KAAI,EAAG,YAAW,EAC/CG,EAAgBH,EAAS,UAAY,GACrCI,EAAYC,EAAS,OAAOF,EAAc,KAAI,CAAE,EAAE,WAExD,GAAID,IAAeN,GAAeQ,IAAcP,EAC5C,MAAM,IAAI,MAAM,qBAAqB,EAIzC,MAAMS,EAAe,CACjB,MAFiBD,EAAS,OAAO,KAAK,IAAG,EAAK,KAAK,OAAM,EAAG,UAAU,EAAE,SAAQ,EAGhF,UAAW,KAAK,IAAG,EACnB,UAAW,KAAK,IAAG,EAAK,KAAU,GAAK,IACvC,MAAOT,CACnB,EAEcW,EAAmBF,EAAS,IAAI,QAClC,KAAK,UAAUC,CAAY,EAC3BR,CACZ,EAAU,SAAQ,EACV,oBAAa,QAAQ,eAAgBS,CAAgB,EAErDC,EAAS,CACL,KAAM,uBACN,WAAY,eACZ,SAAU,GACtB,CAAS,EAED,WAAW,SAAY,MAAMC,EAAS,gBAAgB,EAAG,GAAI,EACtD,EAEX,MAAgB,CACZ,OAAAD,EAAS,CACL,KAAM,sBACN,WAAY,YACxB,CAAS,EACM,EACX,CACJ,CAqBO,eAAeE,GAAc,CAChC,aAAa,WAAW,cAAc,EACtCF,EAAS,CACL,KAAM,2BACN,KAAM,sBACN,SAAU,GAClB,CAAK,EACD,WAAW,SAAY,MAAMC,EAAS,YAAY,EAAG,GAAI,CAC7D"}